{
  "address": "0x0Bc676698958D38A3d62F89FA624749679A84F23",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_sizeOfLotteryNumbers",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_maxValidNumberRange",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketSupply",
          "type": "uint256"
        }
      ],
      "name": "LotteryClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketSupply",
          "type": "uint256"
        }
      ],
      "name": "LotteryOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestNumbers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newMaxRange",
          "type": "uint16"
        }
      ],
      "name": "UpdatedMaxRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newLotterySize",
          "type": "uint16"
        }
      ],
      "name": "UpdatedSizeOfLottery",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_closingTimestamp",
          "type": "uint256"
        }
      ],
      "name": "createNewLotto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "drawWinningNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getBasicLottoInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lotteryID",
              "type": "uint256"
            },
            {
              "internalType": "enum SweetpadLottery.Status",
              "name": "lotteryStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint16[]",
              "name": "winningNumbers",
              "type": "uint16[]"
            }
          ],
          "internalType": "struct SweetpadLottery.LottoInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxRange",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getWiningNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidRange_",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "numbersDrawn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "randomNumberGenerator_",
          "type": "address"
        }
      ],
      "name": "setRendomGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sizeOfLottery_",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newMaxRange",
          "type": "uint16"
        }
      ],
      "name": "updateMaxRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newSize",
          "type": "uint16"
        }
      ],
      "name": "updateSizeOfLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a2e655b550da3cf6427730b1397dba5d2b55d33b75305719ddeeb31862cfb3b",
  "receipt": {
    "to": null,
    "from": "0xb2444FE0E53378E094736834067c1E2653ec3CAB",
    "contractAddress": "0x0Bc676698958D38A3d62F89FA624749679A84F23",
    "transactionIndex": 46,
    "gasUsed": "1038282",
    "logsBloom": "0x
    "blockHash": "0xa9d98336ce3263f4c311c96cdd36e095980aa6836a470603af0ecbd1aab22fdf",
    "transactionHash": "0x5a2e655b550da3cf6427730b1397dba5d2b55d33b75305719ddeeb31862cfb3b",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 22023903,
        "transactionHash": "0x5a2e655b550da3cf6427730b1397dba5d2b55d33b75305719ddeeb31862cfb3b",
        "address": "0x0Bc676698958D38A3d62F89FA624749679A84F23",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b2444fe0e53378e094736834067c1e2653ec3cab"
        ],
        "data": "0x",
        "logIndex": 125,
        "blockHash": "0xa9d98336ce3263f4c311c96cdd36e095980aa6836a470603af0ecbd1aab22fdf"
      }
    ],
    "blockNumber": 22023903,
    "cumulativeGasUsed": "9094180",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    10
  ],
  "numDeployments": 6,
  "solcInputHash": "79ad40eb9d8954d2649ce93644f13abb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_sizeOfLotteryNumbers\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_maxValidNumberRange\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketSupply\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketSupply\",\"type\":\"uint256\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestNumbers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newMaxRange\",\"type\":\"uint16\"}],\"name\":\"UpdatedMaxRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newLotterySize\",\"type\":\"uint16\"}],\"name\":\"UpdatedSizeOfLottery\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closingTimestamp\",\"type\":\"uint256\"}],\"name\":\"createNewLotto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"drawWinningNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getBasicLottoInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"},{\"internalType\":\"enum SweetpadLottery.Status\",\"name\":\"lotteryStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"winningNumbers\",\"type\":\"uint16[]\"}],\"internalType\":\"struct SweetpadLottery.LottoInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxRange\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getWiningNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidRange_\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"numbersDrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randomNumberGenerator_\",\"type\":\"address\"}],\"name\":\"setRendomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sizeOfLottery_\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMaxRange\",\"type\":\"uint16\"}],\"name\":\"updateMaxRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newSize\",\"type\":\"uint16\"}],\"name\":\"updateSizeOfLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createNewLotto(uint256,uint256)\":{\"params\":{\"_closingTimestamp\":\"The block timestamp after which no more tickets          will be sold for the lottery. Note that this timestamp MUST          be after the starting block timestamp.\",\"_startingTimestamp\":\"The block timestamp for the beginning of the          lottery.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SweetpadLottery.sol\":\"SweetpadLottery\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SweetpadLottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n// Imported OZ helper contracts\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n// import \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n// Inherited allowing for ownership of contract\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// Allows for intergration with ChainLink VRF\\nimport \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\n// Interface for Lottery NFT to mint tokens\\nimport \\\"./interfaces/ISweetpadTicket.sol\\\";\\n\\n\\n// Allows for time manipulation. Set to 0x address on test/mainnet deploy\\n// import \\\"./Testable.sol\\\";\\n\\ncontract SweetpadLottery is Ownable {\\n    // Libraries\\n    using SafeMath for uint256;\\n    // Safe ERC20\\n    using SafeERC20 for IERC20;\\n    // Address functionality\\n    using Address for address;\\n\\n    // State variables\\n    // Instance of Cake token (collateral currency for lotto)\\n    // IERC20 internal cake_;\\n    // Storing of the NFT\\n    // TODO check\\n    // ISweetpadTicket internal nft_;\\n    // Storing of the randomness generator\\n    IRandomNumberGenerator internal randomGenerator_;\\n    // Request ID for random number\\n    bytes32 internal requestId_;\\n    // Counter for lottery IDs\\n    uint256 private lotteryIdCounter_;\\n\\n    // Lottery size\\n    uint16 public sizeOfLottery_;\\n    // Max range for numbers (starting at 0)\\n    uint16 public maxValidRange_;\\n    // // Buckets for discounts (i.e bucketOneMax_ = 20, less than 20 tickets gets\\n    // // discount)\\n    // uint8 public bucketOneMax_;\\n    // uint8 public bucketTwoMax_;\\n    // // Bucket discount amounts scaled by 100 (i.e 20% = 20)\\n    // uint8 public discountForBucketOne_;\\n    // uint8 public discountForBucketTwo_;\\n    // uint8 public discountForBucketThree_;\\n\\n    // Represents the status of the lottery\\n    enum Status {\\n        NotStarted, // The lottery has not started yet\\n        Open, // The lottery is open for ticket purchases\\n        Closed, // The lottery is no longer open for ticket purchases\\n        Completed // The lottery has been closed and the numbers drawn\\n    }\\n    // All the needed info around a lottery\\n    struct LottoInfo {\\n        uint256 lotteryID; // ID for lotto\\n        Status lotteryStatus; // Status for lotto\\n        // uint256 prizePoolInCake;    // The amount of cake for prize money\\n        // uint256 costPerTicket;      // Cost per ticket in $cake\\n        // uint8[] prizeDistribution;  // The distribution for prize money\\n        uint256 startingTimestamp; // Block timestamp for star of lotto\\n        uint256 closingTimestamp; // Block timestamp for end of entries\\n        uint16[] winningNumbers; // The winning numbers\\n    }\\n    // Lottery ID's to info\\n    mapping(uint256 => LottoInfo) internal allLotteries_;\\n    mapping(uint256 => uint256) internal rendomNumbers;\\n\\n    //-------------------------------------------------------------------------\\n    // EVENTS\\n    //-------------------------------------------------------------------------\\n\\n    // event NewBatchMint(\\n    //     address indexed minter,\\n    //     uint256[] ticketIDs,\\n    //     uint16[] numbers,\\n    //     uint256 totalCost,\\n    //     uint256 discount,\\n    //     uint256 pricePaid\\n    // );\\n\\n    event RequestNumbers(uint256 lotteryId, bytes32 requestId);\\n\\n    event UpdatedSizeOfLottery(address admin, uint16 newLotterySize);\\n\\n    event UpdatedMaxRange(address admin, uint16 newMaxRange);\\n\\n    // event UpdatedBuckets(\\n    //     address admin,\\n    //     uint8 bucketOneMax,\\n    //     uint8 bucketTwoMax,\\n    //     uint8 discountForBucketOne,\\n    //     uint8 discountForBucketTwo,\\n    //     uint8 discountForBucketThree\\n    // );\\n\\n    event LotteryOpen(uint256 lotteryId, uint256 ticketSupply);\\n\\n    event LotteryClose(uint256 lotteryId, uint256 ticketSupply);\\n\\n    //-------------------------------------------------------------------------\\n    // MODIFIERS\\n    //-------------------------------------------------------------------------\\n\\n    modifier onlyRandomGenerator() {\\n        require(msg.sender == address(randomGenerator_), \\\"Only random generator\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!address(msg.sender).isContract(), \\\"contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // CONSTRUCTOR\\n    //-------------------------------------------------------------------------\\n\\n    constructor(\\n        // address _cake,\\n        // address _timer,\\n        uint8 _sizeOfLotteryNumbers,\\n        uint16 _maxValidNumberRange // uint8 _bucketOneMaxNumber, // TODO check\\n    ) // address lotteryNFT_\\n    // uint8 _bucketTwoMaxNumber,\\n    // uint8 _discountForBucketOne,\\n    // uint8 _discountForBucketTwo,\\n    // uint8 _discountForBucketThree)\\n    // Testable(_timer)\\n    {\\n        // require(\\n        //     _bucketOneMaxNumber != 0 &&\\n        //     _bucketTwoMaxNumber != 0,\\n        //     \\\"Bucket range cannot be 0\\\"\\n        // );\\n        // require(\\n        //     _bucketOneMaxNumber < _bucketTwoMaxNumber,\\n        //     \\\"Bucket one must be smaller\\\"\\n        // );\\n        // require(\\n        //     _discountForBucketOne < _discountForBucketTwo &&\\n        //     _discountForBucketTwo < _discountForBucketThree,\\n        //     \\\"Discounts must increase\\\"\\n        // );\\n        // require(\\n        //     _cake != address(0),\\n        //     \\\"Contracts cannot be 0 address\\\"\\n        // );\\n        require(_sizeOfLotteryNumbers != 0 && _maxValidNumberRange != 0, \\\"Lottery setup cannot be 0\\\");\\n        // require(lotteryNFT_ != address(0), \\\"Contracts cannot be 0 address\\\");\\n        // nft_ = ISweetpadTicket(lotteryNFT_);\\n        // cake_ = IERC20(_cake);\\n        sizeOfLottery_ = _sizeOfLotteryNumbers;\\n        maxValidRange_ = _maxValidNumberRange;\\n\\n        // bucketOneMax_ = _bucketOneMaxNumber;\\n        // bucketTwoMax_ = _bucketTwoMaxNumber;\\n        // discountForBucketOne_ = _discountForBucketOne;\\n        // discountForBucketTwo_ = _discountForBucketTwo;\\n        // discountForBucketThree_ = _discountForBucketThree;\\n    }\\n\\n    // function initialize(\\n    //     address _lotteryNFT,\\n    //     address _IRandomNumberGenerator\\n    // )\\n    //     external\\n    //     initializer\\n    //     onlyOwner()\\n    // {\\n    //     require(\\n    //         _lotteryNFT != address(0) &&\\n    //         _IRandomNumberGenerator != address(0),\\n    //         \\\"Contracts cannot be 0 address\\\"\\n    //     );\\n    //     nft_ = ILotteryNFT(_lotteryNFT);\\n    //     randomGenerator_ = IRandomNumberGenerator(_IRandomNumberGenerator);\\n    // }\\n\\n    //-------------------------------------------------------------------------\\n    // VIEW FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    // function costToBuyTickets(\\n    //     uint256 _lotteryId,\\n    //     uint256 _numberOfTickets\\n    // )\\n    //     external\\n    //     view\\n    //     returns(uint256 totalCost)\\n    // {\\n    //     uint256 pricePer = allLotteries_[_lotteryId].costPerTicket;\\n    //     totalCost = pricePer.mul(_numberOfTickets);\\n    // }\\n\\n    // function costToBuyTicketsWithDiscount(\\n    //     uint256 _lotteryId,\\n    //     uint256 _numberOfTickets\\n    // )\\n    //     external\\n    //     view\\n    //     returns(\\n    //         uint256 cost,\\n    //         uint256 discount,\\n    //         uint256 costWithDiscount\\n    //     )\\n    // {\\n    //     discount = _discount(_lotteryId, _numberOfTickets);\\n    //     cost = this.costToBuyTickets(_lotteryId, _numberOfTickets);\\n    //     costWithDiscount = cost.sub(discount);\\n    // }\\n\\n    function getBasicLottoInfo(uint256 _lotteryId) external view returns (LottoInfo memory) {\\n        return (allLotteries_[_lotteryId]);\\n    }\\n\\n    function getMaxRange() external view returns (uint16) {\\n        return maxValidRange_;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // STATE MODIFYING FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    //-------------------------------------------------------------------------\\n    // Restricted Access Functions (onlyOwner)\\n\\n    function setRendomGenerator(address randomNumberGenerator_) external onlyOwner {\\n        require(randomNumberGenerator_ != address(0), \\\"Contracts cannot be 0 address\\\");\\n        randomGenerator_ = IRandomNumberGenerator(randomNumberGenerator_);\\n    }\\n\\n    function updateSizeOfLottery(uint16 _newSize) external onlyOwner {\\n        require(sizeOfLottery_ != _newSize, \\\"Cannot set to current size\\\");\\n        require(sizeOfLottery_ != 0, \\\"Lottery size cannot be 0\\\");\\n        sizeOfLottery_ = _newSize;\\n\\n        emit UpdatedSizeOfLottery(msg.sender, _newSize);\\n    }\\n\\n    function updateMaxRange(uint16 _newMaxRange) external onlyOwner {\\n        require(maxValidRange_ != _newMaxRange, \\\"Cannot set to current size\\\");\\n        require(maxValidRange_ != 0, \\\"Max range cannot be 0\\\");\\n        maxValidRange_ = _newMaxRange;\\n\\n        emit UpdatedMaxRange(msg.sender, _newMaxRange);\\n    }\\n\\n    // function updateBuckets(\\n    //     uint8 _bucketOneMax,\\n    //     uint8 _bucketTwoMax,\\n    //     uint8 _discountForBucketOne,\\n    //     uint8 _discountForBucketTwo,\\n    //     uint8 _discountForBucketThree\\n    // )\\n    //     external\\n    //     onlyOwner()\\n    // {\\n    //     require(\\n    //         _bucketOneMax != 0 &&\\n    //         _bucketTwoMax != 0,\\n    //         \\\"Bucket range cannot be 0\\\"\\n    //     );\\n    //     require(\\n    //         _bucketOneMax < _bucketTwoMax,\\n    //         \\\"Bucket one must be smaller\\\"\\n    //     );\\n    //     require(\\n    //         _discountForBucketOne < _discountForBucketTwo &&\\n    //         _discountForBucketTwo < _discountForBucketThree,\\n    //         \\\"Discounts must increase\\\"\\n    //     );\\n    //     bucketOneMax_ = _bucketOneMax;\\n    //     bucketTwoMax_ = _bucketTwoMax;\\n    //     discountForBucketOne_ = _discountForBucketOne;\\n    //     discountForBucketTwo_ = _discountForBucketTwo;\\n    //     discountForBucketThree_ = _discountForBucketThree;\\n\\n    //     emit UpdatedBuckets(\\n    //         msg.sender,\\n    //         _bucketOneMax,\\n    //         _bucketTwoMax,\\n    //         _discountForBucketOne,\\n    //         _discountForBucketTwo,\\n    //         _discountForBucketThree\\n    //     );\\n    // }\\n\\n    function drawWinningNumbers(uint256 _lotteryId) external onlyOwner {\\n        // Checks that the lottery is past the closing block\\n        require(\\n            allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\\n            \\\"Cannot set winning numbers during lottery\\\"\\n        );\\n        // Checks lottery numbers have not already been drawn\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Open, \\\"Lottery State incorrect for draw\\\");\\n        // Sets lottery status to closed\\n        allLotteries_[_lotteryId].lotteryStatus = Status.Closed;\\n        // Requests a random number from the generator\\n        requestId_ = randomGenerator_.getRandomNumber(_lotteryId);\\n        // Emits that random number has been requested\\n        emit RequestNumbers(_lotteryId, requestId_);\\n    }\\n\\n    function numbersDrawn(\\n        uint256 _lotteryId,\\n        bytes32 _requestId,\\n        uint256 _randomNumber\\n    ) external onlyRandomGenerator {\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Closed, \\\"Draw numbers first\\\");\\n        if (requestId_ == _requestId) {\\n            allLotteries_[_lotteryId].lotteryStatus = Status.Completed;\\n            // allLotteries_[_lotteryId].winningNumbers = _split(_randomNumber); // TODO\\n        }\\n        rendomNumbers[_lotteryId] = _randomNumber;\\n        // TODO fix\\n        // emit LotteryClose(_lotteryId, nft_.getTotalSupply());\\n    }\\n\\n    function getWiningNumbers(uint256 _lotteryId) external {\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \\\"Draw numbers first\\\");\\n        allLotteries_[_lotteryId].winningNumbers = _split(rendomNumbers[_lotteryId]);\\n    }\\n\\n    // * @param   _prizeDistribution An array defining the distribution of the\\n    //  *          prize pool. I.e if a lotto has 5 numbers, the distribution could\\n    //  *          be [5, 10, 15, 20, 30] = 100%. This means if you get one number\\n    //  *          right you get 5% of the pool, 2 matching would be 10% and so on.\\n    //  * @param   _prizePoolInCake The amount of Cake available to win in this\\n    //  *          lottery.\\n\\n    /**\\n     * @param   _startingTimestamp The block timestamp for the beginning of the\\n     *          lottery.\\n     * @param   _closingTimestamp The block timestamp after which no more tickets\\n     *          will be sold for the lottery. Note that this timestamp MUST\\n     *          be after the starting block timestamp.\\n     */\\n    function createNewLotto(\\n        // uint8[] calldata _prizeDistribution,\\n        // uint256 _prizePoolInCake,\\n        // uint256 _costPerTicket,\\n        uint256 _startingTimestamp,\\n        uint256 _closingTimestamp\\n    ) external onlyOwner returns (uint256 lotteryId) {\\n        // require(\\n        //     _prizeDistribution.length == sizeOfLottery_,\\n        //     \\\"Invalid distribution\\\"\\n        // );\\n        // uint256 prizeDistributionTotal = 0;\\n        // for (uint256 j = 0; j < _prizeDistribution.length; j++) {\\n        //     prizeDistributionTotal = prizeDistributionTotal.add(\\n        //         uint256(_prizeDistribution[j])\\n        //     );\\n        // }\\n        // Ensuring that prize distribution total is 100%\\n        // require(\\n        //     prizeDistributionTotal == 100,\\n        //     \\\"Prize distribution is not 100%\\\"\\n        // );\\n        // require(\\n        //     _prizePoolInCake != 0 && _costPerTicket != 0,\\n        //     \\\"Prize or cost cannot be 0\\\"\\n        // );\\n        require(_startingTimestamp != 0 && _startingTimestamp < _closingTimestamp, \\\"Timestamps for lottery invalid\\\");\\n        // Incrementing lottery ID\\n        lotteryIdCounter_ = lotteryIdCounter_ + 1;\\n        lotteryId = lotteryIdCounter_;\\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\\n        Status lotteryStatus;\\n        if (_startingTimestamp >= block.timestamp) {\\n            lotteryStatus = Status.Open;\\n        } else {\\n            lotteryStatus = Status.NotStarted;\\n        }\\n        // Saving data in struct\\n        LottoInfo memory newLottery = LottoInfo(\\n            lotteryId,\\n            lotteryStatus,\\n            // _prizePoolInCake,\\n            // _costPerTicket,\\n            // _prizeDistribution,\\n            _startingTimestamp,\\n            _closingTimestamp,\\n            winningNumbers\\n        );\\n        allLotteries_[lotteryId] = newLottery;\\n        // TODO fix\\n        // Emitting important information around new lottery.\\n        // emit LotteryOpen(\\n        //     lotteryId,\\n        //     nft_.getTotalSupply()\\n        // );\\n    }\\n\\n    // function withdrawCake(uint256 _amount) external onlyOwner() {\\n    //     cake_.transfer(\\n    //         msg.sender,\\n    //         _amount\\n    //     );\\n    // }\\n\\n    //-------------------------------------------------------------------------\\n    // General Access Functions\\n\\n    // function batchBuyLottoTicket(\\n    //     uint256 _lotteryId,\\n    //     uint8 _numberOfTickets,\\n    //     uint16[] calldata _chosenNumbersForEachTicket\\n    // )\\n    //     external\\n    //     notContract()\\n    // {\\n    //     // Ensuring the lottery is within a valid time\\n    //     require(\\n    //         block.timestamp >= allLotteries_[_lotteryId].startingTimestamp,\\n    //         \\\"Invalid time for mint:start\\\"\\n    //     );\\n    //     require(\\n    //         block.timestamp < allLotteries_[_lotteryId].closingTimestamp,\\n    //         \\\"Invalid time for mint:end\\\"\\n    //     );\\n    //     if(allLotteries_[_lotteryId].lotteryStatus == Status.NotStarted) {\\n    //         if(allLotteries_[_lotteryId].startingTimestamp >= block.timestamp) {\\n    //             allLotteries_[_lotteryId].lotteryStatus = Status.Open;\\n    //         }\\n    //     }\\n    //     require(\\n    //         allLotteries_[_lotteryId].lotteryStatus == Status.Open,\\n    //         \\\"Lottery not in state for mint\\\"\\n    //     );\\n    //     require(\\n    //         _numberOfTickets <= 50,\\n    //         \\\"Batch mint too large\\\"\\n    //     );\\n    //     // Temporary storage for the check of the chosen numbers array\\n    //     uint256 numberCheck = _numberOfTickets.mul(sizeOfLottery_);\\n    //     // Ensuring that there are the right amount of chosen numbers\\n    //     require(\\n    //         _chosenNumbersForEachTicket.length == numberCheck,\\n    //         \\\"Invalid chosen numbers\\\"\\n    //     );\\n    //     // Getting the cost and discount for the token purchase\\n    //     (\\n    //         uint256 totalCost,\\n    //         uint256 discount,\\n    //         uint256 costWithDiscount\\n    //     ) = this.costToBuyTicketsWithDiscount(_lotteryId, _numberOfTickets);\\n    //     // Transfers the required cake to this contract\\n    //     cake_.transferFrom(\\n    //         msg.sender,\\n    //         address(this),\\n    //         costWithDiscount\\n    //     );\\n    //     // Batch mints the user their tickets\\n    //     uint256[] memory ticketIds = nft_.batchMint(\\n    //         msg.sender,\\n    //         _lotteryId,\\n    //         _numberOfTickets,\\n    //         _chosenNumbersForEachTicket,\\n    //         sizeOfLottery_\\n    //     );\\n    //     // Emitting event with all information\\n    //     emit NewBatchMint(\\n    //         msg.sender,\\n    //         ticketIds,\\n    //         _chosenNumbersForEachTicket,\\n    //         totalCost,\\n    //         discount,\\n    //         costWithDiscount\\n    //     );\\n    // }\\n\\n    // claim reward don't remove!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n    // function claimReward(uint256 _lotteryId, uint256 _tokenId) external notContract() {\\n    //     // Checking the lottery is in a valid time for claiming\\n    //     require(\\n    //         allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\\n    //         \\\"Wait till end to claim\\\"\\n    //     );\\n    //     // Checks the lottery winning numbers are available\\n    //     require(\\n    //         allLotteries_[_lotteryId].lotteryStatus == Status.Completed,\\n    //         \\\"Winning Numbers not chosen yet\\\"\\n    //     );\\n    //     require(\\n    //         nft_.getOwnerOfTicket(_tokenId) == msg.sender,\\n    //         \\\"Only the owner can claim\\\"\\n    //     );\\n    //     // Sets the claim of the ticket to true (if claimed, will revert)\\n    //     require(\\n    //         nft_.claimTicket(_tokenId, _lotteryId),\\n    //         \\\"Numbers for ticket invalid\\\"\\n    //     );\\n    //     // Getting the number of matching tickets\\n    //     uint8 matchingNumbers = _getNumberOfMatching(\\n    //         nft_.getTicketNumbers(_tokenId),\\n    //         allLotteries_[_lotteryId].winningNumbers\\n    //     );\\n    //     // Getting the prize amount for those matching tickets\\n    //     uint256 prizeAmount = _prizeForMatching(\\n    //         matchingNumbers,\\n    //         _lotteryId\\n    //     );\\n    //     // Removing the prize amount from the pool\\n    //     allLotteries_[_lotteryId].prizePoolInCake = allLotteries_[_lotteryId].prizePoolInCake.sub(prizeAmount);\\n    //     // Transfering the user their winnings\\n    //     cake_.safeTransfer(address(msg.sender), prizeAmount);\\n    // }\\n\\n    // function batchClaimRewards(\\n    //     uint256 _lotteryId,\\n    //     uint256[] calldata _tokeIds\\n    // )\\n    //     external\\n    //     notContract()\\n    // {\\n    //     require(\\n    //         _tokeIds.length <= 50,\\n    //         \\\"Batch claim too large\\\"\\n    //     );\\n    //     // Checking the lottery is in a valid time for claiming\\n    //     require(\\n    //         allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\\n    //         \\\"Wait till end to claim\\\"\\n    //     );\\n    //     // Checks the lottery winning numbers are available\\n    //     require(\\n    //         allLotteries_[_lotteryId].lotteryStatus == Status.Completed,\\n    //         \\\"Winning Numbers not chosen yet\\\"\\n    //     );\\n    //     // Creates a storage for all winnings\\n    //     uint256 totalPrize = 0;\\n    //     // Loops through each submitted token\\n    //     for (uint256 i = 0; i < _tokeIds.length; i++) {\\n    //         // Checks user is owner (will revert entire call if not)\\n    //         require(\\n    //             nft_.getOwnerOfTicket(_tokeIds[i]) == msg.sender,\\n    //             \\\"Only the owner can claim\\\"\\n    //         );\\n    //         // If token has already been claimed, skip token\\n    //         if(\\n    //             nft_.getTicketClaimStatus(_tokeIds[i])\\n    //         ) {\\n    //             continue;\\n    //         }\\n    //         // Claims the ticket (will only revert if numbers invalid)\\n    //         require(\\n    //             nft_.claimTicket(_tokeIds[i], _lotteryId),\\n    //             \\\"Numbers for ticket invalid\\\"\\n    //         );\\n    //         // Getting the number of matching tickets\\n    //         uint8 matchingNumbers = _getNumberOfMatching(\\n    //             nft_.getTicketNumbers(_tokeIds[i]),\\n    //             allLotteries_[_lotteryId].winningNumbers\\n    //         );\\n    //         // Getting the prize amount for those matching tickets\\n    //         uint256 prizeAmount = _prizeForMatching(\\n    //             matchingNumbers,\\n    //             _lotteryId\\n    //         );\\n    //         // Removing the prize amount from the pool\\n    //         allLotteries_[_lotteryId].prizePoolInCake = allLotteries_[_lotteryId].prizePoolInCake.sub(prizeAmount);\\n    //         totalPrize = totalPrize.add(prizeAmount);\\n    //     }\\n    //     // Transferring the user their winnings\\n    //     cake_.safeTransfer(address(msg.sender), totalPrize);\\n    // }\\n\\n    //-------------------------------------------------------------------------\\n    // INTERNAL FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    // function _discount(\\n    //     uint256 lotteryId,\\n    //     uint256 _numberOfTickets\\n    // )\\n    //     internal\\n    //     view\\n    //     returns(uint256 discountAmount)\\n    // {\\n    //     // Gets the raw cost for the tickets\\n    //     uint256 cost = this.costToBuyTickets(lotteryId, _numberOfTickets);\\n    //     // Checks if the amount of tickets falls into the first bucket\\n    //     if(_numberOfTickets < bucketOneMax_) {\\n    //         discountAmount = cost.mul(discountForBucketOne_).div(100);\\n    //     } else if(\\n    //         _numberOfTickets < bucketTwoMax_\\n    //     ) {\\n    //         // Checks if the amount of tickets falls into the seccond bucket\\n    //         discountAmount = cost.mul(discountForBucketTwo_).div(100);\\n    //     } else {\\n    //         // Checks if the amount of tickets falls into the last bucket\\n    //         discountAmount = cost.mul(discountForBucketThree_).div(100);\\n    //     }\\n    // }\\n\\n    function _getNumberOfMatching(uint16[] memory _usersNumbers, uint16[] memory _winningNumbers)\\n        internal\\n        pure\\n        returns (uint8 noOfMatching)\\n    {\\n        // Loops through all wimming numbers\\n        for (uint256 i = 0; i < _winningNumbers.length; i++) {\\n            // If the winning numbers and user numbers match\\n            if (_usersNumbers[i] == _winningNumbers[i]) {\\n                // The number of matching numbers incrases\\n                noOfMatching += 1;\\n            }\\n        }\\n    }\\n\\n    // /**\\n    //  * @param   _noOfMatching: The number of matching numbers the user has\\n    //  * @param   _lotteryId: The ID of the lottery the user is claiming on\\n    //  * @return  uint256: The prize amount in cake the user is entitled to\\n    //  */\\n    // function _prizeForMatching(\\n    //     uint8 _noOfMatching,\\n    //     uint256 _lotteryId\\n    // )\\n    //     internal\\n    //     view\\n    //     returns(uint256)\\n    // {\\n    //     uint256 prize = 0;\\n    //     // If user has no matching numbers their prize is 0\\n    //     if(_noOfMatching == 0) {\\n    //         return 0;\\n    //     }\\n    //     // Getting the percentage of the pool the user has won\\n    //     uint256 perOfPool = allLotteries_[_lotteryId].prizeDistribution[_noOfMatching-1];\\n    //     // Timesing the percentage one by the pool\\n    //     prize = allLotteries_[_lotteryId].prizePoolInCake.mul(perOfPool);\\n    //     // Returning the prize divided by 100 (as the prize distribution is scaled)\\n    //     return prize.div(100);\\n    // }\\n\\n    function _split(uint256 _randomNumber) internal view returns (uint16[] memory) {\\n        // Temparary storage for winning numbers\\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\\n        // Loops the size of the number of tickets in the lottery\\n        for (uint256 i = 0; i < sizeOfLottery_; i++) {\\n            // Encodes the random number with its position in loop\\n            bytes32 hashOfRandom = keccak256(abi.encodePacked(_randomNumber, i));\\n            // Casts random number hash into uint256\\n            uint256 numberRepresentation = uint256(hashOfRandom);\\n\\n            // Sets the winning number position to a uint16 of random hash number\\n            winningNumbers[i] = uint16(numberRepresentation.mod(maxValidRange_));\\n        }\\n        return winningNumbers;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a839cb997b5da4721b5a77ad2ea730b646079b5fbb67575907ea347996aae9\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomNumberGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IRandomNumberGenerator {\\n    /**\\n     * Requests randomness from a user-provided seed\\n     */\\n    function getRandomNumber(uint256 lotteryId) external returns (bytes32 requestId);\\n}\\n\",\"keccak256\":\"0x665dbbca64ac7762758f50953a32255efa24a6b8b4f63e68962b53959b40d8b1\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface ISweetpadTicket is IERC1155 {\\n    function totalTickets() external returns (uint256);\\n\\n    function accountTickets(address) external returns (uint256);\\n\\n    function mint(\\n        address to_,\\n        uint256 id_,\\n        uint256 amount_\\n    ) external;\\n\\n    function burn(address account, uint256 id) external;\\n\\n    function mintBatch(\\n        address to_,\\n        uint256[] memory ids_,\\n        uint256[] memory amounts_\\n    ) external;\\n\\n    function burnBatch(address account, uint256[] memory ids) external;\\n}\\n\",\"keccak256\":\"0x6f457f165c8eaae9712c4accee8ed5f5bb181b961a5cf148ccce0fd792d0130e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161125d38038061125d83398101604081905261002f91610117565b610038336100c7565b60ff82161580159061004d575061ffff811615155b61009d5760405162461bcd60e51b815260206004820152601960248201527f4c6f74746572792073657475702063616e6e6f74206265203000000000000000604482015260640160405180910390fd5b6004805461ffff92909216620100000263ffffffff1990921660ff9093169290921717905561015e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561012a57600080fd5b825160ff8116811461013b57600080fd5b602084015190925061ffff8116811461015357600080fd5b809150509250929050565b6110f08061016d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063d062b57c1161008c578063de1dfae511610066578063de1dfae5146101cd578063e59bbab5146101ee578063e97fc16214610200578063f2fde38b1461021357600080fd5b8063d062b57c14610187578063da4767551461019a578063dbe069a2146101ba57600080fd5b8063715018a6116100c8578063715018a61461013d5780637c3fac26146101455780638da5cb5b14610158578063a624aa1b1461017357600080fd5b8063075dc415146100ef5780630c97fd451461011557806336e4276a1461012a575b600080fd5b6004546100fd9061ffff1681565b60405161ffff90911681526020015b60405180910390f35b610128610123366004610ed3565b610226565b005b610128610138366004610ed3565b61041f565b6101286104ce565b610128610153366004610e6d565b610504565b6000546040516001600160a01b03909116815260200161010c565b6004546100fd9062010000900461ffff1681565b610128610195366004610eaf565b6105a6565b6101ad6101a8366004610ed3565b6106d5565b60405161010c9190610f6f565b6101286101c8366004610eaf565b6107f5565b6101e06101db366004610f18565b610916565b60405190815260200161010c565b60045462010000900461ffff166100fd565b61012861020e366004610eec565b610ad0565b610128610221366004610e6d565b610bc9565b6000546001600160a01b031633146102595760405162461bcd60e51b815260040161025090610f3a565b60405180910390fd5b6000818152600560205260409020600301544210156102cc5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74207365742077696e6e696e67206e756d6265727320647572696e60448201526867206c6f747465727960b81b6064820152608401610250565b600160008281526005602052604090206001015460ff1660038111156102f4576102f4611078565b146103415760405162461bcd60e51b815260206004820181905260248201527f4c6f747465727920537461746520696e636f727265637420666f7220647261776044820152606401610250565b600081815260056020526040908190206001908101805460ff19166002179055549051632cdc85e960e21b8152600481018390526001600160a01b039091169063b37217a490602401602060405180830381600087803b1580156103a457600080fd5b505af11580156103b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dc9190610e96565b60028190556040805183815260208101929092527ff8cdf8355a0f31bbad8998a631f5a75dcb3e475a010b34a111ed105fe88e751a91015b60405180910390a150565b600360008281526005602052604090206001015460ff16600381111561044757610447611078565b146104895760405162461bcd60e51b8152602060048201526012602482015271111c985dc81b9d5b58995c9cc8199a5c9cdd60721b6044820152606401610250565b6000818152600660205260409020546104a190610c64565b6005600083815260200190815260200160002060040190805190602001906104ca929190610daf565b5050565b6000546001600160a01b031633146104f85760405162461bcd60e51b815260040161025090610f3a565b6105026000610d4c565b565b6000546001600160a01b0316331461052e5760405162461bcd60e51b815260040161025090610f3a565b6001600160a01b0381166105845760405162461bcd60e51b815260206004820152601d60248201527f436f6e7472616374732063616e6e6f74206265203020616464726573730000006044820152606401610250565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105d05760405162461bcd60e51b815260040161025090610f3a565b60045461ffff8281166201000090920416141561062f5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073657420746f2063757272656e742073697a650000000000006044820152606401610250565b60045462010000900461ffff166106805760405162461bcd60e51b815260206004820152601560248201527404d61782072616e67652063616e6e6f74206265203605c1b6044820152606401610250565b6004805463ffff000019166201000061ffff8416908102919091179091556040805133815260208101929092527f2a54f3414068117c88afc33d8e1dea5f6330df95e10ef41731baea27ab8a946e9101610414565b6107086040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b600082815260056020908152604091829020825160a08101909352805483526001810154909183019060ff16600381111561074557610745611078565b600381111561075657610756611078565b81526020016002820154815260200160038201548152602001600482018054806020026020016040519081016040528092919081815260200182805480156107e557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116107ac5790505b5050505050815250509050919050565b6000546001600160a01b0316331461081f5760405162461bcd60e51b815260040161025090610f3a565b60045461ffff828116911614156108785760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073657420746f2063757272656e742073697a650000000000006044820152606401610250565b60045461ffff166108cb5760405162461bcd60e51b815260206004820152601860248201527f4c6f74746572792073697a652063616e6e6f74206265203000000000000000006044820152606401610250565b6004805461ffff191661ffff83169081179091556040805133815260208101929092527f5c8df1f3422b7c16c64d7d3152fec41b6ea262c267376ae456770cd6763c34f69101610414565b600080546001600160a01b031633146109415760405162461bcd60e51b815260040161025090610f3a565b821580159061094f57508183105b61099b5760405162461bcd60e51b815260206004820152601e60248201527f54696d657374616d707320666f72206c6f747465727920696e76616c696400006044820152606401610250565b6003546109a990600161100d565b600381905560045490915060009061ffff1667ffffffffffffffff8111156109d3576109d36110a4565b6040519080825280602002602001820160405280156109fc578160200160208202803683370190505b5090506000428510610a1057506001610a14565b5060005b60006040518060a00160405280858152602001836003811115610a3957610a39611078565b8152602080820189905260408083018990526060909201869052600087815260058252919091208251815590820151600180830180549495508594909160ff1990911690836003811115610a8f57610a8f611078565b0217905550604082015160028201556060820151600382015560808201518051610ac3916004840191602090910190610daf565b5090505050505092915050565b6001546001600160a01b03163314610b225760405162461bcd60e51b815260206004820152601560248201527427b7363c903930b73237b69033b2b732b930ba37b960591b6044820152606401610250565b600260008481526005602052604090206001015460ff166003811115610b4a57610b4a611078565b14610b8c5760405162461bcd60e51b8152602060048201526012602482015271111c985dc81b9d5b58995c9cc8199a5c9cdd60721b6044820152606401610250565b816002541415610bb3576000838152600560205260409020600101805460ff191660031790555b6000928352600660205260409092209190915550565b6000546001600160a01b03163314610bf35760405162461bcd60e51b815260040161025090610f3a565b6001600160a01b038116610c585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610250565b610c6181610d4c565b50565b60045460609060009061ffff1667ffffffffffffffff811115610c8957610c896110a4565b604051908082528060200260200182016040528015610cb2578160200160208202803683370190505b50905060005b60045461ffff16811015610d4557604080516020808201879052818301849052825180830384018152606090920190925280519101206004548190610d0890829062010000900461ffff16610d9c565b848481518110610d1a57610d1a61108e565b602002602001019061ffff16908161ffff168152505050508080610d3d90611025565b915050610cb8565b5092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610da88284611040565b9392505050565b82805482825590600052602060002090600f01601090048101928215610e485791602002820160005b83821115610e1857835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302610dd8565b8015610e465782816101000a81549061ffff0219169055600201602081600101049283019260010302610e18565b505b50610e54929150610e58565b5090565b5b80821115610e545760008155600101610e59565b600060208284031215610e7f57600080fd5b81356001600160a01b0381168114610da857600080fd5b600060208284031215610ea857600080fd5b5051919050565b600060208284031215610ec157600080fd5b813561ffff81168114610da857600080fd5b600060208284031215610ee557600080fd5b5035919050565b600080600060608486031215610f0157600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610f2b57600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602080835260c083018451828501528185015160048110610fa257634e487b7160e01b600052602160045260246000fd5b806040860152506040850151606085015260608501516080850152608085015160a08086015281815180845260e0870191508483019350600092505b8083101561100257835161ffff168252928401926001929092019190840190610fde565b509695505050505050565b6000821982111561102057611020611062565b500190565b600060001982141561103957611039611062565b5060010190565b60008261105d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212209bc6c9a183d0cfea503bad2cadbfee968f27e7ddd45edefb43f170990ffcf70764736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063d062b57c1161008c578063de1dfae511610066578063de1dfae5146101cd578063e59bbab5146101ee578063e97fc16214610200578063f2fde38b1461021357600080fd5b8063d062b57c14610187578063da4767551461019a578063dbe069a2146101ba57600080fd5b8063715018a6116100c8578063715018a61461013d5780637c3fac26146101455780638da5cb5b14610158578063a624aa1b1461017357600080fd5b8063075dc415146100ef5780630c97fd451461011557806336e4276a1461012a575b600080fd5b6004546100fd9061ffff1681565b60405161ffff90911681526020015b60405180910390f35b610128610123366004610ed3565b610226565b005b610128610138366004610ed3565b61041f565b6101286104ce565b610128610153366004610e6d565b610504565b6000546040516001600160a01b03909116815260200161010c565b6004546100fd9062010000900461ffff1681565b610128610195366004610eaf565b6105a6565b6101ad6101a8366004610ed3565b6106d5565b60405161010c9190610f6f565b6101286101c8366004610eaf565b6107f5565b6101e06101db366004610f18565b610916565b60405190815260200161010c565b60045462010000900461ffff166100fd565b61012861020e366004610eec565b610ad0565b610128610221366004610e6d565b610bc9565b6000546001600160a01b031633146102595760405162461bcd60e51b815260040161025090610f3a565b60405180910390fd5b6000818152600560205260409020600301544210156102cc5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74207365742077696e6e696e67206e756d6265727320647572696e60448201526867206c6f747465727960b81b6064820152608401610250565b600160008281526005602052604090206001015460ff1660038111156102f4576102f4611078565b146103415760405162461bcd60e51b815260206004820181905260248201527f4c6f747465727920537461746520696e636f727265637420666f7220647261776044820152606401610250565b600081815260056020526040908190206001908101805460ff19166002179055549051632cdc85e960e21b8152600481018390526001600160a01b039091169063b37217a490602401602060405180830381600087803b1580156103a457600080fd5b505af11580156103b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dc9190610e96565b60028190556040805183815260208101929092527ff8cdf8355a0f31bbad8998a631f5a75dcb3e475a010b34a111ed105fe88e751a91015b60405180910390a150565b600360008281526005602052604090206001015460ff16600381111561044757610447611078565b146104895760405162461bcd60e51b8152602060048201526012602482015271111c985dc81b9d5b58995c9cc8199a5c9cdd60721b6044820152606401610250565b6000818152600660205260409020546104a190610c64565b6005600083815260200190815260200160002060040190805190602001906104ca929190610daf565b5050565b6000546001600160a01b031633146104f85760405162461bcd60e51b815260040161025090610f3a565b6105026000610d4c565b565b6000546001600160a01b0316331461052e5760405162461bcd60e51b815260040161025090610f3a565b6001600160a01b0381166105845760405162461bcd60e51b815260206004820152601d60248201527f436f6e7472616374732063616e6e6f74206265203020616464726573730000006044820152606401610250565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105d05760405162461bcd60e51b815260040161025090610f3a565b60045461ffff8281166201000090920416141561062f5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073657420746f2063757272656e742073697a650000000000006044820152606401610250565b60045462010000900461ffff166106805760405162461bcd60e51b815260206004820152601560248201527404d61782072616e67652063616e6e6f74206265203605c1b6044820152606401610250565b6004805463ffff000019166201000061ffff8416908102919091179091556040805133815260208101929092527f2a54f3414068117c88afc33d8e1dea5f6330df95e10ef41731baea27ab8a946e9101610414565b6107086040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b600082815260056020908152604091829020825160a08101909352805483526001810154909183019060ff16600381111561074557610745611078565b600381111561075657610756611078565b81526020016002820154815260200160038201548152602001600482018054806020026020016040519081016040528092919081815260200182805480156107e557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116107ac5790505b5050505050815250509050919050565b6000546001600160a01b0316331461081f5760405162461bcd60e51b815260040161025090610f3a565b60045461ffff828116911614156108785760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073657420746f2063757272656e742073697a650000000000006044820152606401610250565b60045461ffff166108cb5760405162461bcd60e51b815260206004820152601860248201527f4c6f74746572792073697a652063616e6e6f74206265203000000000000000006044820152606401610250565b6004805461ffff191661ffff83169081179091556040805133815260208101929092527f5c8df1f3422b7c16c64d7d3152fec41b6ea262c267376ae456770cd6763c34f69101610414565b600080546001600160a01b031633146109415760405162461bcd60e51b815260040161025090610f3a565b821580159061094f57508183105b61099b5760405162461bcd60e51b815260206004820152601e60248201527f54696d657374616d707320666f72206c6f747465727920696e76616c696400006044820152606401610250565b6003546109a990600161100d565b600381905560045490915060009061ffff1667ffffffffffffffff8111156109d3576109d36110a4565b6040519080825280602002602001820160405280156109fc578160200160208202803683370190505b5090506000428510610a1057506001610a14565b5060005b60006040518060a00160405280858152602001836003811115610a3957610a39611078565b8152602080820189905260408083018990526060909201869052600087815260058252919091208251815590820151600180830180549495508594909160ff1990911690836003811115610a8f57610a8f611078565b0217905550604082015160028201556060820151600382015560808201518051610ac3916004840191602090910190610daf565b5090505050505092915050565b6001546001600160a01b03163314610b225760405162461bcd60e51b815260206004820152601560248201527427b7363c903930b73237b69033b2b732b930ba37b960591b6044820152606401610250565b600260008481526005602052604090206001015460ff166003811115610b4a57610b4a611078565b14610b8c5760405162461bcd60e51b8152602060048201526012602482015271111c985dc81b9d5b58995c9cc8199a5c9cdd60721b6044820152606401610250565b816002541415610bb3576000838152600560205260409020600101805460ff191660031790555b6000928352600660205260409092209190915550565b6000546001600160a01b03163314610bf35760405162461bcd60e51b815260040161025090610f3a565b6001600160a01b038116610c585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610250565b610c6181610d4c565b50565b60045460609060009061ffff1667ffffffffffffffff811115610c8957610c896110a4565b604051908082528060200260200182016040528015610cb2578160200160208202803683370190505b50905060005b60045461ffff16811015610d4557604080516020808201879052818301849052825180830384018152606090920190925280519101206004548190610d0890829062010000900461ffff16610d9c565b848481518110610d1a57610d1a61108e565b602002602001019061ffff16908161ffff168152505050508080610d3d90611025565b915050610cb8565b5092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610da88284611040565b9392505050565b82805482825590600052602060002090600f01601090048101928215610e485791602002820160005b83821115610e1857835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302610dd8565b8015610e465782816101000a81549061ffff0219169055600201602081600101049283019260010302610e18565b505b50610e54929150610e58565b5090565b5b80821115610e545760008155600101610e59565b600060208284031215610e7f57600080fd5b81356001600160a01b0381168114610da857600080fd5b600060208284031215610ea857600080fd5b5051919050565b600060208284031215610ec157600080fd5b813561ffff81168114610da857600080fd5b600060208284031215610ee557600080fd5b5035919050565b600080600060608486031215610f0157600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610f2b57600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602080835260c083018451828501528185015160048110610fa257634e487b7160e01b600052602160045260246000fd5b806040860152506040850151606085015260608501516080850152608085015160a08086015281815180845260e0870191508483019350600092505b8083101561100257835161ffff168252928401926001929092019190840190610fde565b509695505050505050565b6000821982111561102057611020611062565b500190565b600060001982141561103957611039611062565b5060010190565b60008261105d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212209bc6c9a183d0cfea503bad2cadbfee968f27e7ddd45edefb43f170990ffcf70764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createNewLotto(uint256,uint256)": {
        "params": {
          "_closingTimestamp": "The block timestamp after which no more tickets          will be sold for the lottery. Note that this timestamp MUST          be after the starting block timestamp.",
          "_startingTimestamp": "The block timestamp for the beginning of the          lottery."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5832,
        "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
        "label": "randomGenerator_",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRandomNumberGenerator)7817"
      },
      {
        "astId": 5834,
        "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
        "label": "requestId_",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 5836,
        "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
        "label": "lotteryIdCounter_",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5838,
        "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
        "label": "sizeOfLottery_",
        "offset": 0,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 5840,
        "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
        "label": "maxValidRange_",
        "offset": 2,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 5863,
        "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
        "label": "allLotteries_",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(LottoInfo)5858_storage)"
      },
      {
        "astId": 5867,
        "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
        "label": "rendomNumbers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRandomNumberGenerator)7817": {
        "encoding": "inplace",
        "label": "contract IRandomNumberGenerator",
        "numberOfBytes": "20"
      },
      "t_enum(Status)5845": {
        "encoding": "inplace",
        "label": "enum SweetpadLottery.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(LottoInfo)5858_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SweetpadLottery.LottoInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LottoInfo)5858_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LottoInfo)5858_storage": {
        "encoding": "inplace",
        "label": "struct SweetpadLottery.LottoInfo",
        "members": [
          {
            "astId": 5847,
            "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
            "label": "lotteryID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5850,
            "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
            "label": "lotteryStatus",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Status)5845"
          },
          {
            "astId": 5852,
            "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
            "label": "startingTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5854,
            "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
            "label": "closingTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5857,
            "contract": "contracts/SweetpadLottery.sol:SweetpadLottery",
            "label": "winningNumbers",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint16)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}