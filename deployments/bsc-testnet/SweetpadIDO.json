{
  "address": "0x6DF14cC3626A7069425609A33125e5CA51b6c833",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISweetpadTicket",
          "name": "sweetpadTicket_",
          "type": "address"
        },
        {
          "internalType": "contract ISweetpadFreezing",
          "name": "sweetpadFreezing_",
          "type": "address"
        },
        {
          "internalType": "contract ISweetpadNFTFreezing",
          "name": "sweetpadNFTFreezing_",
          "type": "address"
        },
        {
          "internalType": "contract SweetpadLottery",
          "name": "sweetpadLottery_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "asset_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "client_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLIENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocationPerTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTokensToSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "buyFirstStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "buyFromWonTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "buySecondStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getAllocationFromLottery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getNumberOfWinningTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numberOfWinningTickets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinningTicketsNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idoSaleEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idoSaleStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idoSecondSaleEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idoSecondSaleStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentForGuaranteedAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentForLottery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryPercent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "guarantedPercent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPower_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commission_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensToSell_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocationPerTicket_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "idoSaleStart_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "idoSaleEnd_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "idoSecondSaleStart_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "idoSecondSaleEnd_",
          "type": "uint256"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweetpadFreezing",
      "outputs": [
        {
          "internalType": "contract ISweetpadFreezing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweetpadLottery",
      "outputs": [
        {
          "internalType": "contract SweetpadLottery",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweetpadNFTFreezing",
      "outputs": [
        {
          "internalType": "contract ISweetpadNFTFreezing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweetpadTicket",
      "outputs": [
        {
          "internalType": "contract ISweetpadTicket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensBoughtFirstStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensBoughtSecondStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensToSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unlockedToSecondStage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd371cbb52a1c11361138e37ad0fcbd956271b31f5c4877f1a3598b15669e08f",
  "receipt": {
    "to": null,
    "from": "0xb2444FE0E53378E094736834067c1E2653ec3CAB",
    "contractAddress": "0x6DF14cC3626A7069425609A33125e5CA51b6c833",
    "transactionIndex": 6,
    "gasUsed": "2081164",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000000008000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000800002000000000000000000000080400000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000010000100000000082020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8974cd9d6094a7432782490ae9b9f559498d417aad7f66ad33f0056a325fdc7d",
    "transactionHash": "0xcd371cbb52a1c11361138e37ad0fcbd956271b31f5c4877f1a3598b15669e08f",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 22802441,
        "transactionHash": "0xcd371cbb52a1c11361138e37ad0fcbd956271b31f5c4877f1a3598b15669e08f",
        "address": "0x6DF14cC3626A7069425609A33125e5CA51b6c833",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b2444fe0e53378e094736834067c1e2653ec3cab",
          "0x000000000000000000000000b2444fe0e53378e094736834067c1e2653ec3cab"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x8974cd9d6094a7432782490ae9b9f559498d417aad7f66ad33f0056a325fdc7d"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 22802441,
        "transactionHash": "0xcd371cbb52a1c11361138e37ad0fcbd956271b31f5c4877f1a3598b15669e08f",
        "address": "0x6DF14cC3626A7069425609A33125e5CA51b6c833",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c025232",
          "0x000000000000000000000000b2444fe0e53378e094736834067c1e2653ec3cab",
          "0x000000000000000000000000b2444fe0e53378e094736834067c1e2653ec3cab"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x8974cd9d6094a7432782490ae9b9f559498d417aad7f66ad33f0056a325fdc7d"
      }
    ],
    "blockNumber": 22802441,
    "cumulativeGasUsed": "2734106",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe394eEA0F626c7Bf2BDf3a3f25300083913748E0",
    "0x5196615624ea4A19E275Be4186fccdf330FC0A8D",
    "0x5c0c823260A08531c0fc5EE3bbbc016498959C01",
    "0x1d01f32AdEE0b1d260160272a853b8B3E307E717",
    "0xd7c3228aff21C6Ed1Ffb2D64468092d8249fC508",
    "0xb2444FE0E53378E094736834067c1E2653ec3CAB",
    "0xb2444FE0E53378E094736834067c1E2653ec3CAB"
  ],
  "numDeployments": 6,
  "solcInputHash": "484c5bcf6d65ed59e705ce15efc26ca3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISweetpadTicket\",\"name\":\"sweetpadTicket_\",\"type\":\"address\"},{\"internalType\":\"contract ISweetpadFreezing\",\"name\":\"sweetpadFreezing_\",\"type\":\"address\"},{\"internalType\":\"contract ISweetpadNFTFreezing\",\"name\":\"sweetpadNFTFreezing_\",\"type\":\"address\"},{\"internalType\":\"contract SweetpadLottery\",\"name\":\"sweetpadLottery_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"client_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLIENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationPerTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokensToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"buyFirstStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"buyFromWonTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"buySecondStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getAllocationFromLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getNumberOfWinningTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfWinningTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinningTicketsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoSaleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoSaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoSecondSaleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoSecondSaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForGuaranteedAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guarantedPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPower_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocationPerTicket_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idoSaleStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idoSaleEnd_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idoSecondSaleStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idoSecondSaleEnd_\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweetpadFreezing\",\"outputs\":[{\"internalType\":\"contract ISweetpadFreezing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweetpadLottery\",\"outputs\":[{\"internalType\":\"contract SweetpadLottery\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweetpadNFTFreezing\",\"outputs\":[{\"internalType\":\"contract ISweetpadNFTFreezing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweetpadTicket\",\"outputs\":[{\"internalType\":\"contract ISweetpadTicket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBoughtFirstStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBoughtSecondStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockedToSecondStage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SweetpadIDO.sol\":\"SweetpadIDO\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IApeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xad1c658327282f1f6af49b2574b2129115ada2b39b11668bfb23e0101e9ddab3\"},\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IApeRouter01.sol';\\n\\ninterface IApeRouter02 is IApeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7ddd238790bfcb7411a66327801568da451239142391806bfdf6d0f663b80cbc\"},\"contracts/SweetpadIDO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./interfaces/ISweetpadTicket.sol\\\";\\nimport \\\"./interfaces/ISweetpadFreezing.sol\\\";\\nimport \\\"./interfaces/ISweetpadNFTFreezing.sol\\\";\\n// TODO write Interfaces\\nimport \\\"./SweetpadLottery.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract SweetpadIDO is AccessControl {\\n    using SafeERC20 for IERC20;\\n    ISweetpadTicket public sweetpadTicket;\\n    ISweetpadFreezing public sweetpadFreezing;\\n    ISweetpadNFTFreezing public sweetpadNFTFreezing;\\n    SweetpadLottery public sweetpadLottery;\\n    uint256 public percentForLottery;\\n    uint256 public percentForGuaranteedAllocation;\\n    uint256 public totalPower;\\n    uint256 public commission;\\n    uint256 public tokensToSell;\\n    uint256 public availableTokensToSell;\\n    uint256 public tokenPrice;\\n    // amount of BUSD per ticket that user can buy tokens\\n    uint256 public allocationPerTicket;\\n    uint256 public idoSaleStart;\\n    uint256 public idoSecondSaleStart;\\n    uint256 public idoSaleEnd;\\n    uint256 public idoSecondSaleEnd;\\n    // TODO set correct address\\n    IERC20 public BUSD = IERC20(0x6147Bc9c226748B47BFeA290f58CD0E5dC2E5D72);\\n    IERC20 public asset;\\n    // TODO add comment how to get value for role\\n    bytes32 public constant CLIENT_ROLE = 0xa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c025232;\\n    mapping(address => bool) public unlockedToSecondStage;\\n    mapping(address => uint256) public tokensBoughtFirstStage;\\n    mapping(address => uint256) public tokensBoughtSecondStage;\\n    uint256 private powerForSecondStage;\\n\\n    constructor(\\n        ISweetpadTicket sweetpadTicket_,\\n        ISweetpadFreezing sweetpadFreezing_,\\n        ISweetpadNFTFreezing sweetpadNFTFreezing_,\\n        SweetpadLottery sweetpadLottery_,\\n        IERC20 asset_,\\n        address client_,\\n        address admin_\\n    ) {\\n        sweetpadTicket = sweetpadTicket_;\\n        sweetpadFreezing = sweetpadFreezing_;\\n        sweetpadNFTFreezing = sweetpadNFTFreezing_;\\n        sweetpadLottery = sweetpadLottery_;\\n        asset = asset_;\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(CLIENT_ROLE, client_);\\n    }\\n\\n    function setup(\\n        uint256 lotteryPercent_,\\n        uint256 guarantedPercent_,\\n        uint256 totalPower_,\\n        uint256 commission_,\\n        uint256 tokensToSell_,\\n        uint256 tokenPrice_,\\n        uint256 allocationPerTicket_,\\n        // block numbers to control ido sale start and end\\n        uint256 idoSaleStart_,\\n        uint256 idoSaleEnd_,\\n        uint256 idoSecondSaleStart_,\\n        uint256 idoSecondSaleEnd_\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            lotteryPercent_ > 100 && lotteryPercent_ <= 1500,\\n            \\\"SweetpadIDO: Trying to set incorrect percent for lottery allocation\\\"\\n        );\\n        require(\\n            guarantedPercent_ >= 8500 && guarantedPercent_ <= 9900,\\n            \\\"SweetpadIDO: Trying to set incorrect percent for guaranted allocation\\\"\\n        );\\n        require(guarantedPercent_ + lotteryPercent_ == 10000, \\\"SweetpadIDO: Incorrect percents\\\");\\n        require(totalPower_ > 0, \\\"SweetpadIDO: TotalPower can't be zero\\\");\\n        require(tokensToSell_ > 0, \\\"SweetpadIDO: TokensToSell can't be zero\\\");\\n        require(tokenPrice_ > 0, \\\"SweetpadIDO: TokenPrice can't be zero\\\");\\n        require(allocationPerTicket_ > 0, \\\"SweetpadIDO: Allocation per ticket can't be zero\\\");\\n        require(idoSaleStart_ >= block.number, \\\"SweetpadIDO: Invalid block number\\\");\\n        require(idoSaleEnd_ > idoSaleStart_, \\\"SweetpadIDO: IDO sale end block must be greater then start block\\\");\\n        require(\\n            idoSecondSaleStart_ > idoSaleEnd_, \\n            \\\"SweetpadIDO: IDO second sale start block must be greater then first end block\\\"\\n        );\\n        require(\\n            idoSecondSaleStart_ <= idoSecondSaleEnd_,\\n            \\\"SweetpadIDO: IDO second sale end block must be greater then start block\\\"\\n        );\\n        percentForLottery = lotteryPercent_;\\n        percentForGuaranteedAllocation = guarantedPercent_;\\n        totalPower = totalPower_;\\n        commission = commission_;\\n        tokensToSell = tokensToSell_;\\n        availableTokensToSell = tokensToSell_;\\n        tokenPrice = tokenPrice_;\\n        allocationPerTicket = allocationPerTicket_;\\n\\n        idoSaleStart = idoSaleStart_;\\n        idoSaleEnd = idoSaleEnd_;\\n        idoSecondSaleStart = idoSecondSaleStart_;\\n        idoSecondSaleEnd = idoSecondSaleEnd_;\\n    }\\n\\n    function buyFirstStage(uint256 amount_) external {\\n        require(idoSaleStart <= block.number && idoSaleEnd > block.number, \\\"SweetpadIDO: Wrong period to buy\\\");\\n        require(amount_ > 0, \\\"SweetpadIDO: Amount must be greater then zero\\\");\\n        uint256 userPower = sweetpadFreezing.totalPower(msg.sender);\\n        require(userPower > 0, \\\"SweetpadIDO: User's power can't be zero\\\");\\n        // TODO write view function and use it\\n        // TODO write view function to get availableTokenPrice and availabletokens count\\n        uint256 availableTokens = (tokensToSell * 1e18 * percentForGuaranteedAllocation * userPower) /\\n            10000 /\\n            totalPower;\\n        uint256 availableTokensPrice = (availableTokens * tokenPrice) /\\n            10000 /\\n            totalPower -\\n            tokensBoughtFirstStage[msg.sender];\\n        require(availableTokensPrice >= amount_, \\\"SweetpadIDO: Trying to buy more then available\\\");\\n        // User pays for tokens\\n        BUSD.safeTransferFrom(msg.sender, address(this), amount_);\\n        tokensBoughtFirstStage[msg.sender] += (amount_ * 1e18) / tokenPrice;\\n        // User get assets\\n        asset.safeTransfer(msg.sender, (amount_ * 1e18) / tokenPrice);\\n        availableTokensToSell -= (amount_ * 1e18) / tokenPrice;\\n\\n        if (availableTokens - tokensBoughtFirstStage[msg.sender] == 0) {\\n            unlockedToSecondStage[msg.sender] = true;\\n            powerForSecondStage += userPower;\\n        }\\n    }\\n\\n    function buySecondStage(uint256 amount_) external {\\n        require(\\n            idoSecondSaleStart <= block.number && idoSecondSaleEnd > block.number,\\n            \\\"SweetpadIDO: Wrong period to buy\\\"\\n        );\\n        require(amount_ > 0, \\\"SweetpadIDO: Amount must be greater then zero\\\");\\n        uint256 userPower = sweetpadFreezing.totalPower(msg.sender);\\n        require(userPower > 0, \\\"SweetpadIDO: User's power can't be zero\\\");\\n        require(unlockedToSecondStage[msg.sender], \\\"SweetpadIDO: User can't buy tokens from second stage\\\");\\n        uint256 availableTokensSecondStage = (availableTokensToSell * userPower) /\\n            powerForSecondStage -\\n            tokensBoughtSecondStage[msg.sender];\\n        require(\\n            availableTokensSecondStage >= tokensBoughtSecondStage[msg.sender],\\n            \\\"SweetpadIDO: User already bought max amount of tokens\\\"\\n        );\\n        uint256 availableTokensPriceSecondStage = availableTokensSecondStage * tokenPrice;\\n        require(availableTokensPriceSecondStage >= amount_, \\\"SweetpadIDO: Trying to buy more then available\\\");\\n        // User pays for tokens\\n        BUSD.safeTransferFrom(msg.sender, address(this), amount_);\\n        // User get assets\\n        asset.safeTransfer(msg.sender, (amount_ * 1e18) / tokenPrice);\\n        tokensBoughtSecondStage[msg.sender] += (amount_ * 1e18) / tokenPrice;\\n        availableTokensToSell -= (amount_ * 1e18) / tokenPrice;\\n    }\\n\\n    function buyFromWonTickets(uint256 amount_) external {\\n        // uint256 numberOfTickets = getNumberOfWinningTickets(msg.sender);\\n        uint256 allocation = getAllocationFromLottery(msg.sender);\\n        require(allocation >= amount_, \\\"SweetpadIDO: Insufficient allocation\\\");\\n        // User pays for tokens\\n        BUSD.safeTransferFrom(msg.sender, address(this), amount_);\\n        // User get assets\\n        asset.safeTransfer(msg.sender, (amount_ * 1e18) / tokenPrice);\\n    }\\n\\n    function getWinningTicketsNumber() external view returns (uint256) {\\n        return getNumberOfWinningTickets(msg.sender);\\n    }\\n\\n    function getNumberOfWinningTickets(address user_) public view returns (uint256 numberOfWinningTickets) {\\n        uint16[] memory winningNumbers = (sweetpadLottery.getBasicLottoInfo(sweetpadLottery.idoToId(address(this))))\\n            .winningNumbers;\\n        uint256[] memory tickets = sweetpadNFTFreezing.getTicketsForIdo(user_, address(this));\\n        for (uint256 i; i < winningNumbers.length; i++) {\\n            for (uint256 j; j < tickets.length; j++) {\\n                if (tickets[j] == 0) {\\n                    continue;\\n                }\\n                if (winningNumbers[i] == tickets[j]) {\\n                    if (j != tickets.length - 1) {\\n                        tickets[j] = tickets[tickets.length - 1];\\n                    }\\n                    tickets[tickets.length - 1] = 0;\\n                    numberOfWinningTickets += 1;\\n                }\\n            }\\n        }\\n        return numberOfWinningTickets;\\n    }\\n\\n    function getAllocationFromLottery(address user_) public view returns (uint256 allocation) {\\n        uint256 numberOfTickets = getNumberOfWinningTickets(user_);\\n        allocation = numberOfTickets * allocationPerTicket;\\n        return allocation;\\n    }\\n}\\n\",\"keccak256\":\"0x30cb32ba21ab9f9ca2156d44dd049560724f9792e4d9fef2a2f0e3fd70633b21\",\"license\":\"MIT\"},\"contracts/SweetpadLottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n// Imported OZ helper contracts\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n// import \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n// Inherited allowing for ownership of contract\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// Allows for intergration with ChainLink VRF\\nimport \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\n// Interface for Lottery NFT to mint tokens\\nimport \\\"./interfaces/ISweetpadTicket.sol\\\";\\n\\n\\n// Allows for time manipulation. Set to 0x address on test/mainnet deploy\\n// import \\\"./Testable.sol\\\";\\n\\ncontract SweetpadLottery is Ownable {\\n    // Libraries\\n    using SafeMath for uint256;\\n    // Safe ERC20\\n    using SafeERC20 for IERC20;\\n    // Address functionality\\n    using Address for address;\\n\\n    // State variables\\n    // Instance of Cake token (collateral currency for lotto)\\n    // IERC20 internal cake_;\\n    // Storing of the NFT\\n    // TODO check\\n    // ISweetpadTicket internal nft_;\\n    // Storing of the randomness generator\\n    IRandomNumberGenerator internal randomGenerator_;\\n    // Request ID for random number\\n    bytes32 internal requestId_;\\n    // Counter for lottery IDs\\n    uint256 private lotteryIdCounter_;\\n\\n    // Lottery size\\n    uint16 public sizeOfLottery_;\\n    // Max range for numbers (starting at 0)\\n    uint16 public maxValidRange_;\\n\\n    // Represents the status of the lottery\\n    enum Status {\\n        NotStarted, // The lottery has not started yet\\n        Open, // The lottery is open for ticket purchases\\n        Closed, // The lottery is no longer open for ticket purchases\\n        Completed // The lottery has been closed and the numbers drawn\\n    }\\n    // All the needed info around a lottery\\n    struct LottoInfo {\\n        uint256 lotteryID; // ID for lotto\\n        Status lotteryStatus; // Status for lotto\\n        address ido;\\n        // uint256 prizePoolInCake;    // The amount of cake for prize money\\n        // uint256 costPerTicket;      // Cost per ticket in $cake\\n        // uint8[] prizeDistribution;  // The distribution for prize money\\n        uint256 startingTimestamp; // Block timestamp for star of lotto\\n        uint256 closingTimestamp; // Block timestamp for end of entries\\n        uint16[] winningNumbers; // The winning numbers\\n    }\\n    // Lottery ID's to info\\n    mapping(uint256 => LottoInfo) internal allLotteries_;\\n    mapping(uint256 => uint256) public rendomNumbers;\\n    mapping(address => uint256) public idoToId;\\n\\n    //-------------------------------------------------------------------------\\n    // EVENTS\\n    //-------------------------------------------------------------------------\\n\\n    event RequestNumbers(uint256 lotteryId, bytes32 requestId);\\n\\n    event UpdatedSizeOfLottery(address admin, uint16 newLotterySize);\\n\\n    event UpdatedMaxRange(address admin, uint16 newMaxRange);\\n\\n    event LotteryOpen(uint256 lotteryId, uint256 ticketSupply);\\n\\n    event LotteryClose(uint256 lotteryId, uint256 ticketSupply);\\n\\n    //-------------------------------------------------------------------------\\n    // MODIFIERS\\n    //-------------------------------------------------------------------------\\n\\n    modifier onlyRandomGenerator() {\\n        require(msg.sender == address(randomGenerator_), \\\"Only random generator\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!address(msg.sender).isContract(), \\\"contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // CONSTRUCTOR\\n    //-------------------------------------------------------------------------\\n\\n    constructor(\\n        // address _cake,\\n        // address _timer,\\n        uint8 _sizeOfLotteryNumbers,\\n        uint16 _maxValidNumberRange // uint8 _bucketOneMaxNumber, // TODO check // address lotteryNFT_ // Testable(_timer)\\n    ) {\\n        // require(\\n        //     _discountForBucketOne < _discountForBucketTwo &&\\n        //     _discountForBucketTwo < _discountForBucketThree,\\n        //     \\\"Discounts must increase\\\"\\n        // );\\n        // require(\\n        //     _cake != address(0),\\n        //     \\\"Contracts cannot be 0 address\\\"\\n        // );\\n        require(_sizeOfLotteryNumbers != 0 && _maxValidNumberRange != 0, \\\"Lottery setup cannot be 0\\\");\\n        // require(lotteryNFT_ != address(0), \\\"Contracts cannot be 0 address\\\");\\n        // nft_ = ISweetpadTicket(lotteryNFT_);\\n        // cake_ = IERC20(_cake);\\n        sizeOfLottery_ = _sizeOfLotteryNumbers;\\n        maxValidRange_ = _maxValidNumberRange;\\n\\n        // bucketOneMax_ = _bucketOneMaxNumber;\\n        // bucketTwoMax_ = _bucketTwoMaxNumber;\\n        // discountForBucketOne_ = _discountForBucketOne;\\n        // discountForBucketTwo_ = _discountForBucketTwo;\\n        // discountForBucketThree_ = _discountForBucketThree;\\n    }\\n\\n    // function initialize(\\n    //     address _lotteryNFT,\\n    //     address _IRandomNumberGenerator\\n    // )\\n    //     external\\n    //     initializer\\n    //     onlyOwner()\\n    // {\\n    //     require(\\n    //         _lotteryNFT != address(0) &&\\n    //         _IRandomNumberGenerator != address(0),\\n    //         \\\"Contracts cannot be 0 address\\\"\\n    //     );\\n    //     nft_ = ILotteryNFT(_lotteryNFT);\\n    //     randomGenerator_ = IRandomNumberGenerator(_IRandomNumberGenerator);\\n    // }\\n\\n    function getBasicLottoInfo(uint256 _lotteryId) external view returns (LottoInfo memory) {\\n        return (allLotteries_[_lotteryId]);\\n    }\\n\\n    function getMaxRange() external view returns (uint16) {\\n        return maxValidRange_;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // STATE MODIFYING FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    //-------------------------------------------------------------------------\\n    // Restricted Access Functions (onlyOwner)\\n\\n    function setRendomGenerator(address randomNumberGenerator_) external onlyOwner {\\n        require(randomNumberGenerator_ != address(0), \\\"Contracts cannot be 0 address\\\");\\n        randomGenerator_ = IRandomNumberGenerator(randomNumberGenerator_);\\n    }\\n\\n    function updateSizeOfLottery(uint16 _newSize) external onlyOwner {\\n        require(sizeOfLottery_ != _newSize, \\\"Cannot set to current size\\\");\\n        require(sizeOfLottery_ != 0, \\\"Lottery size cannot be 0\\\");\\n        sizeOfLottery_ = _newSize;\\n\\n        emit UpdatedSizeOfLottery(msg.sender, _newSize);\\n    }\\n\\n    function updateMaxRange(uint16 _newMaxRange) external onlyOwner {\\n        require(maxValidRange_ != _newMaxRange, \\\"Cannot set to current size\\\");\\n        require(maxValidRange_ != 0, \\\"Max range cannot be 0\\\");\\n        maxValidRange_ = _newMaxRange;\\n\\n        emit UpdatedMaxRange(msg.sender, _newMaxRange);\\n    }\\n\\n    function drawWinningNumbers(uint256 _lotteryId) external onlyOwner {\\n        // Checks that the lottery is past the closing block\\n        require(\\n            allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\\n            \\\"Cannot set winning numbers during lottery\\\"\\n        );\\n        // Checks lottery numbers have not already been drawn\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Open || allLotteries_[_lotteryId].lotteryStatus == Status.NotStarted, \\\"Lottery State incorrect for draw\\\");\\n        // Sets lottery status to closed\\n        allLotteries_[_lotteryId].lotteryStatus = Status.Closed;\\n        // Requests a random number from the generator\\n        requestId_ = randomGenerator_.getRandomNumber(_lotteryId);\\n        // Emits that random number has been requested\\n        emit RequestNumbers(_lotteryId, requestId_);\\n    }\\n\\n    function numbersDrawn(\\n        uint256 _lotteryId,\\n        bytes32 _requestId,\\n        uint256 _randomNumber\\n    ) external onlyRandomGenerator {\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Closed, \\\"Draw numbers first\\\");\\n        if (requestId_ == _requestId) {\\n            allLotteries_[_lotteryId].lotteryStatus = Status.Completed;\\n            // allLotteries_[_lotteryId].winningNumbers = _split(_randomNumber); // TODO\\n        }\\n        rendomNumbers[_lotteryId] = _randomNumber;\\n        // TODO fix\\n        // emit LotteryClose(_lotteryId, nft_.getTotalSupply());\\n    }\\n\\n    function getWiningNumbers(uint256 _lotteryId) external {\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \\\"Draw numbers first\\\");\\n        allLotteries_[_lotteryId].winningNumbers = _split(rendomNumbers[_lotteryId]);\\n    }\\n\\n    // * @param   _prizeDistribution An array defining the distribution of the\\n    //  *          prize pool. I.e if a lotto has 5 numbers, the distribution could\\n    //  *          be [5, 10, 15, 20, 30] = 100%. This means if you get one number\\n    //  *          right you get 5% of the pool, 2 matching would be 10% and so on.\\n    //  * @param   _prizePoolInCake The amount of Cake available to win in this\\n    //  *          lottery.\\n\\n    /**\\n     * @param   _startingTimestamp The block timestamp for the beginning of the\\n     *          lottery.\\n     * @param   _closingTimestamp The block timestamp after which no more tickets\\n     *          will be sold for the lottery. Note that this timestamp MUST\\n     *          be after the starting block timestamp.\\n     */\\n    //  TODO add functionaliti to connect lottery and ido\\n    function createNewLotto(\\n        // uint8[] calldata _prizeDistribution,\\n        // uint256 _prizePoolInCake,\\n        // uint256 _costPerTicket,\\n        uint256 _startingTimestamp,\\n        uint256 _closingTimestamp,\\n        address _ido\\n    ) external onlyOwner returns (uint256 lotteryId) {\\n        require(_startingTimestamp != 0 && _startingTimestamp < _closingTimestamp, \\\"Timestamps for lottery invalid\\\");\\n        require(idoToId[_ido] == 0, \\\"SweetpadLottery: Lottery for current IDO contract was already created\\\");\\n        // Incrementing lottery ID\\n        lotteryIdCounter_ = lotteryIdCounter_ + 1;\\n        lotteryId = lotteryIdCounter_;\\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\\n        Status lotteryStatus;\\n        if (_startingTimestamp >= block.timestamp) {\\n            lotteryStatus = Status.Open;\\n        } else {\\n            lotteryStatus = Status.NotStarted;\\n        }\\n        // Saving data in struct\\n        LottoInfo memory newLottery = LottoInfo(\\n            lotteryId,\\n            lotteryStatus,\\n            _ido,\\n            // _prizePoolInCake,\\n            // _costPerTicket,\\n            // _prizeDistribution,\\n            _startingTimestamp,\\n            _closingTimestamp,\\n            winningNumbers\\n        );\\n        allLotteries_[lotteryId] = newLottery;\\n        idoToId[_ido] = lotteryId;\\n        // TODO fix\\n        // Emitting important information around new lottery.\\n        // emit LotteryOpen(\\n        //     lotteryId,\\n        //     nft_.getTotalSupply()\\n        // );\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // General Access Functions\\n\\n    // claim reward don't remove!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n    // function claimReward(uint256 _lotteryId, uint256 _tokenId) external notContract() {\\n    //     // Checking the lottery is in a valid time for claiming\\n    //     require(\\n    //         allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\\n    //         \\\"Wait till end to claim\\\"\\n    //     );\\n    //     // Checks the lottery winning numbers are available\\n    //     require(\\n    //         allLotteries_[_lotteryId].lotteryStatus == Status.Completed,\\n    //         \\\"Winning Numbers not chosen yet\\\"\\n    //     );\\n    //     require(\\n    //         nft_.getOwnerOfTicket(_tokenId) == msg.sender,\\n    //         \\\"Only the owner can claim\\\"\\n    //     );\\n    //     // Sets the claim of the ticket to true (if claimed, will revert)\\n    //     require(\\n    //         nft_.claimTicket(_tokenId, _lotteryId),\\n    //         \\\"Numbers for ticket invalid\\\"\\n    //     );\\n    //     // Getting the number of matching tickets\\n    //     uint8 matchingNumbers = _getNumberOfMatching(\\n    //         nft_.getTicketNumbers(_tokenId),\\n    //         allLotteries_[_lotteryId].winningNumbers\\n    //     );\\n    //     // Getting the prize amount for those matching tickets\\n    //     uint256 prizeAmount = _prizeForMatching(\\n    //         matchingNumbers,\\n    //         _lotteryId\\n    //     );\\n    //     // Removing the prize amount from the pool\\n    //     allLotteries_[_lotteryId].prizePoolInCake = allLotteries_[_lotteryId].prizePoolInCake.sub(prizeAmount);\\n    //     // Transfering the user their winnings\\n    //     cake_.safeTransfer(address(msg.sender), prizeAmount);\\n    // }\\n\\n    //-------------------------------------------------------------------------\\n    // INTERNAL FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    // TODO start tickets ids from 1 and check if user number is 0 breack\\n    // TODO fix functionality\\n    function getNumberOfMatching(uint16[] memory _usersNumbers, uint16[] memory _winningNumbers)\\n        public\\n        pure\\n        returns (uint8 noOfMatching)\\n    {\\n        // Loops through all wimming numbers\\n        for (uint256 i = 0; i < _winningNumbers.length; i++) {\\n            // If the winning numbers and user numbers match\\n            if (_usersNumbers[i] == _winningNumbers[i]) {\\n                // The number of matching numbers incrases\\n                noOfMatching += 1;\\n            }\\n        }\\n    }\\n\\n    function _split(uint256 _randomNumber) internal view returns (uint16[] memory) {\\n        // Temparary storage for winning numbers\\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\\n        // Loops the size of the number of tickets in the lottery\\n        for (uint256 i = 0; i < sizeOfLottery_; i++) {\\n            // uint256 duplicated;\\n            // Encodes the random number with its position in loop\\n            bytes32 hashOfRandom = keccak256(abi.encodePacked(_randomNumber, i));\\n            // Casts random number hash into uint256\\n            uint256 numberRepresentation = uint256(hashOfRandom);\\n            // Sets the winning number position to a uint16 of random hash number\\n            // for (uint256 j = 0; j < winningNumbers.length; j++) {\\n            //     if (winningNumbers[j] > 0) {\\n            //         if (winningNumbers[j] == uint16(numberRepresentation.mod(maxValidRange_))) {\\n            //             duplicated += 1;\\n            //         }\\n            //     }\\n            // }\\n            // if (duplicated > 0) {\\n            //     continue;\\n            // }\\n            winningNumbers[i] = uint16(numberRepresentation.mod(maxValidRange_));\\n        }\\n        return winningNumbers;\\n    }\\n\\n    function getOpenLotteries() public view returns (uint256[] memory openLotteries) {\\n        for (uint256 i = 1; i <= lotteryIdCounter_; i++) {\\n            if (allLotteries_[i].closingTimestamp > block.timestamp) {\\n                openLotteries[i - 1] = allLotteries_[i].lotteryID;\\n            }\\n        }\\n        return openLotteries;\\n    }\\n}\\n\",\"keccak256\":\"0xf1f818cd4564ea877002f52717068d3e208991982654b9e8d055288b259e8876\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomNumberGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IRandomNumberGenerator {\\n    /**\\n     * Requests randomness from a user-provided seed\\n     */\\n    function getRandomNumber(uint256 lotteryId) external returns (bytes32 requestId);\\n}\\n\",\"keccak256\":\"0x665dbbca64ac7762758f50953a32255efa24a6b8b4f63e68962b53959b40d8b1\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter02.sol\\\";\\n\\ninterface ISweetpadFreezing {\\n    struct FreezeInfo {\\n        uint256 frozenUntil; // blockNumber when can be unfrozen\\n        uint256 period; // Number of blocks that tokens are frozen\\n        uint256 frozenAmount; // Amount of tokens are frozen\\n        uint256 power; // power of current frozen amount\\n        uint8 asset; // Variable to identify if the token is SWT or LP\\n    }\\n\\n    function freezeInfo(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint8\\n        );\\n\\n    function sweetToken() external view returns (IERC20);\\n\\n    function lpToken() external view returns (IERC20);\\n\\n    function router() external view returns (IApeRouter02);\\n\\n    function multiplier() external view returns (uint256);\\n\\n    function totalFrozenSWT() external view returns (uint256);\\n\\n    function totalFrozenLP() external view returns (uint256);\\n\\n    function getBlocksPerDay() external pure returns (uint256);\\n\\n    function getMinFreezePeriod() external pure returns (uint256);\\n\\n    function getMaxFreezePeriod() external pure returns (uint256);\\n\\n    function totalPower(address) external view returns (uint256);\\n\\n    function freezeSWT(uint256, uint256) external;\\n\\n    function freezeLP(uint256, uint256) external;\\n\\n    function freezeWithBNB(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external payable;\\n\\n    function unfreezeSWT(uint256, uint256) external;\\n\\n    function unfreezeLP(uint256) external;\\n\\n    function setMultiplier(uint256) external;\\n\\n    function setLPToken(IERC20) external;\\n\\n    function getFreezes(address) external view returns (FreezeInfo[] memory);\\n\\n    function getPower(uint256, uint256) external pure returns (uint256);\\n\\n    /// @notice Emitted when tokens are frozen\\n    event Freeze(uint256 id, address indexed account, uint256 amount, uint256 power, uint8 asset);\\n    /// @notice Emitted when tokens are unFrozen\\n    event UnFreeze(uint256 id, address indexed account, uint256 power, uint8 asset);\\n    /// @notice Emmited when multiplier reseted\\n    event MultiplierReseted(uint256 oldMultiplier, uint256 newMultiplier);\\n}\\n\",\"keccak256\":\"0xfafdc4d161bb2b5a1710a43a2974a2a9bc3a3bbe3725f733f8dbf68c1ec46bf2\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ISweetpadNFT is IERC721, IERC721Metadata {\\n    enum Tier {\\n        One,\\n        Two,\\n        Three\\n    }\\n\\n    function idToTier(uint256) external view returns (Tier);\\n\\n    function tierToBoost(Tier) external view returns (uint256);\\n\\n    function getTicketsQuantityById(uint256) external view returns (uint256);\\n\\n    function getTicketsQuantityByIds(uint256[] calldata) external view returns (uint256[] calldata);\\n\\n    function getUserNfts(address) external view returns (uint256[] memory);\\n\\n    function setBaseURI(string memory) external;\\n\\n    function currentID() external view returns (uint256);\\n\\n    function safeMint(address, Tier) external;\\n\\n    function safeMintBatch(address, Tier[] memory) external;\\n\\n    function safeBatchTransferFrom(\\n        address,\\n        address,\\n        uint256[] memory,\\n        bytes memory\\n    ) external;\\n\\n    /// @notice Emitted when new NFT is minted\\n    event Create(uint256 indexed, Tier indexed, address indexed);\\n}\\n\",\"keccak256\":\"0x245f785792ef6c25ad957f9fb2b737fe85ca0de47f907eaa2bd3d93f5a43ae39\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadNFTFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ISweetpadNFT.sol\\\";\\nimport \\\"./ISweetpadTicket.sol\\\";\\nimport \\\"../SweetpadLottery.sol\\\";\\n\\ninterface ISweetpadNFTFreezing {\\n    struct NFTData {\\n        // Account that froze NFT\\n        address freezer;\\n        // block after which freezer can unfreeze NFT\\n        uint256 freezeEndBlock;\\n    }\\n\\n    function freeze(uint256, uint256) external;\\n\\n    function freezeBatch(uint256[] calldata, uint256[] calldata) external;\\n\\n    function unfreeze(uint256) external;\\n\\n    function unfreezeBatch(uint256[] calldata) external;\\n\\n    function blocksPerDay() external pure returns (uint256);\\n\\n    function minFreezePeriod() external pure returns (uint256);\\n\\n    function maxFreezePeriod() external pure returns (uint256);\\n\\n    function nft() external view returns (ISweetpadNFT);\\n\\n    function ticket() external view returns (ISweetpadTicket);\\n\\n    function lottery() external view returns (SweetpadLottery);\\n\\n    function nftData(uint256) external view returns (address, uint256);\\n\\n    function getNftsFrozeByUser(address) external view returns (uint256[] memory);\\n    function getTicketsForIdo(address, address) external view returns(uint256[] memory);\\n\\n    function setSweetpadNFT(address) external;\\n\\n    function setSweetpadTicket(address) external;\\n\\n    function setSweetpadLottery(address) external;\\n\\n    // function tiketsForIdo(address, address) external returns(uint256[] memory);\\n\\n    function addTickets(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    event Froze(address indexed user, uint256 nftId, uint256 freezeEndBlock, uint256 ticketsMinted);\\n\\n    event FrozeBatch(address indexed user, uint256[] nftIds, uint256[] freezeEndBlocks, uint256[] ticketsMinted);\\n\\n    event Unfroze(address indexed user, uint256 nftId);\\n\\n    event UnfrozeBatch(address indexed user, uint256[] nftId);\\n}\\n\",\"keccak256\":\"0xa550b401f026937e4084f929a7ec4faeb9538afa71766d0886352462ded37063\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ISweetpadTicket is IERC721, IERC721Metadata {\\n    function totalTickets() external returns (uint256);\\n\\n    function mint(\\n        address,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd2830b2f844904617e384b122affaecdb2089bf52ddac4c180aee7826c4c9ce2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052601180546001600160a01b031916736147bc9c226748b47bfea290f58cd0e5dc2e5d721790553480156200003757600080fd5b50604051620023bf380380620023bf8339810160408190526200005a9162000197565b600180546001600160a01b03199081166001600160a01b038a81169190911790925560028054821689841617905560038054821688841617905560048054821687841617905560128054909116918516919091179055620000bd600082620000f6565b620000e97fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523283620000f6565b505050505050506200025b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000193576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001523390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600080600080600060e0888a031215620001b357600080fd5b8751620001c08162000242565b6020890151909750620001d38162000242565b6040890151909650620001e68162000242565b6060890151909550620001f98162000242565b60808901519094506200020c8162000242565b60a08901519093506200021f8162000242565b60c0890151909250620002328162000242565b8091505092959891949750929550565b6001600160a01b03811681146200025857600080fd5b50565b612154806200026b6000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806391d1485411610125578063d3f903b5116100ad578063dc8ba8e61161007c578063dc8ba8e614610480578063e148919114610489578063eae6f65214610492578063f0d21645146104b9578063fe942862146104c157600080fd5b8063d3f903b51461043e578063d547741f14610451578063d5faa64e14610464578063db3ad22c1461047757600080fd5b8063c340db71116100f4578063c340db71146103e6578063c4cf97e8146103f9578063ccea648f14610402578063d0672e141461040b578063d28817b71461041e57600080fd5b806391d14854146103af5780639af637a4146103c2578063a217fddf146103d5578063acde2d88146103dd57600080fd5b80633b7eda5a116101a8578063586fe3af11610177578063586fe3af1461034a57806360e3a42f1461035d5780637ff9b59614610370578063894ad666146103795780639176fd181461039c57600080fd5b80633b7eda5a1461031c5780633d95669114610325578063484f4ea91461032e5780634d14ba341461034157600080fd5b8063248a9ca3116101ef578063248a9ca3146102955780632f2ff15d146102b857806333bdd436146102cb57806336568abe146102de57806338d52e0f146102f157600080fd5b806301ffc9a714610221578063059c9149146102495780630e7148691461026057806313e4197114610280575b600080fd5b61023461022f366004611c6d565b6104ca565b60405190151581526020015b60405180910390f35b610252600e5481565b604051908152602001610240565b61025261026e366004611b4d565b60156020526000908152604090205481565b61029361028e366004611d63565b610501565b005b6102526102a3366004611c24565b60009081526020819052604090206001015490565b6102936102c6366004611c3d565b610a2e565b6102526102d9366004611b4d565b610a58565b6102936102ec366004611c3d565b610d24565b601254610304906001600160a01b031681565b6040516001600160a01b039091168152602001610240565b61025260065481565b61025260095481565b601154610304906001600160a01b031681565b610252600c5481565b610293610358366004611c24565b610da2565b61029361036b366004611c24565b611093565b610252600b5481565b610234610387366004611b4d565b60136020526000908152604090205460ff1681565b600354610304906001600160a01b031681565b6102346103bd366004611c3d565b61112f565b600154610304906001600160a01b031681565b610252600081565b610252600d5481565b6102936103f4366004611c24565b611158565b610252600a5481565b610252600f5481565b600254610304906001600160a01b031681565b61025261042c366004611b4d565b60146020526000908152604090205481565b600454610304906001600160a01b031681565b61029361045f366004611c3d565b61147e565b610252610472366004611b4d565b6114a3565b61025260075481565b61025260055481565b61025260085481565b6102527fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523281565b6102526114c6565b61025260105481565b60006001600160e01b03198216637965db0b60e01b14806104fb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061050c816114d6565b60648c11801561051e57506105dc8c11155b6105a15760405162461bcd60e51b815260206004820152604360248201527f537765657470616449444f3a20547279696e6720746f2073657420696e636f7260448201527f726563742070657263656e7420666f72206c6f747465727920616c6c6f63617460648201526234b7b760e91b608482015260a4015b60405180910390fd5b6121348b101580156105b557506126ac8b11155b6106355760405162461bcd60e51b815260206004820152604560248201527f537765657470616449444f3a20547279696e6720746f2073657420696e636f7260448201527f726563742070657263656e7420666f722067756172616e74656420616c6c6f6360648201526430ba34b7b760d91b608482015260a401610598565b61063f8c8c611ff9565b6127101461068f5760405162461bcd60e51b815260206004820152601f60248201527f537765657470616449444f3a20496e636f72726563742070657263656e7473006044820152606401610598565b60008a116106ed5760405162461bcd60e51b815260206004820152602560248201527f537765657470616449444f3a20546f74616c506f7765722063616e2774206265604482015264207a65726f60d81b6064820152608401610598565b6000881161074d5760405162461bcd60e51b815260206004820152602760248201527f537765657470616449444f3a20546f6b656e73546f53656c6c2063616e2774206044820152666265207a65726f60c81b6064820152608401610598565b600087116107ab5760405162461bcd60e51b815260206004820152602560248201527f537765657470616449444f3a20546f6b656e50726963652063616e2774206265604482015264207a65726f60d81b6064820152608401610598565b600086116108145760405162461bcd60e51b815260206004820152603060248201527f537765657470616449444f3a20416c6c6f636174696f6e20706572207469636b60448201526f65742063616e2774206265207a65726f60801b6064820152608401610598565b4385101561086e5760405162461bcd60e51b815260206004820152602160248201527f537765657470616449444f3a20496e76616c696420626c6f636b206e756d62656044820152603960f91b6064820152608401610598565b8484116108e5576040805162461bcd60e51b81526020600482015260248101919091527f537765657470616449444f3a2049444f2073616c6520656e6420626c6f636b2060448201527f6d7573742062652067726561746572207468656e20737461727420626c6f636b6064820152608401610598565b8383116109705760405162461bcd60e51b815260206004820152604d60248201527f537765657470616449444f3a2049444f207365636f6e642073616c652073746160448201527f727420626c6f636b206d7573742062652067726561746572207468656e20666960648201526c72737420656e6420626c6f636b60981b608482015260a401610598565b818311156109f65760405162461bcd60e51b815260206004820152604760248201527f537765657470616449444f3a2049444f207365636f6e642073616c6520656e6460448201527f20626c6f636b206d7573742062652067726561746572207468656e20737461726064820152667420626c6f636b60c81b608482015260a401610598565b5060059a909a556006989098556007969096556008949094556009839055600a92909255600b55600c55600d55600f55600e55601055565b600082815260208190526040902060010154610a49816114d6565b610a5383836114e3565b505050565b6004805460405163371ece3d60e21b8152309281019290925260009182916001600160a01b03169063da47675590829063dc7b38f49060240160206040518083038186803b158015610aa957600080fd5b505afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190611d4a565b6040518263ffffffff1660e01b8152600401610aff91815260200190565b60006040518083038186803b158015610b1757600080fd5b505afa158015610b2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b539190810190611c97565b60a0015160035460405163231d54c160e21b81526001600160a01b03868116600483015230602483015292935060009290911690638c7553049060440160006040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be49190810190611b6a565b905060005b8251811015610d1c5760005b8251811015610d0957828181518110610c1057610c106120dd565b602002602001015160001415610c2557610cf7565b828181518110610c3757610c376120dd565b6020026020010151848381518110610c5157610c516120dd565b602002602001015161ffff161415610cf75760018351610c719190612052565b8114610cbd578260018451610c869190612052565b81518110610c9657610c966120dd565b6020026020010151838281518110610cb057610cb06120dd565b6020026020010181815250505b60008360018551610cce9190612052565b81518110610cde57610cde6120dd565b6020908102919091010152610cf4600186611ff9565b94505b80610d01816120ac565b915050610bf5565b5080610d14816120ac565b915050610be9565b505050919050565b6001600160a01b0381163314610d945760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610598565b610d9e8282611567565b5050565b43600d5411158015610db5575043600f54115b610e015760405162461bcd60e51b815260206004820181905260248201527f537765657470616449444f3a2057726f6e6720706572696f6420746f206275796044820152606401610598565b60008111610e215760405162461bcd60e51b815260040161059890611f2e565b6002546040516307c844e360e21b81523360048201526000916001600160a01b031690631f21138c9060240160206040518083038186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d9190611d4a565b905060008111610ebf5760405162461bcd60e51b815260040161059890611e99565b600060075461271083600654600954670de0b6b3a7640000610ee19190612033565b610eeb9190612033565b610ef59190612033565b610eff9190612011565b610f099190612011565b33600090815260146020526040812054600754600b54939450919290919061271090610f359086612033565b610f3f9190612011565b610f499190612011565b610f539190612052565b905083811015610f755760405162461bcd60e51b815260040161059890611ee0565b601154610f8d906001600160a01b03163330876115cc565b600b54610fa285670de0b6b3a7640000612033565b610fac9190612011565b3360009081526014602052604081208054909190610fcb908490611ff9565b9091555050600b54611008903390610feb87670de0b6b3a7640000612033565b610ff59190612011565b6012546001600160a01b03169190611637565b600b5461101d85670de0b6b3a7640000612033565b6110279190612011565b600a60008282546110389190612052565b9091555050336000908152601460205260409020546110579083612052565b61108d57336000908152601360205260408120805460ff1916600117905560168054859290611087908490611ff9565b90915550505b50505050565b600061109e336114a3565b9050818110156110fc5760405162461bcd60e51b8152602060048201526024808201527f537765657470616449444f3a20496e73756666696369656e7420616c6c6f63616044820152633a34b7b760e11b6064820152608401610598565b601154611114906001600160a01b03163330856115cc565b610d9e33600b5484670de0b6b3a7640000610feb9190612033565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b43600e541115801561116b575043601054115b6111b75760405162461bcd60e51b815260206004820181905260248201527f537765657470616449444f3a2057726f6e6720706572696f6420746f206275796044820152606401610598565b600081116111d75760405162461bcd60e51b815260040161059890611f2e565b6002546040516307c844e360e21b81523360048201526000916001600160a01b031690631f21138c9060240160206040518083038186803b15801561121b57600080fd5b505afa15801561122f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112539190611d4a565b9050600081116112755760405162461bcd60e51b815260040161059890611e99565b3360009081526013602052604090205460ff166112f15760405162461bcd60e51b815260206004820152603460248201527f537765657470616449444f3a20557365722063616e27742062757920746f6b656044820152736e732066726f6d207365636f6e6420737461676560601b6064820152608401610598565b33600090815260156020526040812054601654600a54611312908590612033565b61131c9190612011565b6113269190612052565b336000908152601560205260409020549091508110156113a65760405162461bcd60e51b815260206004820152603560248201527f537765657470616449444f3a205573657220616c726561647920626f75676874604482015274206d617820616d6f756e74206f6620746f6b656e7360581b6064820152608401610598565b6000600b54826113b69190612033565b9050838110156113d85760405162461bcd60e51b815260040161059890611ee0565b6011546113f0906001600160a01b03163330876115cc565b61140b33600b5486670de0b6b3a7640000610feb9190612033565b600b5461142085670de0b6b3a7640000612033565b61142a9190612011565b3360009081526015602052604081208054909190611449908490611ff9565b9091555050600b5461146385670de0b6b3a7640000612033565b61146d9190612011565b600a60008282546110879190612052565b600082815260208190526040902060010154611499816114d6565b610a538383611567565b6000806114af83610a58565b9050600c54816114bf9190612033565b9392505050565b60006114d133610a58565b905090565b6114e08133611667565b50565b6114ed828261112f565b610d9e576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115233390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611571828261112f565b15610d9e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b038085166024830152831660448201526064810182905261108d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116cb565b6040516001600160a01b038316602482015260448101829052610a5390849063a9059cbb60e01b90606401611600565b611671828261112f565b610d9e57611689816001600160a01b0316601461179d565b61169483602061179d565b6040516020016116a5929190611df1565b60408051601f198184030181529082905262461bcd60e51b825261059891600401611e66565b6000611720826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119399092919063ffffffff16565b805190915015610a53578080602001905181019061173e9190611c02565b610a535760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610598565b606060006117ac836002612033565b6117b7906002611ff9565b67ffffffffffffffff8111156117cf576117cf6120f3565b6040519080825280601f01601f1916602001820160405280156117f9576020820181803683370190505b509050600360fc1b81600081518110611814576118146120dd565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611843576118436120dd565b60200101906001600160f81b031916908160001a9053506000611867846002612033565b611872906001611ff9565b90505b60018111156118ea576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118a6576118a66120dd565b1a60f81b8282815181106118bc576118bc6120dd565b60200101906001600160f81b031916908160001a90535060049490941c936118e381612095565b9050611875565b5083156114bf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610598565b60606119488484600085611950565b949350505050565b6060824710156119b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610598565b6001600160a01b0385163b611a085760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610598565b600080866001600160a01b03168587604051611a249190611dd5565b60006040518083038185875af1925050503d8060008114611a61576040519150601f19603f3d011682016040523d82523d6000602084013e611a66565b606091505b5091509150611a76828286611a81565b979650505050505050565b60608315611a905750816114bf565b825115611aa05782518084602001fd5b8160405162461bcd60e51b81526004016105989190611e66565b8051611ac581612109565b919050565b600082601f830112611adb57600080fd5b81516020611af0611aeb83611fd5565b611fa4565b80838252828201915082860187848660051b8901011115611b1057600080fd5b6000805b86811015611b3f57825161ffff81168114611b2d578283fd5b85529385019391850191600101611b14565b509198975050505050505050565b600060208284031215611b5f57600080fd5b81356114bf81612109565b60006020808385031215611b7d57600080fd5b825167ffffffffffffffff811115611b9457600080fd5b8301601f81018513611ba557600080fd5b8051611bb3611aeb82611fd5565b80828252848201915084840188868560051b8701011115611bd357600080fd5b600094505b83851015611bf6578051835260019490940193918501918501611bd8565b50979650505050505050565b600060208284031215611c1457600080fd5b815180151581146114bf57600080fd5b600060208284031215611c3657600080fd5b5035919050565b60008060408385031215611c5057600080fd5b823591506020830135611c6281612109565b809150509250929050565b600060208284031215611c7f57600080fd5b81356001600160e01b0319811681146114bf57600080fd5b600060208284031215611ca957600080fd5b815167ffffffffffffffff80821115611cc157600080fd5b9083019060c08286031215611cd557600080fd5b611cdd611f7b565b82518152602083015160048110611cf357600080fd5b6020820152611d0460408401611aba565b6040820152606083015160608201526080830151608082015260a083015182811115611d2f57600080fd5b611d3b87828601611aca565b60a08301525095945050505050565b600060208284031215611d5c57600080fd5b5051919050565b60008060008060008060008060008060006101608c8e031215611d8557600080fd5b505089359b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e0810135965061010081013595506101208101359450610140013592509050565b60008251611de7818460208701612069565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611e29816017850160208801612069565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611e5a816028840160208801612069565b01602801949350505050565b6020815260008251806020840152611e85816040850160208701612069565b601f01601f19169190910160400192915050565b60208082526027908201527f537765657470616449444f3a2055736572277320706f7765722063616e2774206040820152666265207a65726f60c81b606082015260800190565b6020808252602e908201527f537765657470616449444f3a20547279696e6720746f20627579206d6f72652060408201526d7468656e20617661696c61626c6560901b606082015260800190565b6020808252602d908201527f537765657470616449444f3a20416d6f756e74206d757374206265206772656160408201526c746572207468656e207a65726f60981b606082015260800190565b60405160c0810167ffffffffffffffff81118282101715611f9e57611f9e6120f3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fcd57611fcd6120f3565b604052919050565b600067ffffffffffffffff821115611fef57611fef6120f3565b5060051b60200190565b6000821982111561200c5761200c6120c7565b500190565b60008261202e57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561204d5761204d6120c7565b500290565b600082821015612064576120646120c7565b500390565b60005b8381101561208457818101518382015260200161206c565b8381111561108d5750506000910152565b6000816120a4576120a46120c7565b506000190190565b60006000198214156120c0576120c06120c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146114e057600080fdfea26469706673582212205bc74aa2741fb8f4f701b6737992c0b39ad182eadef22c6b0cb56cb40b39899b64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806391d1485411610125578063d3f903b5116100ad578063dc8ba8e61161007c578063dc8ba8e614610480578063e148919114610489578063eae6f65214610492578063f0d21645146104b9578063fe942862146104c157600080fd5b8063d3f903b51461043e578063d547741f14610451578063d5faa64e14610464578063db3ad22c1461047757600080fd5b8063c340db71116100f4578063c340db71146103e6578063c4cf97e8146103f9578063ccea648f14610402578063d0672e141461040b578063d28817b71461041e57600080fd5b806391d14854146103af5780639af637a4146103c2578063a217fddf146103d5578063acde2d88146103dd57600080fd5b80633b7eda5a116101a8578063586fe3af11610177578063586fe3af1461034a57806360e3a42f1461035d5780637ff9b59614610370578063894ad666146103795780639176fd181461039c57600080fd5b80633b7eda5a1461031c5780633d95669114610325578063484f4ea91461032e5780634d14ba341461034157600080fd5b8063248a9ca3116101ef578063248a9ca3146102955780632f2ff15d146102b857806333bdd436146102cb57806336568abe146102de57806338d52e0f146102f157600080fd5b806301ffc9a714610221578063059c9149146102495780630e7148691461026057806313e4197114610280575b600080fd5b61023461022f366004611c6d565b6104ca565b60405190151581526020015b60405180910390f35b610252600e5481565b604051908152602001610240565b61025261026e366004611b4d565b60156020526000908152604090205481565b61029361028e366004611d63565b610501565b005b6102526102a3366004611c24565b60009081526020819052604090206001015490565b6102936102c6366004611c3d565b610a2e565b6102526102d9366004611b4d565b610a58565b6102936102ec366004611c3d565b610d24565b601254610304906001600160a01b031681565b6040516001600160a01b039091168152602001610240565b61025260065481565b61025260095481565b601154610304906001600160a01b031681565b610252600c5481565b610293610358366004611c24565b610da2565b61029361036b366004611c24565b611093565b610252600b5481565b610234610387366004611b4d565b60136020526000908152604090205460ff1681565b600354610304906001600160a01b031681565b6102346103bd366004611c3d565b61112f565b600154610304906001600160a01b031681565b610252600081565b610252600d5481565b6102936103f4366004611c24565b611158565b610252600a5481565b610252600f5481565b600254610304906001600160a01b031681565b61025261042c366004611b4d565b60146020526000908152604090205481565b600454610304906001600160a01b031681565b61029361045f366004611c3d565b61147e565b610252610472366004611b4d565b6114a3565b61025260075481565b61025260055481565b61025260085481565b6102527fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523281565b6102526114c6565b61025260105481565b60006001600160e01b03198216637965db0b60e01b14806104fb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061050c816114d6565b60648c11801561051e57506105dc8c11155b6105a15760405162461bcd60e51b815260206004820152604360248201527f537765657470616449444f3a20547279696e6720746f2073657420696e636f7260448201527f726563742070657263656e7420666f72206c6f747465727920616c6c6f63617460648201526234b7b760e91b608482015260a4015b60405180910390fd5b6121348b101580156105b557506126ac8b11155b6106355760405162461bcd60e51b815260206004820152604560248201527f537765657470616449444f3a20547279696e6720746f2073657420696e636f7260448201527f726563742070657263656e7420666f722067756172616e74656420616c6c6f6360648201526430ba34b7b760d91b608482015260a401610598565b61063f8c8c611ff9565b6127101461068f5760405162461bcd60e51b815260206004820152601f60248201527f537765657470616449444f3a20496e636f72726563742070657263656e7473006044820152606401610598565b60008a116106ed5760405162461bcd60e51b815260206004820152602560248201527f537765657470616449444f3a20546f74616c506f7765722063616e2774206265604482015264207a65726f60d81b6064820152608401610598565b6000881161074d5760405162461bcd60e51b815260206004820152602760248201527f537765657470616449444f3a20546f6b656e73546f53656c6c2063616e2774206044820152666265207a65726f60c81b6064820152608401610598565b600087116107ab5760405162461bcd60e51b815260206004820152602560248201527f537765657470616449444f3a20546f6b656e50726963652063616e2774206265604482015264207a65726f60d81b6064820152608401610598565b600086116108145760405162461bcd60e51b815260206004820152603060248201527f537765657470616449444f3a20416c6c6f636174696f6e20706572207469636b60448201526f65742063616e2774206265207a65726f60801b6064820152608401610598565b4385101561086e5760405162461bcd60e51b815260206004820152602160248201527f537765657470616449444f3a20496e76616c696420626c6f636b206e756d62656044820152603960f91b6064820152608401610598565b8484116108e5576040805162461bcd60e51b81526020600482015260248101919091527f537765657470616449444f3a2049444f2073616c6520656e6420626c6f636b2060448201527f6d7573742062652067726561746572207468656e20737461727420626c6f636b6064820152608401610598565b8383116109705760405162461bcd60e51b815260206004820152604d60248201527f537765657470616449444f3a2049444f207365636f6e642073616c652073746160448201527f727420626c6f636b206d7573742062652067726561746572207468656e20666960648201526c72737420656e6420626c6f636b60981b608482015260a401610598565b818311156109f65760405162461bcd60e51b815260206004820152604760248201527f537765657470616449444f3a2049444f207365636f6e642073616c6520656e6460448201527f20626c6f636b206d7573742062652067726561746572207468656e20737461726064820152667420626c6f636b60c81b608482015260a401610598565b5060059a909a556006989098556007969096556008949094556009839055600a92909255600b55600c55600d55600f55600e55601055565b600082815260208190526040902060010154610a49816114d6565b610a5383836114e3565b505050565b6004805460405163371ece3d60e21b8152309281019290925260009182916001600160a01b03169063da47675590829063dc7b38f49060240160206040518083038186803b158015610aa957600080fd5b505afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190611d4a565b6040518263ffffffff1660e01b8152600401610aff91815260200190565b60006040518083038186803b158015610b1757600080fd5b505afa158015610b2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b539190810190611c97565b60a0015160035460405163231d54c160e21b81526001600160a01b03868116600483015230602483015292935060009290911690638c7553049060440160006040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be49190810190611b6a565b905060005b8251811015610d1c5760005b8251811015610d0957828181518110610c1057610c106120dd565b602002602001015160001415610c2557610cf7565b828181518110610c3757610c376120dd565b6020026020010151848381518110610c5157610c516120dd565b602002602001015161ffff161415610cf75760018351610c719190612052565b8114610cbd578260018451610c869190612052565b81518110610c9657610c966120dd565b6020026020010151838281518110610cb057610cb06120dd565b6020026020010181815250505b60008360018551610cce9190612052565b81518110610cde57610cde6120dd565b6020908102919091010152610cf4600186611ff9565b94505b80610d01816120ac565b915050610bf5565b5080610d14816120ac565b915050610be9565b505050919050565b6001600160a01b0381163314610d945760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610598565b610d9e8282611567565b5050565b43600d5411158015610db5575043600f54115b610e015760405162461bcd60e51b815260206004820181905260248201527f537765657470616449444f3a2057726f6e6720706572696f6420746f206275796044820152606401610598565b60008111610e215760405162461bcd60e51b815260040161059890611f2e565b6002546040516307c844e360e21b81523360048201526000916001600160a01b031690631f21138c9060240160206040518083038186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d9190611d4a565b905060008111610ebf5760405162461bcd60e51b815260040161059890611e99565b600060075461271083600654600954670de0b6b3a7640000610ee19190612033565b610eeb9190612033565b610ef59190612033565b610eff9190612011565b610f099190612011565b33600090815260146020526040812054600754600b54939450919290919061271090610f359086612033565b610f3f9190612011565b610f499190612011565b610f539190612052565b905083811015610f755760405162461bcd60e51b815260040161059890611ee0565b601154610f8d906001600160a01b03163330876115cc565b600b54610fa285670de0b6b3a7640000612033565b610fac9190612011565b3360009081526014602052604081208054909190610fcb908490611ff9565b9091555050600b54611008903390610feb87670de0b6b3a7640000612033565b610ff59190612011565b6012546001600160a01b03169190611637565b600b5461101d85670de0b6b3a7640000612033565b6110279190612011565b600a60008282546110389190612052565b9091555050336000908152601460205260409020546110579083612052565b61108d57336000908152601360205260408120805460ff1916600117905560168054859290611087908490611ff9565b90915550505b50505050565b600061109e336114a3565b9050818110156110fc5760405162461bcd60e51b8152602060048201526024808201527f537765657470616449444f3a20496e73756666696369656e7420616c6c6f63616044820152633a34b7b760e11b6064820152608401610598565b601154611114906001600160a01b03163330856115cc565b610d9e33600b5484670de0b6b3a7640000610feb9190612033565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b43600e541115801561116b575043601054115b6111b75760405162461bcd60e51b815260206004820181905260248201527f537765657470616449444f3a2057726f6e6720706572696f6420746f206275796044820152606401610598565b600081116111d75760405162461bcd60e51b815260040161059890611f2e565b6002546040516307c844e360e21b81523360048201526000916001600160a01b031690631f21138c9060240160206040518083038186803b15801561121b57600080fd5b505afa15801561122f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112539190611d4a565b9050600081116112755760405162461bcd60e51b815260040161059890611e99565b3360009081526013602052604090205460ff166112f15760405162461bcd60e51b815260206004820152603460248201527f537765657470616449444f3a20557365722063616e27742062757920746f6b656044820152736e732066726f6d207365636f6e6420737461676560601b6064820152608401610598565b33600090815260156020526040812054601654600a54611312908590612033565b61131c9190612011565b6113269190612052565b336000908152601560205260409020549091508110156113a65760405162461bcd60e51b815260206004820152603560248201527f537765657470616449444f3a205573657220616c726561647920626f75676874604482015274206d617820616d6f756e74206f6620746f6b656e7360581b6064820152608401610598565b6000600b54826113b69190612033565b9050838110156113d85760405162461bcd60e51b815260040161059890611ee0565b6011546113f0906001600160a01b03163330876115cc565b61140b33600b5486670de0b6b3a7640000610feb9190612033565b600b5461142085670de0b6b3a7640000612033565b61142a9190612011565b3360009081526015602052604081208054909190611449908490611ff9565b9091555050600b5461146385670de0b6b3a7640000612033565b61146d9190612011565b600a60008282546110879190612052565b600082815260208190526040902060010154611499816114d6565b610a538383611567565b6000806114af83610a58565b9050600c54816114bf9190612033565b9392505050565b60006114d133610a58565b905090565b6114e08133611667565b50565b6114ed828261112f565b610d9e576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115233390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611571828261112f565b15610d9e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b038085166024830152831660448201526064810182905261108d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116cb565b6040516001600160a01b038316602482015260448101829052610a5390849063a9059cbb60e01b90606401611600565b611671828261112f565b610d9e57611689816001600160a01b0316601461179d565b61169483602061179d565b6040516020016116a5929190611df1565b60408051601f198184030181529082905262461bcd60e51b825261059891600401611e66565b6000611720826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119399092919063ffffffff16565b805190915015610a53578080602001905181019061173e9190611c02565b610a535760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610598565b606060006117ac836002612033565b6117b7906002611ff9565b67ffffffffffffffff8111156117cf576117cf6120f3565b6040519080825280601f01601f1916602001820160405280156117f9576020820181803683370190505b509050600360fc1b81600081518110611814576118146120dd565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611843576118436120dd565b60200101906001600160f81b031916908160001a9053506000611867846002612033565b611872906001611ff9565b90505b60018111156118ea576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118a6576118a66120dd565b1a60f81b8282815181106118bc576118bc6120dd565b60200101906001600160f81b031916908160001a90535060049490941c936118e381612095565b9050611875565b5083156114bf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610598565b60606119488484600085611950565b949350505050565b6060824710156119b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610598565b6001600160a01b0385163b611a085760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610598565b600080866001600160a01b03168587604051611a249190611dd5565b60006040518083038185875af1925050503d8060008114611a61576040519150601f19603f3d011682016040523d82523d6000602084013e611a66565b606091505b5091509150611a76828286611a81565b979650505050505050565b60608315611a905750816114bf565b825115611aa05782518084602001fd5b8160405162461bcd60e51b81526004016105989190611e66565b8051611ac581612109565b919050565b600082601f830112611adb57600080fd5b81516020611af0611aeb83611fd5565b611fa4565b80838252828201915082860187848660051b8901011115611b1057600080fd5b6000805b86811015611b3f57825161ffff81168114611b2d578283fd5b85529385019391850191600101611b14565b509198975050505050505050565b600060208284031215611b5f57600080fd5b81356114bf81612109565b60006020808385031215611b7d57600080fd5b825167ffffffffffffffff811115611b9457600080fd5b8301601f81018513611ba557600080fd5b8051611bb3611aeb82611fd5565b80828252848201915084840188868560051b8701011115611bd357600080fd5b600094505b83851015611bf6578051835260019490940193918501918501611bd8565b50979650505050505050565b600060208284031215611c1457600080fd5b815180151581146114bf57600080fd5b600060208284031215611c3657600080fd5b5035919050565b60008060408385031215611c5057600080fd5b823591506020830135611c6281612109565b809150509250929050565b600060208284031215611c7f57600080fd5b81356001600160e01b0319811681146114bf57600080fd5b600060208284031215611ca957600080fd5b815167ffffffffffffffff80821115611cc157600080fd5b9083019060c08286031215611cd557600080fd5b611cdd611f7b565b82518152602083015160048110611cf357600080fd5b6020820152611d0460408401611aba565b6040820152606083015160608201526080830151608082015260a083015182811115611d2f57600080fd5b611d3b87828601611aca565b60a08301525095945050505050565b600060208284031215611d5c57600080fd5b5051919050565b60008060008060008060008060008060006101608c8e031215611d8557600080fd5b505089359b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e0810135965061010081013595506101208101359450610140013592509050565b60008251611de7818460208701612069565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611e29816017850160208801612069565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611e5a816028840160208801612069565b01602801949350505050565b6020815260008251806020840152611e85816040850160208701612069565b601f01601f19169190910160400192915050565b60208082526027908201527f537765657470616449444f3a2055736572277320706f7765722063616e2774206040820152666265207a65726f60c81b606082015260800190565b6020808252602e908201527f537765657470616449444f3a20547279696e6720746f20627579206d6f72652060408201526d7468656e20617661696c61626c6560901b606082015260800190565b6020808252602d908201527f537765657470616449444f3a20416d6f756e74206d757374206265206772656160408201526c746572207468656e207a65726f60981b606082015260800190565b60405160c0810167ffffffffffffffff81118282101715611f9e57611f9e6120f3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fcd57611fcd6120f3565b604052919050565b600067ffffffffffffffff821115611fef57611fef6120f3565b5060051b60200190565b6000821982111561200c5761200c6120c7565b500190565b60008261202e57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561204d5761204d6120c7565b500290565b600082821015612064576120646120c7565b500390565b60005b8381101561208457818101518382015260200161206c565b8381111561108d5750506000910152565b6000816120a4576120a46120c7565b506000190190565b60006000198214156120c0576120c06120c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146114e057600080fdfea26469706673582212205bc74aa2741fb8f4f701b6737992c0b39ad182eadef22c6b0cb56cb40b39899b64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5343,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "sweetpadTicket",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISweetpadTicket)8698"
      },
      {
        "astId": 5346,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "sweetpadFreezing",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISweetpadFreezing)8415"
      },
      {
        "astId": 5349,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "sweetpadNFTFreezing",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISweetpadNFTFreezing)8675"
      },
      {
        "astId": 5352,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "sweetpadLottery",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SweetpadLottery)6737"
      },
      {
        "astId": 5354,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "percentForLottery",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5356,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "percentForGuaranteedAllocation",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5358,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "totalPower",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5360,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "commission",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5362,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "tokensToSell",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5364,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "availableTokensToSell",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5366,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "tokenPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5368,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "allocationPerTicket",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5370,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "idoSaleStart",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5372,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "idoSecondSaleStart",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5374,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "idoSaleEnd",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5376,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "idoSecondSaleEnd",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5382,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "BUSD",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)1161"
      },
      {
        "astId": 5385,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "asset",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IERC20)1161"
      },
      {
        "astId": 5392,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "unlockedToSecondStage",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5396,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "tokensBoughtFirstStage",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5400,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "tokensBoughtSecondStage",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5402,
        "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
        "label": "powerForSecondStage",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1161": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISweetpadFreezing)8415": {
        "encoding": "inplace",
        "label": "contract ISweetpadFreezing",
        "numberOfBytes": "20"
      },
      "t_contract(ISweetpadNFTFreezing)8675": {
        "encoding": "inplace",
        "label": "contract ISweetpadNFTFreezing",
        "numberOfBytes": "20"
      },
      "t_contract(ISweetpadTicket)8698": {
        "encoding": "inplace",
        "label": "contract ISweetpadTicket",
        "numberOfBytes": "20"
      },
      "t_contract(SweetpadLottery)6737": {
        "encoding": "inplace",
        "label": "contract SweetpadLottery",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SweetpadIDO.sol:SweetpadIDO",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}