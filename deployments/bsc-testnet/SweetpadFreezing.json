{
  "address": "0x5196615624ea4A19E275Be4186fccdf330FC0A8D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "sweetToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "asset",
          "type": "uint8"
        }
      ],
      "name": "Freeze",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "MultiplierReseted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "asset",
          "type": "uint8"
        }
      ],
      "name": "UnFreeze",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freezeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "frozenUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "frozenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "asset",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period_",
          "type": "uint256"
        }
      ],
      "name": "freezeLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period_",
          "type": "uint256"
        }
      ],
      "name": "freezeSWT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline_",
          "type": "uint256"
        }
      ],
      "name": "freezeWithBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlocksPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "getFreezes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "frozenUntil",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "frozenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "power",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "asset",
              "type": "uint8"
            }
          ],
          "internalType": "struct ISweetpadFreezing.FreezeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period_",
          "type": "uint256"
        }
      ],
      "name": "getPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IApeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "setLPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplier_",
          "type": "uint256"
        }
      ],
      "name": "setMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweetToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFrozenLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFrozenSWT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "unfreezeLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "unfreezeSWT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x828edef9dd50f3d6235fb8f4990a6213583654a147e485bc9348dafc628272f2",
  "receipt": {
    "to": null,
    "from": "0xb2444FE0E53378E094736834067c1E2653ec3CAB",
    "contractAddress": "0x5196615624ea4A19E275Be4186fccdf330FC0A8D",
    "transactionIndex": 7,
    "gasUsed": "1910921",
    "logsBloom": "0x
    "blockHash": "0x38b780eb9ab55b6cb6e979c714990b03f0bcac1d82058df7d38cda9ce4902d4c",
    "transactionHash": "0x828edef9dd50f3d6235fb8f4990a6213583654a147e485bc9348dafc628272f2",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 22800988,
        "transactionHash": "0x828edef9dd50f3d6235fb8f4990a6213583654a147e485bc9348dafc628272f2",
        "address": "0x5196615624ea4A19E275Be4186fccdf330FC0A8D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b2444fe0e53378e094736834067c1e2653ec3cab"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x38b780eb9ab55b6cb6e979c714990b03f0bcac1d82058df7d38cda9ce4902d4c"
      }
    ],
    "blockNumber": 22800988,
    "cumulativeGasUsed": "2977010",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6147Bc9c226748B47BFeA290f58CD0E5dC2E5D72"
  ],
  "numDeployments": 3,
  "solcInputHash": "818c24a03a71d5abe5f9c3657ca0e865",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sweetToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"asset\",\"type\":\"uint8\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"MultiplierReseted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"asset\",\"type\":\"uint8\"}],\"name\":\"UnFreeze\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frozenUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"asset\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period_\",\"type\":\"uint256\"}],\"name\":\"freezeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period_\",\"type\":\"uint256\"}],\"name\":\"freezeSWT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"}],\"name\":\"freezeWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlocksPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getFreezes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"frozenUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"asset\",\"type\":\"uint8\"}],\"internalType\":\"struct ISweetpadFreezing.FreezeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period_\",\"type\":\"uint256\"}],\"name\":\"getPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier_\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweetToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozenLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozenSWT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"unfreezeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"unfreezeSWT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Contract module which provides functionality to freeze assets on contract and get allocation.\",\"kind\":\"dev\",\"methods\":{\"freezeLP(uint256,uint256)\":{\"params\":{\"amount_\":\"Amount of tokens to freeze\",\"period_\":\"Period of freezing\"}},\"freezeSWT(uint256,uint256)\":{\"params\":{\"amount_\":\"Amount of tokens to freeze\",\"period_\":\"Period of freezing\"}},\"freezeWithBNB(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"amountETHMin\":\"Min ETH amount desiered while adding liquidity\",\"amountOutMin\":\"The minimum amount of output tokens while swaping\",\"amountTokenMin\":\"Min token amount desiered while adding liquidity\",\"deadline_\":\"Timestamp after which the transaction will revert.\",\"period_\":\"Period of freezing\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setLPToken(address)\":{\"params\":{\"lpToken_\":\"Address of BNB/SWT LP\"}},\"setMultiplier(uint256)\":{\"params\":{\"multiplier_\":\"Shows how many times the power will be greater for  user while staking with LP\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unfreezeLP(uint256)\":{\"params\":{\"id_\":\"Id of freezing\"}},\"unfreezeSWT(uint256,uint256)\":{\"params\":{\"amount_\":\"Amount of tokens to unfreeze\",\"id_\":\"Id of freezing\"}}},\"stateVariables\":{\"freezeInfo\":{\"details\":\"The data for each account\"},\"multiplier\":{\"details\":\"Multiplier to colculate power while freezing with LP\"},\"totalPower\":{\"details\":\"The data for each account, returns totalPower\"}},\"title\":\"SweetpadFreezing\",\"version\":1},\"userdoc\":{\"events\":{\"Freeze(uint256,address,uint256,uint256,uint8)\":{\"notice\":\"Emitted when tokens are frozen\"},\"MultiplierReseted(uint256,uint256)\":{\"notice\":\"Emmited when multiplier reseted\"},\"UnFreeze(uint256,address,uint256,uint8)\":{\"notice\":\"Emitted when tokens are unFrozen\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initialize contract\"},\"freezeLP(uint256,uint256)\":{\"notice\":\"Freeze LP tokens\"},\"freezeSWT(uint256,uint256)\":{\"notice\":\"Freeze SWT tokens\"},\"freezeWithBNB(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Transfer BNB to contract and Freeze LP\"},\"setLPToken(address)\":{\"notice\":\"Set LP token\"},\"setMultiplier(uint256)\":{\"notice\":\"Set multiplier to calculate power while freezing with LP\"},\"unfreezeLP(uint256)\":{\"notice\":\"Unfreeze LP tokens\"},\"unfreezeSWT(uint256,uint256)\":{\"notice\":\"Unfreeze SWT tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SweetpadFreezing.sol\":\"SweetpadFreezing\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IApeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xad1c658327282f1f6af49b2574b2129115ada2b39b11668bfb23e0101e9ddab3\"},\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IApeRouter01.sol';\\n\\ninterface IApeRouter02 is IApeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7ddd238790bfcb7411a66327801568da451239142391806bfdf6d0f663b80cbc\"},\"contracts/SweetpadFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/ISweetpadFreezing.sol\\\";\\n\\n/**\\n * @title SweetpadFreezing\\n * @dev Contract module which provides functionality to freeze assets on contract and get allocation.\\n */\\ncontract SweetpadFreezing is ISweetpadFreezing, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint16 private constant DAYS_IN_YEAR = 100;\\n\\n    // TODO, we need to change BLOCKS_PER_DAY to a real one before deploying a mainnet\\n    uint256 private constant BLOCKS_PER_DAY = 1;\\n\\n    // Min period counted with blocks that user can freeze assets\\n    uint256 private constant MIN_FREEZE_PERIOD = 50 * BLOCKS_PER_DAY;\\n\\n    // Max period counted with blocks that user can freeze assets\\n    uint256 private constant MAX_FREEZE_PERIOD = 300 * BLOCKS_PER_DAY;\\n\\n    // TODO set correct mainnet addresses before deploying\\n    address public constant ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    /// @dev Multiplier to colculate power while freezing with LP\\n    uint256 public override multiplier;\\n\\n    uint256 public override totalFrozenSWT;\\n\\n    uint256 public override totalFrozenLP;\\n\\n    /// @dev The data for each account\\n    mapping(address => FreezeInfo[]) public override freezeInfo;\\n\\n    /// @dev The data for each account, returns totalPower\\n    mapping(address => uint256) public override totalPower;\\n\\n    IERC20 public override sweetToken;\\n    IERC20 public override lpToken;\\n\\n    IApeRouter02 public override router = IApeRouter02(ROUTER_ADDRESS);\\n\\n    /**\\n     * @notice Initialize contract\\n     */\\n    constructor(IERC20 sweetToken_) {\\n        require(address(sweetToken_) != address(0), \\\"SweetpadFreezing: Token address cant be Zero address\\\");\\n        sweetToken = sweetToken_;\\n    }\\n\\n    receive() external payable {\\n        return;\\n    }\\n\\n    fallback() external payable {\\n        return;\\n    }\\n\\n    /**\\n     * @notice Freeze SWT tokens\\n     * @param amount_ Amount of tokens to freeze\\n     * @param period_ Period of freezing\\n     */\\n    function freezeSWT(uint256 amount_, uint256 period_) external override {\\n        uint256 power = getPower(amount_, period_);\\n        require(power >= 10000 ether, \\\"SweetpadFreezing: At least 10.000 xSWT is required\\\");\\n        _freeze(msg.sender, amount_, period_, power, 0);\\n        _transferAssetsToContract(msg.sender, amount_, 0);\\n    }\\n\\n    /**\\n     * @notice Freeze LP tokens\\n     * @param amount_ Amount of tokens to freeze\\n     * @param period_ Period of freezing\\n     */\\n    function freezeLP(uint256 amount_, uint256 period_) external override { \\n        uint256 power = (getPower(amount_, period_) * multiplier) / 100;\\n        require(power >= 10000 ether, \\\"SweetpadFreezing: At least 10.000 xSWT is required\\\");\\n        _freeze(msg.sender, amount_, period_, power, 1);\\n        _transferAssetsToContract(msg.sender, amount_, 1);\\n    }\\n\\n    /**\\n     * @notice Transfer BNB to contract and Freeze LP\\n     * @param period_ Period of freezing\\n     * @param amountOutMin The minimum amount of output tokens while swaping\\n     * @param amountTokenMin Min token amount desiered while adding liquidity\\n     * @param amountETHMin Min ETH amount desiered while adding liquidity\\n     * @param deadline_ Timestamp after which the transaction will revert.\\n     */\\n    function freezeWithBNB(\\n        uint256 period_,\\n        uint256 amountOutMin,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline_\\n    ) external payable override {\\n        // slither-disable-next-line reentrancy-events\\n        uint256[] memory swapResult = _swapExactETHForSwtTokens(msg.value / 2, amountOutMin, deadline_);\\n\\n        uint256 tokenAmount = swapResult[1];\\n\\n        // slither-disable-next-line reentrancy-events\\n        uint256 liquidity = _addLiquidityETH(\\n            msg.sender,\\n            msg.value / 2,\\n            address(sweetToken),\\n            tokenAmount,\\n            amountTokenMin,\\n            amountETHMin,\\n            deadline_\\n        );\\n\\n        uint256 power = (getPower(liquidity, period_) * multiplier) / 100;\\n        require(power >= 10000 ether, \\\"SweetpadFreezing: At least 10.000 xSWT is required\\\");\\n        _freeze(msg.sender, liquidity, period_, power, 1);\\n    }\\n\\n    /**\\n     * @notice Unfreeze SWT tokens\\n     * @param id_ Id of freezing\\n     * @param amount_ Amount of tokens to unfreeze\\n     */\\n    function unfreezeSWT(uint256 id_, uint256 amount_) external override {\\n        FreezeInfo memory freezeData = freezeInfo[msg.sender][id_];\\n        require(freezeData.asset == 0, \\\"SweetpadFreezing: Wrong ID\\\");\\n        require(freezeData.frozenAmount != 0, \\\"SweetpadFreezing: Frozen amount is Zero\\\");\\n        require(freezeData.frozenAmount >= amount_, \\\"SweetpadFreezing: Insufficient frozen amount\\\");\\n        require(block.number >= freezeData.frozenUntil, \\\"SweetpadFreezing: Locked period dosn`t pass\\\");\\n        uint256 expectedPower = getPower(freezeData.frozenAmount - amount_, freezeData.period);\\n        require(\\n            expectedPower >= 10000 ether || expectedPower == 0,\\n            \\\"SweetpadFreezing: At least 10.000 xSWT is required\\\"\\n        );\\n        uint256 powerDelta = getPower(amount_, freezeData.period);\\n        _unfreezeSWT(msg.sender, id_, amount_, powerDelta);\\n    }\\n\\n    /**\\n     * @notice Unfreeze LP tokens\\n     * @param id_ Id of freezing\\n     */\\n    function unfreezeLP(uint256 id_) external override {\\n        FreezeInfo memory freezeData = freezeInfo[msg.sender][id_];\\n        require(freezeData.asset == 1, \\\"SweetpadFreezing: Wrong ID\\\");\\n        require(block.number >= freezeData.frozenUntil, \\\"SweetpadFreezing: Locked period dosn`t pass\\\");\\n        _unfreezeLP(msg.sender, id_);\\n    }\\n\\n    /**\\n     * @notice Set multiplier to calculate power while freezing with LP\\n     * @param multiplier_ Shows how many times the power will be greater for  user while staking with LP\\n     */\\n    function setMultiplier(uint256 multiplier_) external override onlyOwner {\\n        uint256 oldMultiplier = multiplier;\\n        require(multiplier_ != 0, \\\"SweetpadFreezing: Multiplier can't be zero\\\");\\n        multiplier = multiplier_;\\n        emit MultiplierReseted(oldMultiplier, multiplier);\\n    }\\n\\n    /**\\n     * @notice Set LP token\\n     * @param lpToken_ Address of BNB/SWT LP\\n     */\\n    function setLPToken(IERC20 lpToken_) external override onlyOwner {\\n        require(address(lpToken_) != address(0), \\\"SweetpadFreezing: LP token address cant be Zero address\\\");\\n        lpToken = lpToken_;\\n    }\\n\\n    function getFreezes(address account_) external view override returns (FreezeInfo[] memory) {\\n        return freezeInfo[account_];\\n    }\\n\\n    function getBlocksPerDay() external pure override returns (uint256) {\\n        return BLOCKS_PER_DAY;\\n    }\\n\\n    function getMinFreezePeriod() external pure override returns (uint256) {\\n        return MIN_FREEZE_PERIOD;\\n    }\\n\\n    function getMaxFreezePeriod() external pure override returns (uint256) {\\n        return MAX_FREEZE_PERIOD;\\n    }\\n\\n    function getPower(uint256 amount_, uint256 period_) public pure override returns (uint256 power) {\\n        require(MIN_FREEZE_PERIOD <= period_ && period_ <= MAX_FREEZE_PERIOD, \\\"SweetpadFreezing: Wrong period\\\");\\n        if (period_ == MIN_FREEZE_PERIOD) {\\n            power = amount_ / 2;\\n            return power;\\n        }\\n\\n        if (period_ > MIN_FREEZE_PERIOD && period_ <= DAYS_IN_YEAR * BLOCKS_PER_DAY) {\\n            power = (period_ * amount_) / DAYS_IN_YEAR / BLOCKS_PER_DAY;\\n            return power;\\n        }\\n\\n        power = ((period_ + DAYS_IN_YEAR * BLOCKS_PER_DAY) * amount_) / (DAYS_IN_YEAR * 2) / BLOCKS_PER_DAY;\\n        return power;\\n    }\\n\\n    function _freeze(\\n        address account_,\\n        uint256 amount_,\\n        uint256 period_,\\n        uint256 power_,\\n        uint8 asset_\\n    ) private {\\n        freezeInfo[account_].push(\\n            FreezeInfo({\\n                frozenUntil: block.number + period_,\\n                period: period_,\\n                frozenAmount: amount_,\\n                power: power_,\\n                asset: asset_\\n            })\\n        );\\n        totalPower[account_] += power_;\\n\\n        if (asset_ == 0) {\\n            totalFrozenSWT += amount_;\\n        } else {\\n            totalFrozenLP += amount_;\\n        }\\n\\n        emit Freeze(freezeInfo[account_].length - 1, account_, amount_, power_, asset_);\\n    }\\n\\n    function _transferAssetsToContract(\\n        address from,\\n        uint256 amount,\\n        uint8 asset_\\n    ) private {\\n        IERC20 asset = sweetToken;\\n        if (asset_ == 1) {\\n            asset = lpToken;\\n        }\\n        asset.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _unfreezeSWT(\\n        address account_,\\n        uint256 id_,\\n        uint256 amount_,\\n        uint256 power_\\n    ) private {\\n        if (amount_ == freezeInfo[account_][id_].frozenAmount) {\\n            totalPower[account_] -= freezeInfo[account_][id_].power;\\n            delete freezeInfo[account_][id_];\\n        } else {\\n            totalPower[account_] -= power_;\\n            freezeInfo[account_][id_].frozenAmount -= amount_;\\n            freezeInfo[account_][id_].power -= power_;\\n        }\\n\\n        totalFrozenSWT -= amount_;\\n\\n        emit UnFreeze(id_, account_, amount_, 0);\\n\\n        sweetToken.safeTransfer(account_, amount_);\\n    }\\n\\n    function _unfreezeLP(address account_, uint256 id_) private {\\n        FreezeInfo memory freezeData = freezeInfo[account_][id_];\\n        totalPower[account_] -= freezeData.power;\\n        uint256 amount = freezeData.frozenAmount;\\n        delete freezeInfo[account_][id_];\\n        totalFrozenLP -= amount;\\n\\n        emit UnFreeze(id_, account_, amount, 1);\\n\\n        lpToken.safeTransfer(account_, amount);\\n    }\\n\\n    function _transferBackUnusedAssets(\\n        address to,\\n        uint256 ethAmount,\\n        uint256 tokenAmount,\\n        uint256 ethAmountAdded,\\n        uint256 tokenAmountAdded\\n    ) private {\\n        uint256 ethToTransfer = ethAmount - ethAmountAdded;\\n        uint256 tokenToTransfer = tokenAmount - tokenAmountAdded;\\n\\n        if (ethToTransfer > 0) {\\n            payable(to).transfer(ethToTransfer);\\n        }\\n\\n        if (tokenToTransfer > 0) {\\n            sweetToken.safeTransfer(to, tokenToTransfer);\\n        }\\n    }\\n\\n    function _addLiquidityETH(\\n        address account,\\n        uint256 ethAmount,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256 deadline_\\n    ) private returns (uint256) {\\n        // slither-disable-next-line reentrancy-events\\n        sweetToken.safeApprove(ROUTER_ADDRESS, tokenAmount);\\n\\n        (uint256 amountTokenAdded, uint256 amountETHAdded, uint256 liquidity) = router.addLiquidityETH{\\n            value: ethAmount\\n        }(token, tokenAmount, amountTokenMin, amountETHMin, address(this), deadline_);\\n\\n        _transferBackUnusedAssets(account, ethAmount, tokenAmount, amountETHAdded, amountTokenAdded);\\n\\n        sweetToken.safeApprove(ROUTER_ADDRESS, 0);\\n\\n        return liquidity;\\n    }\\n\\n    function _swapExactETHForSwtTokens(\\n        uint256 amount,\\n        uint256 amountOutMin,\\n        uint256 deadline_\\n    ) private returns (uint256[] memory amounts) {\\n        address[] memory path = new address[](2);\\n\\n        // slither-disable-next-line naming-convention\\n        path[0] = router.WETH();\\n        path[1] = address(sweetToken);\\n\\n        amounts = router.swapExactETHForTokens{value: amount}(amountOutMin, path, address(this), deadline_);\\n        return amounts;\\n    }\\n}\\n\",\"keccak256\":\"0x8b4c4500d98efecaf8913b917b4eb641d5fdc87cdb4b36c325a663ee8653387d\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"ApeSwap-AMM-Periphery/contracts/interfaces/IApeRouter02.sol\\\";\\n\\ninterface ISweetpadFreezing {\\n    struct FreezeInfo {\\n        uint256 frozenUntil; // blockNumber when can be unfrozen\\n        uint256 period; // Number of blocks that tokens are frozen\\n        uint256 frozenAmount; // Amount of tokens are frozen\\n        uint256 power; // power of current frozen amount\\n        uint8 asset; // Variable to identify if the token is SWT or LP\\n    }\\n\\n    function freezeInfo(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint8\\n        );\\n\\n    function sweetToken() external view returns (IERC20);\\n\\n    function lpToken() external view returns (IERC20);\\n\\n    function router() external view returns (IApeRouter02);\\n\\n    function multiplier() external view returns (uint256);\\n\\n    function totalFrozenSWT() external view returns (uint256);\\n\\n    function totalFrozenLP() external view returns (uint256);\\n\\n    function getBlocksPerDay() external pure returns (uint256);\\n\\n    function getMinFreezePeriod() external pure returns (uint256);\\n\\n    function getMaxFreezePeriod() external pure returns (uint256);\\n\\n    function totalPower(address) external view returns (uint256);\\n\\n    function freezeSWT(uint256, uint256) external;\\n\\n    function freezeLP(uint256, uint256) external;\\n\\n    function freezeWithBNB(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external payable;\\n\\n    function unfreezeSWT(uint256, uint256) external;\\n\\n    function unfreezeLP(uint256) external;\\n\\n    function setMultiplier(uint256) external;\\n\\n    function setLPToken(IERC20) external;\\n\\n    function getFreezes(address) external view returns (FreezeInfo[] memory);\\n\\n    function getPower(uint256, uint256) external pure returns (uint256);\\n\\n    /// @notice Emitted when tokens are frozen\\n    event Freeze(uint256 id, address indexed account, uint256 amount, uint256 power, uint8 asset);\\n    /// @notice Emitted when tokens are unFrozen\\n    event UnFreeze(uint256 id, address indexed account, uint256 power, uint8 asset);\\n    /// @notice Emmited when multiplier reseted\\n    event MultiplierReseted(uint256 oldMultiplier, uint256 newMultiplier);\\n}\\n\",\"keccak256\":\"0xfafdc4d161bb2b5a1710a43a2974a2a9bc3a3bbe3725f733f8dbf68c1ec46bf2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600880546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d1790553480156200003757600080fd5b50604051620021f3380380620021f38339810160408190526200005a916200015c565b62000065336200010c565b6001600160a01b038116620000e65760405162461bcd60e51b815260206004820152603460248201527f5377656574706164467265657a696e673a20546f6b656e20616464726573732060448201527f63616e74206265205a65726f2061646472657373000000000000000000000000606482015260840160405180910390fd5b600680546001600160a01b0319166001600160a01b03929092169190911790556200018e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200016f57600080fd5b81516001600160a01b03811681146200018757600080fd5b9392505050565b612055806200019e6000396000f3fe6080604052600436106101435760003560e01c806389ea7e38116100b0578063aa716c7d1161006c578063aa716c7d1461038d578063ae8a3025146103a1578063b94a6dfe146103ec578063c64073f514610414578063f2fde38b1461042a578063f887ea401461044a57005b806389ea7e38146102cf5780638da5cb5b146102e2578063946280501461030057806394fa0aaf1461032057806399b5e48c14610340578063a88a0c301461036d57005b80633f96d53a116100ff5780633f96d53a1461020d5780635fcbd2851461022d578063641579a6146102655780636a678a9c14610285578063715018a6146102a557806387c5e813146102ba57005b8063051671ce1461014c5780630eacae841461017f57806314b4f2a8146101945780631b373437146101aa5780631b3ed722146101ca5780631f21138c146101e057005b3661014a57005b005b34801561015857600080fd5b5061016c610167366004611c7b565b61046a565b6040519081526020015b60405180910390f35b34801561018b57600080fd5b5061016c6105a5565b3480156101a057600080fd5b5061016c60035481565b3480156101b657600080fd5b5061014a6101c5366004611c49565b6105b8565b3480156101d657600080fd5b5061016c60015481565b3480156101ec57600080fd5b5061016c6101fb366004611afc565b60056020526000908152604090205481565b34801561021957600080fd5b5061014a610228366004611c7b565b6106aa565b34801561023957600080fd5b5060075461024d906001600160a01b031681565b6040516001600160a01b039091168152602001610176565b34801561027157600080fd5b5061014a610280366004611c49565b61071a565b34801561029157600080fd5b5061014a6102a0366004611afc565b6107e9565b3480156102b157600080fd5b5061014a6108b1565b3480156102c657600080fd5b5061016c6108e7565b61014a6102dd366004611ccb565b6108f6565b3480156102ee57600080fd5b506000546001600160a01b031661024d565b34801561030c57600080fd5b5061014a61031b366004611c7b565b6109c2565b34801561032c57600080fd5b5060065461024d906001600160a01b031681565b34801561034c57600080fd5b5061036061035b366004611afc565b610be7565b6040516101769190611d22565b34801561037957600080fd5b5061014a610388366004611c7b565b610c8b565b34801561039957600080fd5b50600161016c565b3480156103ad57600080fd5b506103c16103bc366004611b36565b610cdd565b60408051958652602086019490945292840191909152606083015260ff16608082015260a001610176565b3480156103f857600080fd5b5061024d737a250d5630b4cf539739df2c5dacb4c659f2488d81565b34801561042057600080fd5b5061016c60025481565b34801561043657600080fd5b5061014a610445366004611afc565b610d2e565b34801561045657600080fd5b5060085461024d906001600160a01b031681565b60008161047960016032611f66565b11158015610493575061048f600161012c611f66565b8211155b6104e45760405162461bcd60e51b815260206004820152601e60248201527f5377656574706164467265657a696e673a2057726f6e6720706572696f64000060448201526064015b60405180910390fd5b6104f060016032611f66565b82141561050957610502600284611f1a565b905061059f565b61051560016032611f66565b8211801561052e575061052a60016064611f66565b8211155b1561055557600160646105418585611f66565b61054b9190611f1a565b6105029190611f1a565b600161056360646002611f3c565b61ffff168461057460016064611f66565b61057e9086611f02565b6105889190611f66565b6105929190611f1a565b61059c9190611f1a565b90505b92915050565b60006105b360016032611f66565b905090565b3360009081526004602052604081208054839081106105d9576105d9611fde565b60009182526020918290206040805160a08101825260059093029091018054835260018082015494840194909452600281015491830191909152600381015460608301526004015460ff16608082018190529092501461067b5760405162461bcd60e51b815260206004820152601a60248201527f5377656574706164467265657a696e673a2057726f6e6720494400000000000060448201526064016104db565b805143101561069c5760405162461bcd60e51b81526004016104db90611e18565b6106a63383610dc9565b5050565b600060646001546106bb858561046a565b6106c59190611f66565b6106cf9190611f1a565b905069021e19e0c9bab24000008110156106fb5760405162461bcd60e51b81526004016104db90611dc6565b610709338484846001610f4d565b610715338460016110cd565b505050565b6000546001600160a01b031633146107445760405162461bcd60e51b81526004016104db90611e63565b600154816107a75760405162461bcd60e51b815260206004820152602a60248201527f5377656574706164467265657a696e673a204d756c7469706c6965722063616e6044820152692774206265207a65726f60b01b60648201526084016104db565b600182905560408051828152602081018490527fcec6f475a0d76b3c6053fe73249cd80c6682e2fc172909e742bd1b8c050bba73910160405180910390a15050565b6000546001600160a01b031633146108135760405162461bcd60e51b81526004016104db90611e63565b6001600160a01b03811661088f5760405162461bcd60e51b815260206004820152603760248201527f5377656574706164467265657a696e673a204c5020746f6b656e20616464726560448201527f73732063616e74206265205a65726f206164647265737300000000000000000060648201526084016104db565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108db5760405162461bcd60e51b81526004016104db90611e63565b6108e56000611108565b565b60006105b3600161012c611f66565b600061090d610906600234611f1a565b8684611158565b905060008160018151811061092457610924611fde565b602002602001015190506000610956336002346109419190611f1a565b6006546001600160a01b0316858a8a8a6112e3565b905060006064600154610969848c61046a565b6109739190611f66565b61097d9190611f1a565b905069021e19e0c9bab24000008110156109a95760405162461bcd60e51b81526004016104db90611dc6565b6109b733838b846001610f4d565b505050505050505050565b3360009081526004602052604081208054849081106109e3576109e3611fde565b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301939093526002830154908201526003820154606082015260049091015460ff166080820181905290915015610a835760405162461bcd60e51b815260206004820152601a60248201527f5377656574706164467265657a696e673a2057726f6e6720494400000000000060448201526064016104db565b6040810151610ae45760405162461bcd60e51b815260206004820152602760248201527f5377656574706164467265657a696e673a2046726f7a656e20616d6f756e74206044820152666973205a65726f60c81b60648201526084016104db565b8181604001511015610b4d5760405162461bcd60e51b815260206004820152602c60248201527f5377656574706164467265657a696e673a20496e73756666696369656e74206660448201526b1c9bde995b88185b5bdd5b9d60a21b60648201526084016104db565b8051431015610b6e5760405162461bcd60e51b81526004016104db90611e18565b6000610b8d838360400151610b839190611f85565b836020015161046a565b905069021e19e0c9bab240000081101580610ba6575080155b610bc25760405162461bcd60e51b81526004016104db90611dc6565b6000610bd284846020015161046a565b9050610be033868684611408565b5050505050565b6001600160a01b0381166000908152600460209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610c805760008481526020908190206040805160a081018252600586029092018054835260018082015484860152600282015492840192909252600381015460608401526004015460ff1660808301529083529092019101610c1f565b505050509050919050565b6000610c97838361046a565b905069021e19e0c9bab2400000811015610cc35760405162461bcd60e51b81526004016104db90611dc6565b610cd1338484846000610f4d565b610715338460006110cd565b60046020528160005260406000208181548110610cf957600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929550909350919060ff1685565b6000546001600160a01b03163314610d585760405162461bcd60e51b81526004016104db90611e63565b6001600160a01b038116610dbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104db565b610dc681611108565b50565b6001600160a01b0382166000908152600460205260408120805483908110610df357610df3611fde565b600091825260208083206040805160a08101825260059485029092018054835260018101548385015260028101548383015260038101546060840181905260049091015460ff1660808401526001600160a01b0389168652939092529083208054919450919290610e65908490611f85565b90915550506040808201516001600160a01b0385166000908152600460205291909120805484908110610e9a57610e9a611fde565b600091825260208220600590910201818155600181018290556002810182905560038082018390556004909101805460ff191690558054839290610edf908490611f85565b9091555050604080518481526020810183905260018183015290516001600160a01b038616917fed7dbff500dc30ea10e708531d2884c45513387230d3516204441599c7bf404b919081900360600190a2600754610f47906001600160a01b0316858361166a565b50505050565b6001600160a01b03851660009081526004602052604090819020815160a081019092529080610f7c8643611f02565b815260208082018790526040808301899052606080840188905260ff878116608095860152865460018082018955600098895285892088516005938402909101908155888701519181019190915587850151600282015592870151600384015595909401516004909101805460ff191691909416179092556001600160a01b03891684529190915281208054849290611016908490611f02565b909155505060ff81166110405783600260008282546110359190611f02565b909155506110589050565b83600360008282546110529190611f02565b90915550505b6001600160a01b0385166000818152600460205260409020547fa9b2b20ae2cd3e92c9c0d040b69f8eb7ff559f71e759697ee005e61021ae17179061109f90600190611f85565b6040805191825260208201889052810185905260ff8416606082015260800160405180910390a25050505050565b6006546001600160a01b031660ff8216600114156110f357506007546001600160a01b03165b610f476001600160a01b0382168530866116cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516002808252606080830184529260009291906020830190803683375050600854604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c464892506004808301926020929190829003018186803b1580156111c157600080fd5b505afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190611b19565b8160008151811061120c5761120c611fde565b6001600160a01b03928316602091820292909201015260065482519116908290600190811061123d5761123d611fde565b6001600160a01b039283166020918202929092010152600854604051637ff36ab560e01b8152911690637ff36ab5908790611282908890869030908a90600401611e98565b6000604051808303818588803b15801561129b57600080fd5b505af11580156112af573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526112d89190810190611b62565b9150505b9392505050565b600654600090611311906001600160a01b0316737a250d5630b4cf539739df2c5dacb4c659f2488d87611705565b60085460405163f305d71960e01b81526001600160a01b03888116600483015260248201889052604482018790526064820186905230608483015260a48201859052600092839283929091169063f305d719908c9060c4016060604051808303818588803b15801561138257600080fd5b505af1158015611396573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113bb9190611c9d565b9250925092506113ce8b8b8a8587611829565b6006546113fa906001600160a01b0316737a250d5630b4cf539739df2c5dacb4c659f2488d6000611705565b9a9950505050505050505050565b6001600160a01b038416600090815260046020526040902080548490811061143257611432611fde565b906000526020600020906005020160020154821415611522576001600160a01b038416600090815260046020526040902080548490811061147557611475611fde565b90600052602060002090600502016003015460056000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546114bb9190611f85565b90915550506001600160a01b03841660009081526004602052604090208054849081106114ea576114ea611fde565b60009182526020822060059091020181815560018101829055600281018290556003810191909155600401805460ff191690556115f4565b6001600160a01b0384166000908152600560205260408120805483929061154a908490611f85565b90915550506001600160a01b038416600090815260046020526040902080548391908590811061157c5761157c611fde565b9060005260206000209060050201600201600082825461159c9190611f85565b90915550506001600160a01b03841660009081526004602052604090208054829190859081106115ce576115ce611fde565b906000526020600020906005020160030160008282546115ee9190611f85565b90915550505b81600260008282546116069190611f85565b9091555050604080518481526020810184905260008183015290516001600160a01b038616917fed7dbff500dc30ea10e708531d2884c45513387230d3516204441599c7bf404b919081900360600190a2600654610f47906001600160a01b031685845b6040516001600160a01b03831660248201526044810182905261071590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118a9565b6040516001600160a01b0380851660248301528316604482015260648101829052610f479085906323b872dd60e01b90608401611696565b80158061178e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c9190611c62565b155b6117f95760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104db565b6040516001600160a01b03831660248201526044810182905261071590849063095ea7b360e01b90606401611696565b60006118358386611f85565b905060006118438386611f85565b90508115611883576040516001600160a01b0388169083156108fc029084906000818181858888f19350505050158015611881573d6000803e3d6000fd5b505b80156118a0576006546118a0906001600160a01b0316888361166a565b50505050505050565b60006118fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661197b9092919063ffffffff16565b805190915015610715578080602001905181019061191c9190611c27565b6107155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104db565b606061198a8484600085611992565b949350505050565b6060824710156119f35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104db565b6001600160a01b0385163b611a4a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104db565b600080866001600160a01b03168587604051611a669190611d06565b60006040518083038185875af1925050503d8060008114611aa3576040519150601f19603f3d011682016040523d82523d6000602084013e611aa8565b606091505b5091509150611ab8828286611ac3565b979650505050505050565b60608315611ad25750816112dc565b825115611ae25782518084602001fd5b8160405162461bcd60e51b81526004016104db9190611d93565b600060208284031215611b0e57600080fd5b81356112dc8161200a565b600060208284031215611b2b57600080fd5b81516112dc8161200a565b60008060408385031215611b4957600080fd5b8235611b548161200a565b946020939093013593505050565b60006020808385031215611b7557600080fd5b825167ffffffffffffffff80821115611b8d57600080fd5b818501915085601f830112611ba157600080fd5b815181811115611bb357611bb3611ff4565b8060051b604051601f19603f83011681018181108582111715611bd857611bd8611ff4565b604052828152858101935084860182860187018a1015611bf757600080fd5b600095505b83861015611c1a578051855260019590950194938601938601611bfc565b5098975050505050505050565b600060208284031215611c3957600080fd5b815180151581146112dc57600080fd5b600060208284031215611c5b57600080fd5b5035919050565b600060208284031215611c7457600080fd5b5051919050565b60008060408385031215611c8e57600080fd5b50508035926020909101359150565b600080600060608486031215611cb257600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215611ce357600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008251611d18818460208701611f9c565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015611d8657815180518552868101518786015285810151868601526060808201519086015260809081015160ff169085015260a09093019290850190600101611d3f565b5091979650505050505050565b6020815260008251806020840152611db2816040850160208701611f9c565b601f01601f19169190910160400192915050565b60208082526032908201527f5377656574706164467265657a696e673a204174206c656173742031302e30306040820152710c081e14d5d5081a5cc81c995c5d5a5c995960721b606082015260800190565b6020808252602b908201527f5377656574706164467265657a696e673a204c6f636b656420706572696f642060408201526a646f736e6074207061737360a81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060808201868352602060808185015281875180845260a086019150828901935060005b81811015611ee25784516001600160a01b031683529383019391830191600101611ebd565b50506001600160a01b039690961660408501525050506060015292915050565b60008219821115611f1557611f15611fc8565b500190565b600082611f3757634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff80831681851681830481118215151615611f5d57611f5d611fc8565b02949350505050565b6000816000190483118215151615611f8057611f80611fc8565b500290565b600082821015611f9757611f97611fc8565b500390565b60005b83811015611fb7578181015183820152602001611f9f565b83811115610f475750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dc657600080fdfea26469706673582212207fc814ea8b0c57c10787f6bab1b2b31d4532fb2e0619503b557a1976171cd52964736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101435760003560e01c806389ea7e38116100b0578063aa716c7d1161006c578063aa716c7d1461038d578063ae8a3025146103a1578063b94a6dfe146103ec578063c64073f514610414578063f2fde38b1461042a578063f887ea401461044a57005b806389ea7e38146102cf5780638da5cb5b146102e2578063946280501461030057806394fa0aaf1461032057806399b5e48c14610340578063a88a0c301461036d57005b80633f96d53a116100ff5780633f96d53a1461020d5780635fcbd2851461022d578063641579a6146102655780636a678a9c14610285578063715018a6146102a557806387c5e813146102ba57005b8063051671ce1461014c5780630eacae841461017f57806314b4f2a8146101945780631b373437146101aa5780631b3ed722146101ca5780631f21138c146101e057005b3661014a57005b005b34801561015857600080fd5b5061016c610167366004611c7b565b61046a565b6040519081526020015b60405180910390f35b34801561018b57600080fd5b5061016c6105a5565b3480156101a057600080fd5b5061016c60035481565b3480156101b657600080fd5b5061014a6101c5366004611c49565b6105b8565b3480156101d657600080fd5b5061016c60015481565b3480156101ec57600080fd5b5061016c6101fb366004611afc565b60056020526000908152604090205481565b34801561021957600080fd5b5061014a610228366004611c7b565b6106aa565b34801561023957600080fd5b5060075461024d906001600160a01b031681565b6040516001600160a01b039091168152602001610176565b34801561027157600080fd5b5061014a610280366004611c49565b61071a565b34801561029157600080fd5b5061014a6102a0366004611afc565b6107e9565b3480156102b157600080fd5b5061014a6108b1565b3480156102c657600080fd5b5061016c6108e7565b61014a6102dd366004611ccb565b6108f6565b3480156102ee57600080fd5b506000546001600160a01b031661024d565b34801561030c57600080fd5b5061014a61031b366004611c7b565b6109c2565b34801561032c57600080fd5b5060065461024d906001600160a01b031681565b34801561034c57600080fd5b5061036061035b366004611afc565b610be7565b6040516101769190611d22565b34801561037957600080fd5b5061014a610388366004611c7b565b610c8b565b34801561039957600080fd5b50600161016c565b3480156103ad57600080fd5b506103c16103bc366004611b36565b610cdd565b60408051958652602086019490945292840191909152606083015260ff16608082015260a001610176565b3480156103f857600080fd5b5061024d737a250d5630b4cf539739df2c5dacb4c659f2488d81565b34801561042057600080fd5b5061016c60025481565b34801561043657600080fd5b5061014a610445366004611afc565b610d2e565b34801561045657600080fd5b5060085461024d906001600160a01b031681565b60008161047960016032611f66565b11158015610493575061048f600161012c611f66565b8211155b6104e45760405162461bcd60e51b815260206004820152601e60248201527f5377656574706164467265657a696e673a2057726f6e6720706572696f64000060448201526064015b60405180910390fd5b6104f060016032611f66565b82141561050957610502600284611f1a565b905061059f565b61051560016032611f66565b8211801561052e575061052a60016064611f66565b8211155b1561055557600160646105418585611f66565b61054b9190611f1a565b6105029190611f1a565b600161056360646002611f3c565b61ffff168461057460016064611f66565b61057e9086611f02565b6105889190611f66565b6105929190611f1a565b61059c9190611f1a565b90505b92915050565b60006105b360016032611f66565b905090565b3360009081526004602052604081208054839081106105d9576105d9611fde565b60009182526020918290206040805160a08101825260059093029091018054835260018082015494840194909452600281015491830191909152600381015460608301526004015460ff16608082018190529092501461067b5760405162461bcd60e51b815260206004820152601a60248201527f5377656574706164467265657a696e673a2057726f6e6720494400000000000060448201526064016104db565b805143101561069c5760405162461bcd60e51b81526004016104db90611e18565b6106a63383610dc9565b5050565b600060646001546106bb858561046a565b6106c59190611f66565b6106cf9190611f1a565b905069021e19e0c9bab24000008110156106fb5760405162461bcd60e51b81526004016104db90611dc6565b610709338484846001610f4d565b610715338460016110cd565b505050565b6000546001600160a01b031633146107445760405162461bcd60e51b81526004016104db90611e63565b600154816107a75760405162461bcd60e51b815260206004820152602a60248201527f5377656574706164467265657a696e673a204d756c7469706c6965722063616e6044820152692774206265207a65726f60b01b60648201526084016104db565b600182905560408051828152602081018490527fcec6f475a0d76b3c6053fe73249cd80c6682e2fc172909e742bd1b8c050bba73910160405180910390a15050565b6000546001600160a01b031633146108135760405162461bcd60e51b81526004016104db90611e63565b6001600160a01b03811661088f5760405162461bcd60e51b815260206004820152603760248201527f5377656574706164467265657a696e673a204c5020746f6b656e20616464726560448201527f73732063616e74206265205a65726f206164647265737300000000000000000060648201526084016104db565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108db5760405162461bcd60e51b81526004016104db90611e63565b6108e56000611108565b565b60006105b3600161012c611f66565b600061090d610906600234611f1a565b8684611158565b905060008160018151811061092457610924611fde565b602002602001015190506000610956336002346109419190611f1a565b6006546001600160a01b0316858a8a8a6112e3565b905060006064600154610969848c61046a565b6109739190611f66565b61097d9190611f1a565b905069021e19e0c9bab24000008110156109a95760405162461bcd60e51b81526004016104db90611dc6565b6109b733838b846001610f4d565b505050505050505050565b3360009081526004602052604081208054849081106109e3576109e3611fde565b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301939093526002830154908201526003820154606082015260049091015460ff166080820181905290915015610a835760405162461bcd60e51b815260206004820152601a60248201527f5377656574706164467265657a696e673a2057726f6e6720494400000000000060448201526064016104db565b6040810151610ae45760405162461bcd60e51b815260206004820152602760248201527f5377656574706164467265657a696e673a2046726f7a656e20616d6f756e74206044820152666973205a65726f60c81b60648201526084016104db565b8181604001511015610b4d5760405162461bcd60e51b815260206004820152602c60248201527f5377656574706164467265657a696e673a20496e73756666696369656e74206660448201526b1c9bde995b88185b5bdd5b9d60a21b60648201526084016104db565b8051431015610b6e5760405162461bcd60e51b81526004016104db90611e18565b6000610b8d838360400151610b839190611f85565b836020015161046a565b905069021e19e0c9bab240000081101580610ba6575080155b610bc25760405162461bcd60e51b81526004016104db90611dc6565b6000610bd284846020015161046a565b9050610be033868684611408565b5050505050565b6001600160a01b0381166000908152600460209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610c805760008481526020908190206040805160a081018252600586029092018054835260018082015484860152600282015492840192909252600381015460608401526004015460ff1660808301529083529092019101610c1f565b505050509050919050565b6000610c97838361046a565b905069021e19e0c9bab2400000811015610cc35760405162461bcd60e51b81526004016104db90611dc6565b610cd1338484846000610f4d565b610715338460006110cd565b60046020528160005260406000208181548110610cf957600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929550909350919060ff1685565b6000546001600160a01b03163314610d585760405162461bcd60e51b81526004016104db90611e63565b6001600160a01b038116610dbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104db565b610dc681611108565b50565b6001600160a01b0382166000908152600460205260408120805483908110610df357610df3611fde565b600091825260208083206040805160a08101825260059485029092018054835260018101548385015260028101548383015260038101546060840181905260049091015460ff1660808401526001600160a01b0389168652939092529083208054919450919290610e65908490611f85565b90915550506040808201516001600160a01b0385166000908152600460205291909120805484908110610e9a57610e9a611fde565b600091825260208220600590910201818155600181018290556002810182905560038082018390556004909101805460ff191690558054839290610edf908490611f85565b9091555050604080518481526020810183905260018183015290516001600160a01b038616917fed7dbff500dc30ea10e708531d2884c45513387230d3516204441599c7bf404b919081900360600190a2600754610f47906001600160a01b0316858361166a565b50505050565b6001600160a01b03851660009081526004602052604090819020815160a081019092529080610f7c8643611f02565b815260208082018790526040808301899052606080840188905260ff878116608095860152865460018082018955600098895285892088516005938402909101908155888701519181019190915587850151600282015592870151600384015595909401516004909101805460ff191691909416179092556001600160a01b03891684529190915281208054849290611016908490611f02565b909155505060ff81166110405783600260008282546110359190611f02565b909155506110589050565b83600360008282546110529190611f02565b90915550505b6001600160a01b0385166000818152600460205260409020547fa9b2b20ae2cd3e92c9c0d040b69f8eb7ff559f71e759697ee005e61021ae17179061109f90600190611f85565b6040805191825260208201889052810185905260ff8416606082015260800160405180910390a25050505050565b6006546001600160a01b031660ff8216600114156110f357506007546001600160a01b03165b610f476001600160a01b0382168530866116cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516002808252606080830184529260009291906020830190803683375050600854604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c464892506004808301926020929190829003018186803b1580156111c157600080fd5b505afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190611b19565b8160008151811061120c5761120c611fde565b6001600160a01b03928316602091820292909201015260065482519116908290600190811061123d5761123d611fde565b6001600160a01b039283166020918202929092010152600854604051637ff36ab560e01b8152911690637ff36ab5908790611282908890869030908a90600401611e98565b6000604051808303818588803b15801561129b57600080fd5b505af11580156112af573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526112d89190810190611b62565b9150505b9392505050565b600654600090611311906001600160a01b0316737a250d5630b4cf539739df2c5dacb4c659f2488d87611705565b60085460405163f305d71960e01b81526001600160a01b03888116600483015260248201889052604482018790526064820186905230608483015260a48201859052600092839283929091169063f305d719908c9060c4016060604051808303818588803b15801561138257600080fd5b505af1158015611396573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113bb9190611c9d565b9250925092506113ce8b8b8a8587611829565b6006546113fa906001600160a01b0316737a250d5630b4cf539739df2c5dacb4c659f2488d6000611705565b9a9950505050505050505050565b6001600160a01b038416600090815260046020526040902080548490811061143257611432611fde565b906000526020600020906005020160020154821415611522576001600160a01b038416600090815260046020526040902080548490811061147557611475611fde565b90600052602060002090600502016003015460056000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546114bb9190611f85565b90915550506001600160a01b03841660009081526004602052604090208054849081106114ea576114ea611fde565b60009182526020822060059091020181815560018101829055600281018290556003810191909155600401805460ff191690556115f4565b6001600160a01b0384166000908152600560205260408120805483929061154a908490611f85565b90915550506001600160a01b038416600090815260046020526040902080548391908590811061157c5761157c611fde565b9060005260206000209060050201600201600082825461159c9190611f85565b90915550506001600160a01b03841660009081526004602052604090208054829190859081106115ce576115ce611fde565b906000526020600020906005020160030160008282546115ee9190611f85565b90915550505b81600260008282546116069190611f85565b9091555050604080518481526020810184905260008183015290516001600160a01b038616917fed7dbff500dc30ea10e708531d2884c45513387230d3516204441599c7bf404b919081900360600190a2600654610f47906001600160a01b031685845b6040516001600160a01b03831660248201526044810182905261071590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118a9565b6040516001600160a01b0380851660248301528316604482015260648101829052610f479085906323b872dd60e01b90608401611696565b80158061178e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c9190611c62565b155b6117f95760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104db565b6040516001600160a01b03831660248201526044810182905261071590849063095ea7b360e01b90606401611696565b60006118358386611f85565b905060006118438386611f85565b90508115611883576040516001600160a01b0388169083156108fc029084906000818181858888f19350505050158015611881573d6000803e3d6000fd5b505b80156118a0576006546118a0906001600160a01b0316888361166a565b50505050505050565b60006118fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661197b9092919063ffffffff16565b805190915015610715578080602001905181019061191c9190611c27565b6107155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104db565b606061198a8484600085611992565b949350505050565b6060824710156119f35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104db565b6001600160a01b0385163b611a4a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104db565b600080866001600160a01b03168587604051611a669190611d06565b60006040518083038185875af1925050503d8060008114611aa3576040519150601f19603f3d011682016040523d82523d6000602084013e611aa8565b606091505b5091509150611ab8828286611ac3565b979650505050505050565b60608315611ad25750816112dc565b825115611ae25782518084602001fd5b8160405162461bcd60e51b81526004016104db9190611d93565b600060208284031215611b0e57600080fd5b81356112dc8161200a565b600060208284031215611b2b57600080fd5b81516112dc8161200a565b60008060408385031215611b4957600080fd5b8235611b548161200a565b946020939093013593505050565b60006020808385031215611b7557600080fd5b825167ffffffffffffffff80821115611b8d57600080fd5b818501915085601f830112611ba157600080fd5b815181811115611bb357611bb3611ff4565b8060051b604051601f19603f83011681018181108582111715611bd857611bd8611ff4565b604052828152858101935084860182860187018a1015611bf757600080fd5b600095505b83861015611c1a578051855260019590950194938601938601611bfc565b5098975050505050505050565b600060208284031215611c3957600080fd5b815180151581146112dc57600080fd5b600060208284031215611c5b57600080fd5b5035919050565b600060208284031215611c7457600080fd5b5051919050565b60008060408385031215611c8e57600080fd5b50508035926020909101359150565b600080600060608486031215611cb257600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215611ce357600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008251611d18818460208701611f9c565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015611d8657815180518552868101518786015285810151868601526060808201519086015260809081015160ff169085015260a09093019290850190600101611d3f565b5091979650505050505050565b6020815260008251806020840152611db2816040850160208701611f9c565b601f01601f19169190910160400192915050565b60208082526032908201527f5377656574706164467265657a696e673a204174206c656173742031302e30306040820152710c081e14d5d5081a5cc81c995c5d5a5c995960721b606082015260800190565b6020808252602b908201527f5377656574706164467265657a696e673a204c6f636b656420706572696f642060408201526a646f736e6074207061737360a81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060808201868352602060808185015281875180845260a086019150828901935060005b81811015611ee25784516001600160a01b031683529383019391830191600101611ebd565b50506001600160a01b039690961660408501525050506060015292915050565b60008219821115611f1557611f15611fc8565b500190565b600082611f3757634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff80831681851681830481118215151615611f5d57611f5d611fc8565b02949350505050565b6000816000190483118215151615611f8057611f80611fc8565b500290565b600082821015611f9757611f97611fc8565b500390565b60005b83811015611fb7578181015183820152602001611f9f565b83811115610f475750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dc657600080fdfea26469706673582212207fc814ea8b0c57c10787f6bab1b2b31d4532fb2e0619503b557a1976171cd52964736f6c63430008070033",
  "devdoc": {
    "details": "Contract module which provides functionality to freeze assets on contract and get allocation.",
    "kind": "dev",
    "methods": {
      "freezeLP(uint256,uint256)": {
        "params": {
          "amount_": "Amount of tokens to freeze",
          "period_": "Period of freezing"
        }
      },
      "freezeSWT(uint256,uint256)": {
        "params": {
          "amount_": "Amount of tokens to freeze",
          "period_": "Period of freezing"
        }
      },
      "freezeWithBNB(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "amountETHMin": "Min ETH amount desiered while adding liquidity",
          "amountOutMin": "The minimum amount of output tokens while swaping",
          "amountTokenMin": "Min token amount desiered while adding liquidity",
          "deadline_": "Timestamp after which the transaction will revert.",
          "period_": "Period of freezing"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setLPToken(address)": {
        "params": {
          "lpToken_": "Address of BNB/SWT LP"
        }
      },
      "setMultiplier(uint256)": {
        "params": {
          "multiplier_": "Shows how many times the power will be greater for  user while staking with LP"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unfreezeLP(uint256)": {
        "params": {
          "id_": "Id of freezing"
        }
      },
      "unfreezeSWT(uint256,uint256)": {
        "params": {
          "amount_": "Amount of tokens to unfreeze",
          "id_": "Id of freezing"
        }
      }
    },
    "stateVariables": {
      "freezeInfo": {
        "details": "The data for each account"
      },
      "multiplier": {
        "details": "Multiplier to colculate power while freezing with LP"
      },
      "totalPower": {
        "details": "The data for each account, returns totalPower"
      }
    },
    "title": "SweetpadFreezing",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Freeze(uint256,address,uint256,uint256,uint8)": {
        "notice": "Emitted when tokens are frozen"
      },
      "MultiplierReseted(uint256,uint256)": {
        "notice": "Emmited when multiplier reseted"
      },
      "UnFreeze(uint256,address,uint256,uint8)": {
        "notice": "Emitted when tokens are unFrozen"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initialize contract"
      },
      "freezeLP(uint256,uint256)": {
        "notice": "Freeze LP tokens"
      },
      "freezeSWT(uint256,uint256)": {
        "notice": "Freeze SWT tokens"
      },
      "freezeWithBNB(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Transfer BNB to contract and Freeze LP"
      },
      "setLPToken(address)": {
        "notice": "Set LP token"
      },
      "setMultiplier(uint256)": {
        "notice": "Set multiplier to calculate power while freezing with LP"
      },
      "unfreezeLP(uint256)": {
        "notice": "Unfreeze LP tokens"
      },
      "unfreezeSWT(uint256,uint256)": {
        "notice": "Unfreeze SWT tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4366,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "multiplier",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4369,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "totalFrozenSWT",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4372,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "totalFrozenLP",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4380,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "freezeInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(FreezeInfo)8243_storage)dyn_storage)"
      },
      {
        "astId": 4386,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "totalPower",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4390,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "sweetToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)1161"
      },
      {
        "astId": 4394,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "lpToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)1161"
      },
      {
        "astId": 4401,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "router",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IApeRouter02)3802"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FreezeInfo)8243_storage)dyn_storage": {
        "base": "t_struct(FreezeInfo)8243_storage",
        "encoding": "dynamic_array",
        "label": "struct ISweetpadFreezing.FreezeInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IApeRouter02)3802": {
        "encoding": "inplace",
        "label": "contract IApeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1161": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(FreezeInfo)8243_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISweetpadFreezing.FreezeInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(FreezeInfo)8243_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FreezeInfo)8243_storage": {
        "encoding": "inplace",
        "label": "struct ISweetpadFreezing.FreezeInfo",
        "members": [
          {
            "astId": 8234,
            "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
            "label": "frozenUntil",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8236,
            "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
            "label": "period",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8238,
            "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
            "label": "frozenAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8240,
            "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
            "label": "power",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8242,
            "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
            "label": "asset",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}