{
  "address": "0x9B704206Bde93fa3b4Bd903b2634FfFa2f4084cf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "sweetToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Freeze",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "UnFreeze",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freezeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "frozenUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "frozenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period_",
          "type": "uint256"
        }
      ],
      "name": "freezeSWT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlocksPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "getFreezes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "frozenUntil",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "frozenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISweetpadFreezing.FreezeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period_",
          "type": "uint256"
        }
      ],
      "name": "getPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweetToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "unfreezeSWT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ed081e233c4b597afd01b1d85b2bfe0cbd50fe73cc428b3123620d611a2fc96",
  "receipt": {
    "to": null,
    "from": "0x4bd5b80ADb4eEC52e58b46c8748C6e9B4524CcA8",
    "contractAddress": "0x9B704206Bde93fa3b4Bd903b2634FfFa2f4084cf",
    "transactionIndex": 0,
    "gasUsed": "841485",
    "logsBloom": "0x
    "blockHash": "0x901d8f2807c778d35c05f348b7021190d69747fcb5d503fa37af3ba639f03ab8",
    "transactionHash": "0x8ed081e233c4b597afd01b1d85b2bfe0cbd50fe73cc428b3123620d611a2fc96",
    "logs": [],
    "blockNumber": 19771355,
    "cumulativeGasUsed": "841485",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5Ef25C822e0C8e2df768cBF5d70B8A5a025cA810"
  ],
  "numDeployments": 1,
  "solcInputHash": "3c6f06bdfe977e603b23d854fbb62806",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sweetToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UnFreeze\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frozenUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period_\",\"type\":\"uint256\"}],\"name\":\"freezeSWT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlocksPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getFreezes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"frozenUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISweetpadFreezing.FreezeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period_\",\"type\":\"uint256\"}],\"name\":\"getPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweetToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"unfreezeSWT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides functionality to freeze assets on contract and get allocation.\",\"kind\":\"dev\",\"methods\":{\"freezeSWT(uint256,uint256)\":{\"params\":{\"amount_\":\"Amount of tokens to freeze\",\"period_\":\"Period of freezing\"}},\"unfreezeSWT(uint256,uint256)\":{\"params\":{\"amount_\":\"Amount of tokens to unfreeze\",\"id_\":\"Id of freezing\"}}},\"stateVariables\":{\"freezeInfo\":{\"details\":\"The data for each account\"},\"totalPower\":{\"details\":\"The data for each account, returns totalPower\"}},\"title\":\"SweetpadFreezing\",\"version\":1},\"userdoc\":{\"events\":{\"Freeze(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are frozen\"},\"UnFreeze(uint256,address,uint256)\":{\"notice\":\"Emitted when tokens are unFrozen\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initialize contract\"},\"freezeSWT(uint256,uint256)\":{\"notice\":\"Freeze SWT tokens\"},\"unfreezeSWT(uint256,uint256)\":{\"notice\":\"Unfreeze SWT tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SweetpadFreezing.sol\":\"SweetpadFreezing\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/SweetpadFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ISweetpadFreezing.sol\\\";\\n\\n/**\\n * @title SweetpadFreezing\\n * @dev Contract module which provides functionality to freeze assets on contract and get allocation.\\n */\\ncontract SweetpadFreezing is ISweetpadFreezing {\\n    using SafeERC20 for IERC20;\\n    uint16 private constant DAYS_IN_YEAR = 365;\\n    // TODO, we need to change BLOCKS_PER_DAY to a real one before deploying a mainnet\\n    uint256 private constant BLOCKS_PER_DAY = 10;\\n    // Min period counted with blocks that user can freeze assets\\n    uint256 private constant MIN_FREEZE_PERIOD = 182 * BLOCKS_PER_DAY;\\n    // Max period counted with blocks that user can freeze assets\\n    uint256 private constant MAX_FREEZE_PERIOD = 1095 * BLOCKS_PER_DAY;\\n\\n    /// @dev The data for each account\\n    mapping(address => FreezeInfo[]) public override freezeInfo;\\n\\n    /// @dev The data for each account, returns totalPower\\n    mapping(address => uint256) public override totalPower;\\n\\n    IERC20 public override sweetToken;\\n\\n    /**\\n     * @notice Initialize contract\\n     */\\n    constructor(IERC20 sweetToken_) {\\n        require(address(sweetToken_) != address(0), \\\"SweetpadFreezing: Token address cant be Zero address\\\");\\n        sweetToken = sweetToken_;\\n    }\\n\\n    /**\\n     * @notice Freeze SWT tokens\\n     * @param amount_ Amount of tokens to freeze\\n     * @param period_ Period of freezing\\n     */\\n    function freezeSWT(uint256 amount_, uint256 period_) external override {\\n        uint256 power = getPower(amount_, period_);\\n        require(power >= 10000 ether, \\\"SweetpadFreezing: At least 10.000 xSWT is required\\\");\\n        _freezeSWT(msg.sender, amount_, period_, power);\\n    }\\n\\n    /**\\n     * @notice Unfreeze SWT tokens\\n     * @param id_ Id of freezing\\n     * @param amount_ Amount of tokens to unfreeze\\n     */\\n    function unfreezeSWT(uint256 id_, uint256 amount_) external override {\\n        FreezeInfo memory freezeData = freezeInfo[msg.sender][id_];\\n        require(freezeData.frozenAmount != 0, \\\"SweetpadFreezing: Frozen amount is Zero\\\");\\n        require(freezeData.frozenAmount >= amount_, \\\"SweetpadFreezing: Insufficient frozen amount\\\");\\n        require(block.number >= freezeData.frozenUntil, \\\"SweetpadFreezing: Locked period dosn`t pass\\\");\\n        uint256 expectedPower = getPower(freezeData.frozenAmount - amount_, freezeData.period);\\n        require(\\n            expectedPower >= 10000 ether || expectedPower == 0,\\n            \\\"SweetpadFreezing: At least 10.000 xSWT is required\\\"\\n        );\\n        uint256 powerDelta = getPower(amount_, freezeData.period);\\n        _unfreezeSWT(msg.sender, id_, amount_, powerDelta);\\n    }\\n\\n    function getFreezes(address account_) external view override returns (FreezeInfo[] memory) {\\n        return freezeInfo[account_];\\n    }\\n\\n    function getBlocksPerDay() external view override returns (uint256) {\\n        return BLOCKS_PER_DAY;\\n    }\\n\\n    function getMinFreezePeriod() external view override returns (uint256) {\\n        return MIN_FREEZE_PERIOD;\\n    }\\n\\n    function getMaxFreezePeriod() external view override returns (uint256) {\\n        return MAX_FREEZE_PERIOD;\\n    }\\n\\n    function getPower(uint256 amount_, uint256 period_) public pure override returns (uint256 power) {\\n        require(MIN_FREEZE_PERIOD <= period_ && period_ <= MAX_FREEZE_PERIOD, \\\"SweetpadFreezing: Wrong period\\\");\\n        if (period_ == MIN_FREEZE_PERIOD) {\\n            power = amount_ / 2;\\n            return power;\\n        }\\n\\n        if (period_ > MIN_FREEZE_PERIOD && period_ <= DAYS_IN_YEAR * BLOCKS_PER_DAY) {\\n            power = (period_ * amount_) / DAYS_IN_YEAR / BLOCKS_PER_DAY;\\n            return power;\\n        }\\n\\n        power = ((period_ + DAYS_IN_YEAR * BLOCKS_PER_DAY) * amount_) / (DAYS_IN_YEAR * 2) / BLOCKS_PER_DAY;\\n        return power;\\n    }\\n\\n    function _freezeSWT(\\n        address account_,\\n        uint256 amount_,\\n        uint256 period_,\\n        uint256 power_\\n    ) private {\\n        freezeInfo[account_].push(\\n            FreezeInfo({frozenUntil: block.number + period_, period: period_, frozenAmount: amount_})\\n        );\\n        totalPower[account_] += power_;\\n\\n        emit Freeze(freezeInfo[account_].length - 1, account_, amount_, power_);\\n\\n        sweetToken.safeTransferFrom(account_, address(this), amount_);\\n    }\\n\\n    function _unfreezeSWT(\\n        address account_,\\n        uint256 id_,\\n        uint256 amount_,\\n        uint256 power_\\n    ) private {\\n        totalPower[account_] -= power_;\\n        freezeInfo[account_][id_].frozenAmount -= amount_;\\n\\n        emit UnFreeze(id_, account_, amount_);\\n\\n        sweetToken.safeTransfer(account_, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0xf0337c337dd6fd0964b4a95227f27c21784966fede819a39024fe7e2b2ae6340\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISweetpadFreezing {\\n    struct FreezeInfo {\\n        uint256 frozenUntil; // blockNumber when can be unfrozen\\n        uint256 period; // Number of blocks that tokens are frozen\\n        uint256 frozenAmount; // Amount of tokens are frozen\\n    }\\n\\n    function freezeInfo(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function sweetToken() external view returns (IERC20);\\n\\n    function getBlocksPerDay() external view returns (uint256);\\n\\n    function getMinFreezePeriod() external view returns (uint256);\\n\\n    function getMaxFreezePeriod() external view returns (uint256);\\n\\n    function totalPower(address) external view returns (uint256);\\n\\n    function freezeSWT(uint256, uint256) external;\\n\\n    function unfreezeSWT(uint256, uint256) external;\\n\\n    function getFreezes(address) external view returns (FreezeInfo[] memory);\\n\\n    function getPower(uint256, uint256) external pure returns (uint256);\\n\\n    /// @notice Emitted when tokens are frozen\\n    event Freeze(uint256, address indexed, uint256, uint256);\\n    /// @notice Emitted when tokens are unFrozen\\n    event UnFreeze(uint256, address indexed, uint256);\\n}\\n\",\"keccak256\":\"0xfb612247b3adf1b222f448cd1f3f9a1a915a8753bfeef7c44eba319c0601587f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ee1380380610ee183398101604081905261002f916100d4565b6001600160a01b0381166100af5760405162461bcd60e51b815260206004820152603460248201527f5377656574706164467265657a696e673a20546f6b656e20616464726573732060448201527f63616e74206265205a65726f2061646472657373000000000000000000000000606482015260840160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055610104565b6000602082840312156100e657600080fd5b81516001600160a01b03811681146100fd57600080fd5b9392505050565b610dce806101136000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806394fa0aaf1161006657806394fa0aaf1461010e57806399b5e48c14610139578063a88a0c3014610159578063aa716c7d1461016c578063ae8a30251461017357600080fd5b8063051671ce146100a35780630eacae84146100c95780631f21138c146100d157806387c5e813146100f157806394628050146100f9575b600080fd5b6100b66100b1366004610b8a565b6101a1565b6040519081526020015b60405180910390f35b6100b66102e0565b6100b66100df366004610b23565b60016020526000908152604090205481565b6100b66102f3565b61010c610107366004610b8a565b610302565b005b600254610121906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b61014c610147366004610b23565b610508565b6040516100c09190610bc8565b61010c610167366004610b8a565b610599565b600a6100b6565b610186610181366004610b3e565b6105e2565b604080519384526020840192909252908201526060016100c0565b6000816101b0600a60b6610d0a565b111580156101ca57506101c6600a610447610d0a565b8211155b61021b5760405162461bcd60e51b815260206004820152601e60248201527f5377656574706164467265657a696e673a2057726f6e6720706572696f64000060448201526064015b60405180910390fd5b610227600a60b6610d0a565b82141561024057610239600284610cbe565b90506102da565b61024c600a60b6610d0a565b821180156102665750610262600a61016d610d0a565b8211155b1561028e57600a61016d61027a8585610d0a565b6102849190610cbe565b6102399190610cbe565b600a61029d61016d6002610ce0565b61ffff16846102af600a61016d610d0a565b6102b99086610ca6565b6102c39190610d0a565b6102cd9190610cbe565b6102d79190610cbe565b90505b92915050565b60006102ee600a60b6610d0a565b905090565b60006102ee600a610447610d0a565b33600090815260208190526040812080548490811061032357610323610d82565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151600014156103c15760405162461bcd60e51b815260206004820152602760248201527f5377656574706164467265657a696e673a2046726f7a656e20616d6f756e74206044820152666973205a65726f60c81b6064820152608401610212565b818160400151101561042a5760405162461bcd60e51b815260206004820152602c60248201527f5377656574706164467265657a696e673a20496e73756666696369656e74206660448201526b1c9bde995b88185b5bdd5b9d60a21b6064820152608401610212565b805143101561048f5760405162461bcd60e51b815260206004820152602b60248201527f5377656574706164467265657a696e673a204c6f636b656420706572696f642060448201526a646f736e6074207061737360a81b6064820152608401610212565b60006104ae8383604001516104a49190610d29565b83602001516101a1565b905069021e19e0c9bab2400000811015806104c7575080155b6104e35760405162461bcd60e51b815260040161021290610c54565b60006104f38484602001516101a1565b905061050133868684610624565b5050505050565b6001600160a01b038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b8282101561058e578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061053e565b505050509050919050565b60006105a583836101a1565b905069021e19e0c9bab24000008110156105d15760405162461bcd60e51b815260040161021290610c54565b6105dd33848484610704565b505050565b600060205281600052604060002081815481106105fe57600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b6001600160a01b0384166000908152600160205260408120805483929061064c908490610d29565b90915550506001600160a01b038416600090815260208190526040902080548391908590811061067e5761067e610d82565b9060005260206000209060030201600201600082825461069e9190610d29565b909155505060408051848152602081018490526001600160a01b038616917f583b979ad32e4203d8deb2ef979846f215494c3b1d1dccaffe25fa7aeb5d5f9e910160405180910390a26002546106fe906001600160a01b03168584610817565b50505050565b6001600160a01b0384166000908152602081905260409081902081516060810190925290806107338543610ca6565b815260208082018690526040918201879052835460018181018655600095865282862085516003909302019182558483015182820155938301516002909101556001600160a01b03881684529190915281208054839290610795908490610ca6565b90915550506001600160a01b0384166000818152602081905260409020547fdbdd0fe3271bd23d68c21153d41a1908cb16d2841ec03871456e4d4700cedf15906107e190600190610d29565b6040805191825260208201879052810184905260600160405180910390a26002546106fe906001600160a01b031685308661087a565b6040516001600160a01b0383166024820152604481018290526105dd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526108b2565b6040516001600160a01b03808516602483015283166044820152606481018290526106fe9085906323b872dd60e01b90608401610843565b6000610907826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109849092919063ffffffff16565b8051909150156105dd57808060200190518101906109259190610b68565b6105dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610212565b6060610993848460008561099d565b90505b9392505050565b6060824710156109fe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610212565b6001600160a01b0385163b610a555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610212565b600080866001600160a01b03168587604051610a719190610bac565b60006040518083038185875af1925050503d8060008114610aae576040519150601f19603f3d011682016040523d82523d6000602084013e610ab3565b606091505b5091509150610ac3828286610ace565b979650505050505050565b60608315610add575081610996565b825115610aed5782518084602001fd5b8160405162461bcd60e51b81526004016102129190610c21565b80356001600160a01b0381168114610b1e57600080fd5b919050565b600060208284031215610b3557600080fd5b6102d782610b07565b60008060408385031215610b5157600080fd5b610b5a83610b07565b946020939093013593505050565b600060208284031215610b7a57600080fd5b8151801515811461099657600080fd5b60008060408385031215610b9d57600080fd5b50508035926020909101359150565b60008251610bbe818460208701610d40565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015610c145781518051855286810151878601528501518585015260609093019290850190600101610be5565b5091979650505050505050565b6020815260008251806020840152610c40816040850160208701610d40565b601f01601f19169190910160400192915050565b60208082526032908201527f5377656574706164467265657a696e673a204174206c656173742031302e30306040820152710c081e14d5d5081a5cc81c995c5d5a5c995960721b606082015260800190565b60008219821115610cb957610cb9610d6c565b500190565b600082610cdb57634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff80831681851681830481118215151615610d0157610d01610d6c565b02949350505050565b6000816000190483118215151615610d2457610d24610d6c565b500290565b600082821015610d3b57610d3b610d6c565b500390565b60005b83811015610d5b578181015183820152602001610d43565b838111156106fe5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220eb182b25877ea56fafc5f3b42f584e8c928c389907a97e734c60264e23cd54c964736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806394fa0aaf1161006657806394fa0aaf1461010e57806399b5e48c14610139578063a88a0c3014610159578063aa716c7d1461016c578063ae8a30251461017357600080fd5b8063051671ce146100a35780630eacae84146100c95780631f21138c146100d157806387c5e813146100f157806394628050146100f9575b600080fd5b6100b66100b1366004610b8a565b6101a1565b6040519081526020015b60405180910390f35b6100b66102e0565b6100b66100df366004610b23565b60016020526000908152604090205481565b6100b66102f3565b61010c610107366004610b8a565b610302565b005b600254610121906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b61014c610147366004610b23565b610508565b6040516100c09190610bc8565b61010c610167366004610b8a565b610599565b600a6100b6565b610186610181366004610b3e565b6105e2565b604080519384526020840192909252908201526060016100c0565b6000816101b0600a60b6610d0a565b111580156101ca57506101c6600a610447610d0a565b8211155b61021b5760405162461bcd60e51b815260206004820152601e60248201527f5377656574706164467265657a696e673a2057726f6e6720706572696f64000060448201526064015b60405180910390fd5b610227600a60b6610d0a565b82141561024057610239600284610cbe565b90506102da565b61024c600a60b6610d0a565b821180156102665750610262600a61016d610d0a565b8211155b1561028e57600a61016d61027a8585610d0a565b6102849190610cbe565b6102399190610cbe565b600a61029d61016d6002610ce0565b61ffff16846102af600a61016d610d0a565b6102b99086610ca6565b6102c39190610d0a565b6102cd9190610cbe565b6102d79190610cbe565b90505b92915050565b60006102ee600a60b6610d0a565b905090565b60006102ee600a610447610d0a565b33600090815260208190526040812080548490811061032357610323610d82565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151600014156103c15760405162461bcd60e51b815260206004820152602760248201527f5377656574706164467265657a696e673a2046726f7a656e20616d6f756e74206044820152666973205a65726f60c81b6064820152608401610212565b818160400151101561042a5760405162461bcd60e51b815260206004820152602c60248201527f5377656574706164467265657a696e673a20496e73756666696369656e74206660448201526b1c9bde995b88185b5bdd5b9d60a21b6064820152608401610212565b805143101561048f5760405162461bcd60e51b815260206004820152602b60248201527f5377656574706164467265657a696e673a204c6f636b656420706572696f642060448201526a646f736e6074207061737360a81b6064820152608401610212565b60006104ae8383604001516104a49190610d29565b83602001516101a1565b905069021e19e0c9bab2400000811015806104c7575080155b6104e35760405162461bcd60e51b815260040161021290610c54565b60006104f38484602001516101a1565b905061050133868684610624565b5050505050565b6001600160a01b038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b8282101561058e578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061053e565b505050509050919050565b60006105a583836101a1565b905069021e19e0c9bab24000008110156105d15760405162461bcd60e51b815260040161021290610c54565b6105dd33848484610704565b505050565b600060205281600052604060002081815481106105fe57600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b6001600160a01b0384166000908152600160205260408120805483929061064c908490610d29565b90915550506001600160a01b038416600090815260208190526040902080548391908590811061067e5761067e610d82565b9060005260206000209060030201600201600082825461069e9190610d29565b909155505060408051848152602081018490526001600160a01b038616917f583b979ad32e4203d8deb2ef979846f215494c3b1d1dccaffe25fa7aeb5d5f9e910160405180910390a26002546106fe906001600160a01b03168584610817565b50505050565b6001600160a01b0384166000908152602081905260409081902081516060810190925290806107338543610ca6565b815260208082018690526040918201879052835460018181018655600095865282862085516003909302019182558483015182820155938301516002909101556001600160a01b03881684529190915281208054839290610795908490610ca6565b90915550506001600160a01b0384166000818152602081905260409020547fdbdd0fe3271bd23d68c21153d41a1908cb16d2841ec03871456e4d4700cedf15906107e190600190610d29565b6040805191825260208201879052810184905260600160405180910390a26002546106fe906001600160a01b031685308661087a565b6040516001600160a01b0383166024820152604481018290526105dd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526108b2565b6040516001600160a01b03808516602483015283166044820152606481018290526106fe9085906323b872dd60e01b90608401610843565b6000610907826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109849092919063ffffffff16565b8051909150156105dd57808060200190518101906109259190610b68565b6105dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610212565b6060610993848460008561099d565b90505b9392505050565b6060824710156109fe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610212565b6001600160a01b0385163b610a555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610212565b600080866001600160a01b03168587604051610a719190610bac565b60006040518083038185875af1925050503d8060008114610aae576040519150601f19603f3d011682016040523d82523d6000602084013e610ab3565b606091505b5091509150610ac3828286610ace565b979650505050505050565b60608315610add575081610996565b825115610aed5782518084602001fd5b8160405162461bcd60e51b81526004016102129190610c21565b80356001600160a01b0381168114610b1e57600080fd5b919050565b600060208284031215610b3557600080fd5b6102d782610b07565b60008060408385031215610b5157600080fd5b610b5a83610b07565b946020939093013593505050565b600060208284031215610b7a57600080fd5b8151801515811461099657600080fd5b60008060408385031215610b9d57600080fd5b50508035926020909101359150565b60008251610bbe818460208701610d40565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015610c145781518051855286810151878601528501518585015260609093019290850190600101610be5565b5091979650505050505050565b6020815260008251806020840152610c40816040850160208701610d40565b601f01601f19169190910160400192915050565b60208082526032908201527f5377656574706164467265657a696e673a204174206c656173742031302e30306040820152710c081e14d5d5081a5cc81c995c5d5a5c995960721b606082015260800190565b60008219821115610cb957610cb9610d6c565b500190565b600082610cdb57634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff80831681851681830481118215151615610d0157610d01610d6c565b02949350505050565b6000816000190483118215151615610d2457610d24610d6c565b500290565b600082821015610d3b57610d3b610d6c565b500390565b60005b83811015610d5b578181015183820152602001610d43565b838111156106fe5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220eb182b25877ea56fafc5f3b42f584e8c928c389907a97e734c60264e23cd54c964736f6c63430008070033",
  "devdoc": {
    "details": "Contract module which provides functionality to freeze assets on contract and get allocation.",
    "kind": "dev",
    "methods": {
      "freezeSWT(uint256,uint256)": {
        "params": {
          "amount_": "Amount of tokens to freeze",
          "period_": "Period of freezing"
        }
      },
      "unfreezeSWT(uint256,uint256)": {
        "params": {
          "amount_": "Amount of tokens to unfreeze",
          "id_": "Id of freezing"
        }
      }
    },
    "stateVariables": {
      "freezeInfo": {
        "details": "The data for each account"
      },
      "totalPower": {
        "details": "The data for each account, returns totalPower"
      }
    },
    "title": "SweetpadFreezing",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Freeze(uint256,address,uint256,uint256)": {
        "notice": "Emitted when tokens are frozen"
      },
      "UnFreeze(uint256,address,uint256)": {
        "notice": "Emitted when tokens are unFrozen"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initialize contract"
      },
      "freezeSWT(uint256,uint256)": {
        "notice": "Freeze SWT tokens"
      },
      "unfreezeSWT(uint256,uint256)": {
        "notice": "Unfreeze SWT tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4138,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "freezeInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(FreezeInfo)5796_storage)dyn_storage)"
      },
      {
        "astId": 4144,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "totalPower",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4148,
        "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
        "label": "sweetToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)2169"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FreezeInfo)5796_storage)dyn_storage": {
        "base": "t_struct(FreezeInfo)5796_storage",
        "encoding": "dynamic_array",
        "label": "struct ISweetpadFreezing.FreezeInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2169": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(FreezeInfo)5796_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISweetpadFreezing.FreezeInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(FreezeInfo)5796_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FreezeInfo)5796_storage": {
        "encoding": "inplace",
        "label": "struct ISweetpadFreezing.FreezeInfo",
        "members": [
          {
            "astId": 5791,
            "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
            "label": "frozenUntil",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5793,
            "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
            "label": "period",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5795,
            "contract": "contracts/SweetpadFreezing.sol:SweetpadFreezing",
            "label": "frozenAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}