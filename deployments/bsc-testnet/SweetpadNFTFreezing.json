{
  "address": "0x5c0c823260A08531c0fc5EE3bbbc016498959C01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticket",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freezeEndBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketsMinted",
          "type": "uint256"
        }
      ],
      "name": "Froze",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "freezeEndBlocks",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketsMinted",
          "type": "uint256[]"
        }
      ],
      "name": "FrozeBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "Unfroze",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftId",
          "type": "uint256[]"
        }
      ],
      "name": "UnfrozeBatch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ido_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ticketId_",
          "type": "uint256"
        }
      ],
      "name": "addTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freezePeriod",
          "type": "uint256"
        }
      ],
      "name": "freeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "freezePeriods",
          "type": "uint256[]"
        }
      ],
      "name": "freezeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNftsFrozeByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ido_",
          "type": "address"
        }
      ],
      "name": "getTicketsForIdo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lottery",
      "outputs": [
        {
          "internalType": "contract SweetpadLottery",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract ISweetpadNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftData",
      "outputs": [
        {
          "internalType": "address",
          "name": "freezer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "freezeEndBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sweetpadIdo_",
          "type": "address"
        }
      ],
      "name": "participate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lottery_",
          "type": "address"
        }
      ],
      "name": "setSweetpadLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newNft",
          "type": "address"
        }
      ],
      "name": "setSweetpadNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTicket",
          "type": "address"
        }
      ],
      "name": "setSweetpadTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticket",
      "outputs": [
        {
          "internalType": "contract ISweetpadTicket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketsForIdo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketsPerNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "unfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "unfreezeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8aafd38d4c01bccc031befd75c458c2d6d5e8e42cdc1f071889a75a14defa6a2",
  "receipt": {
    "to": null,
    "from": "0xb2444FE0E53378E094736834067c1E2653ec3CAB",
    "contractAddress": "0x5c0c823260A08531c0fc5EE3bbbc016498959C01",
    "transactionIndex": 11,
    "gasUsed": "1862755",
    "logsBloom": "0x
    "blockHash": "0x7656095a8cf3174877d3a559b9281b9da26af07ac86e62b27298a14d884ba3b9",
    "transactionHash": "0x8aafd38d4c01bccc031befd75c458c2d6d5e8e42cdc1f071889a75a14defa6a2",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 22801057,
        "transactionHash": "0x8aafd38d4c01bccc031befd75c458c2d6d5e8e42cdc1f071889a75a14defa6a2",
        "address": "0x5c0c823260A08531c0fc5EE3bbbc016498959C01",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b2444fe0e53378e094736834067c1e2653ec3cab"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x7656095a8cf3174877d3a559b9281b9da26af07ac86e62b27298a14d884ba3b9"
      }
    ],
    "blockNumber": 22801057,
    "cumulativeGasUsed": "2903409",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC19E1a05c3dcfc34111F490507852dB2753Fd04c",
    "0xe394eEA0F626c7Bf2BDf3a3f25300083913748E0"
  ],
  "numDeployments": 5,
  "solcInputHash": "964b5d185d394f6fec46a7da5c21033a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketsMinted\",\"type\":\"uint256\"}],\"name\":\"Froze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"freezeEndBlocks\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketsMinted\",\"type\":\"uint256[]\"}],\"name\":\"FrozeBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Unfroze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftId\",\"type\":\"uint256[]\"}],\"name\":\"UnfrozeBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ido_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketId_\",\"type\":\"uint256\"}],\"name\":\"addTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezePeriod\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"freezePeriods\",\"type\":\"uint256[]\"}],\"name\":\"freezeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNftsFrozeByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ido_\",\"type\":\"address\"}],\"name\":\"getTicketsForIdo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery\",\"outputs\":[{\"internalType\":\"contract SweetpadLottery\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ISweetpadNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"freezer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freezeEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sweetpadIdo_\",\"type\":\"address\"}],\"name\":\"participate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lottery_\",\"type\":\"address\"}],\"name\":\"setSweetpadLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNft\",\"type\":\"address\"}],\"name\":\"setSweetpadNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTicket\",\"type\":\"address\"}],\"name\":\"setSweetpadTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticket\",\"outputs\":[{\"internalType\":\"contract ISweetpadTicket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketsForIdo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketsPerNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"unfreezeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"freeze(uint256,uint256)\":{\"params\":{\"freezePeriod\":\": freezing period in blocks\",\"nftId\":\": the id of the NFT\"}},\"freezeBatch(uint256[],uint256[])\":{\"params\":{\"freezePeriods\":\": freezing periods in blocks\",\"nftIds\":\": the ids of the NFT\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"freeze(uint256,uint256)\":{\"notice\":\"Freeze Sweetpad NFT\"},\"freezeBatch(uint256[],uint256[])\":{\"notice\":\"Freeze Sweetpad NFTs\"},\"getNftsFrozeByUser(address)\":{\"notice\":\"Returns NFTs frozen by the user\"},\"nftData(uint256)\":{\"notice\":\"NFT id -> frozen NFT data\"},\"userNFTs(address,uint256)\":{\"notice\":\"user address -> NFT id's freezed by user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SweetpadNFTFreezing.sol\":\"SweetpadNFTFreezing\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SweetpadLottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n// Imported OZ helper contracts\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n// import \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n// Inherited allowing for ownership of contract\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// Allows for intergration with ChainLink VRF\\nimport \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\n// Interface for Lottery NFT to mint tokens\\nimport \\\"./interfaces/ISweetpadTicket.sol\\\";\\n\\n\\n// Allows for time manipulation. Set to 0x address on test/mainnet deploy\\n// import \\\"./Testable.sol\\\";\\n\\ncontract SweetpadLottery is Ownable {\\n    // Libraries\\n    using SafeMath for uint256;\\n    // Safe ERC20\\n    using SafeERC20 for IERC20;\\n    // Address functionality\\n    using Address for address;\\n\\n    // State variables\\n    // Instance of Cake token (collateral currency for lotto)\\n    // IERC20 internal cake_;\\n    // Storing of the NFT\\n    // TODO check\\n    // ISweetpadTicket internal nft_;\\n    // Storing of the randomness generator\\n    IRandomNumberGenerator internal randomGenerator_;\\n    // Request ID for random number\\n    bytes32 internal requestId_;\\n    // Counter for lottery IDs\\n    uint256 private lotteryIdCounter_;\\n\\n    // Lottery size\\n    uint16 public sizeOfLottery_;\\n    // Max range for numbers (starting at 0)\\n    uint16 public maxValidRange_;\\n\\n    // Represents the status of the lottery\\n    enum Status {\\n        NotStarted, // The lottery has not started yet\\n        Open, // The lottery is open for ticket purchases\\n        Closed, // The lottery is no longer open for ticket purchases\\n        Completed // The lottery has been closed and the numbers drawn\\n    }\\n    // All the needed info around a lottery\\n    struct LottoInfo {\\n        uint256 lotteryID; // ID for lotto\\n        Status lotteryStatus; // Status for lotto\\n        address ido;\\n        // uint256 prizePoolInCake;    // The amount of cake for prize money\\n        // uint256 costPerTicket;      // Cost per ticket in $cake\\n        // uint8[] prizeDistribution;  // The distribution for prize money\\n        uint256 startingTimestamp; // Block timestamp for star of lotto\\n        uint256 closingTimestamp; // Block timestamp for end of entries\\n        uint16[] winningNumbers; // The winning numbers\\n    }\\n    // Lottery ID's to info\\n    mapping(uint256 => LottoInfo) internal allLotteries_;\\n    mapping(uint256 => uint256) public rendomNumbers;\\n    mapping(address => uint256) public idoToId;\\n\\n    //-------------------------------------------------------------------------\\n    // EVENTS\\n    //-------------------------------------------------------------------------\\n\\n    event RequestNumbers(uint256 lotteryId, bytes32 requestId);\\n\\n    event UpdatedSizeOfLottery(address admin, uint16 newLotterySize);\\n\\n    event UpdatedMaxRange(address admin, uint16 newMaxRange);\\n\\n    event LotteryOpen(uint256 lotteryId, uint256 ticketSupply);\\n\\n    event LotteryClose(uint256 lotteryId, uint256 ticketSupply);\\n\\n    //-------------------------------------------------------------------------\\n    // MODIFIERS\\n    //-------------------------------------------------------------------------\\n\\n    modifier onlyRandomGenerator() {\\n        require(msg.sender == address(randomGenerator_), \\\"Only random generator\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!address(msg.sender).isContract(), \\\"contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // CONSTRUCTOR\\n    //-------------------------------------------------------------------------\\n\\n    constructor(\\n        // address _cake,\\n        // address _timer,\\n        uint8 _sizeOfLotteryNumbers,\\n        uint16 _maxValidNumberRange // uint8 _bucketOneMaxNumber, // TODO check // address lotteryNFT_ // Testable(_timer)\\n    ) {\\n        // require(\\n        //     _discountForBucketOne < _discountForBucketTwo &&\\n        //     _discountForBucketTwo < _discountForBucketThree,\\n        //     \\\"Discounts must increase\\\"\\n        // );\\n        // require(\\n        //     _cake != address(0),\\n        //     \\\"Contracts cannot be 0 address\\\"\\n        // );\\n        require(_sizeOfLotteryNumbers != 0 && _maxValidNumberRange != 0, \\\"Lottery setup cannot be 0\\\");\\n        // require(lotteryNFT_ != address(0), \\\"Contracts cannot be 0 address\\\");\\n        // nft_ = ISweetpadTicket(lotteryNFT_);\\n        // cake_ = IERC20(_cake);\\n        sizeOfLottery_ = _sizeOfLotteryNumbers;\\n        maxValidRange_ = _maxValidNumberRange;\\n\\n        // bucketOneMax_ = _bucketOneMaxNumber;\\n        // bucketTwoMax_ = _bucketTwoMaxNumber;\\n        // discountForBucketOne_ = _discountForBucketOne;\\n        // discountForBucketTwo_ = _discountForBucketTwo;\\n        // discountForBucketThree_ = _discountForBucketThree;\\n    }\\n\\n    // function initialize(\\n    //     address _lotteryNFT,\\n    //     address _IRandomNumberGenerator\\n    // )\\n    //     external\\n    //     initializer\\n    //     onlyOwner()\\n    // {\\n    //     require(\\n    //         _lotteryNFT != address(0) &&\\n    //         _IRandomNumberGenerator != address(0),\\n    //         \\\"Contracts cannot be 0 address\\\"\\n    //     );\\n    //     nft_ = ILotteryNFT(_lotteryNFT);\\n    //     randomGenerator_ = IRandomNumberGenerator(_IRandomNumberGenerator);\\n    // }\\n\\n    function getBasicLottoInfo(uint256 _lotteryId) external view returns (LottoInfo memory) {\\n        return (allLotteries_[_lotteryId]);\\n    }\\n\\n    function getMaxRange() external view returns (uint16) {\\n        return maxValidRange_;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // STATE MODIFYING FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    //-------------------------------------------------------------------------\\n    // Restricted Access Functions (onlyOwner)\\n\\n    function setRendomGenerator(address randomNumberGenerator_) external onlyOwner {\\n        require(randomNumberGenerator_ != address(0), \\\"Contracts cannot be 0 address\\\");\\n        randomGenerator_ = IRandomNumberGenerator(randomNumberGenerator_);\\n    }\\n\\n    function updateSizeOfLottery(uint16 _newSize) external onlyOwner {\\n        require(sizeOfLottery_ != _newSize, \\\"Cannot set to current size\\\");\\n        require(sizeOfLottery_ != 0, \\\"Lottery size cannot be 0\\\");\\n        sizeOfLottery_ = _newSize;\\n\\n        emit UpdatedSizeOfLottery(msg.sender, _newSize);\\n    }\\n\\n    function updateMaxRange(uint16 _newMaxRange) external onlyOwner {\\n        require(maxValidRange_ != _newMaxRange, \\\"Cannot set to current size\\\");\\n        require(maxValidRange_ != 0, \\\"Max range cannot be 0\\\");\\n        maxValidRange_ = _newMaxRange;\\n\\n        emit UpdatedMaxRange(msg.sender, _newMaxRange);\\n    }\\n\\n    function drawWinningNumbers(uint256 _lotteryId) external onlyOwner {\\n        // Checks that the lottery is past the closing block\\n        require(\\n            allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\\n            \\\"Cannot set winning numbers during lottery\\\"\\n        );\\n        // Checks lottery numbers have not already been drawn\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Open || allLotteries_[_lotteryId].lotteryStatus == Status.NotStarted, \\\"Lottery State incorrect for draw\\\");\\n        // Sets lottery status to closed\\n        allLotteries_[_lotteryId].lotteryStatus = Status.Closed;\\n        // Requests a random number from the generator\\n        requestId_ = randomGenerator_.getRandomNumber(_lotteryId);\\n        // Emits that random number has been requested\\n        emit RequestNumbers(_lotteryId, requestId_);\\n    }\\n\\n    function numbersDrawn(\\n        uint256 _lotteryId,\\n        bytes32 _requestId,\\n        uint256 _randomNumber\\n    ) external onlyRandomGenerator {\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Closed, \\\"Draw numbers first\\\");\\n        if (requestId_ == _requestId) {\\n            allLotteries_[_lotteryId].lotteryStatus = Status.Completed;\\n            // allLotteries_[_lotteryId].winningNumbers = _split(_randomNumber); // TODO\\n        }\\n        rendomNumbers[_lotteryId] = _randomNumber;\\n        // TODO fix\\n        // emit LotteryClose(_lotteryId, nft_.getTotalSupply());\\n    }\\n\\n    function getWiningNumbers(uint256 _lotteryId) external {\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \\\"Draw numbers first\\\");\\n        allLotteries_[_lotteryId].winningNumbers = _split(rendomNumbers[_lotteryId]);\\n    }\\n\\n    // * @param   _prizeDistribution An array defining the distribution of the\\n    //  *          prize pool. I.e if a lotto has 5 numbers, the distribution could\\n    //  *          be [5, 10, 15, 20, 30] = 100%. This means if you get one number\\n    //  *          right you get 5% of the pool, 2 matching would be 10% and so on.\\n    //  * @param   _prizePoolInCake The amount of Cake available to win in this\\n    //  *          lottery.\\n\\n    /**\\n     * @param   _startingTimestamp The block timestamp for the beginning of the\\n     *          lottery.\\n     * @param   _closingTimestamp The block timestamp after which no more tickets\\n     *          will be sold for the lottery. Note that this timestamp MUST\\n     *          be after the starting block timestamp.\\n     */\\n    //  TODO add functionaliti to connect lottery and ido\\n    function createNewLotto(\\n        // uint8[] calldata _prizeDistribution,\\n        // uint256 _prizePoolInCake,\\n        // uint256 _costPerTicket,\\n        uint256 _startingTimestamp,\\n        uint256 _closingTimestamp,\\n        address _ido\\n    ) external onlyOwner returns (uint256 lotteryId) {\\n        require(_startingTimestamp != 0 && _startingTimestamp < _closingTimestamp, \\\"Timestamps for lottery invalid\\\");\\n        require(idoToId[_ido] == 0, \\\"SweetpadLottery: Lottery for current IDO contract was already created\\\");\\n        // Incrementing lottery ID\\n        lotteryIdCounter_ = lotteryIdCounter_ + 1;\\n        lotteryId = lotteryIdCounter_;\\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\\n        Status lotteryStatus;\\n        if (_startingTimestamp >= block.timestamp) {\\n            lotteryStatus = Status.Open;\\n        } else {\\n            lotteryStatus = Status.NotStarted;\\n        }\\n        // Saving data in struct\\n        LottoInfo memory newLottery = LottoInfo(\\n            lotteryId,\\n            lotteryStatus,\\n            _ido,\\n            // _prizePoolInCake,\\n            // _costPerTicket,\\n            // _prizeDistribution,\\n            _startingTimestamp,\\n            _closingTimestamp,\\n            winningNumbers\\n        );\\n        allLotteries_[lotteryId] = newLottery;\\n        idoToId[_ido] = lotteryId;\\n        // TODO fix\\n        // Emitting important information around new lottery.\\n        // emit LotteryOpen(\\n        //     lotteryId,\\n        //     nft_.getTotalSupply()\\n        // );\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // General Access Functions\\n\\n    // claim reward don't remove!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n    // function claimReward(uint256 _lotteryId, uint256 _tokenId) external notContract() {\\n    //     // Checking the lottery is in a valid time for claiming\\n    //     require(\\n    //         allLotteries_[_lotteryId].closingTimestamp <= block.timestamp,\\n    //         \\\"Wait till end to claim\\\"\\n    //     );\\n    //     // Checks the lottery winning numbers are available\\n    //     require(\\n    //         allLotteries_[_lotteryId].lotteryStatus == Status.Completed,\\n    //         \\\"Winning Numbers not chosen yet\\\"\\n    //     );\\n    //     require(\\n    //         nft_.getOwnerOfTicket(_tokenId) == msg.sender,\\n    //         \\\"Only the owner can claim\\\"\\n    //     );\\n    //     // Sets the claim of the ticket to true (if claimed, will revert)\\n    //     require(\\n    //         nft_.claimTicket(_tokenId, _lotteryId),\\n    //         \\\"Numbers for ticket invalid\\\"\\n    //     );\\n    //     // Getting the number of matching tickets\\n    //     uint8 matchingNumbers = _getNumberOfMatching(\\n    //         nft_.getTicketNumbers(_tokenId),\\n    //         allLotteries_[_lotteryId].winningNumbers\\n    //     );\\n    //     // Getting the prize amount for those matching tickets\\n    //     uint256 prizeAmount = _prizeForMatching(\\n    //         matchingNumbers,\\n    //         _lotteryId\\n    //     );\\n    //     // Removing the prize amount from the pool\\n    //     allLotteries_[_lotteryId].prizePoolInCake = allLotteries_[_lotteryId].prizePoolInCake.sub(prizeAmount);\\n    //     // Transfering the user their winnings\\n    //     cake_.safeTransfer(address(msg.sender), prizeAmount);\\n    // }\\n\\n    //-------------------------------------------------------------------------\\n    // INTERNAL FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    // TODO start tickets ids from 1 and check if user number is 0 breack\\n    // TODO fix functionality\\n    function getNumberOfMatching(uint16[] memory _usersNumbers, uint16[] memory _winningNumbers)\\n        public\\n        pure\\n        returns (uint8 noOfMatching)\\n    {\\n        // Loops through all wimming numbers\\n        for (uint256 i = 0; i < _winningNumbers.length; i++) {\\n            // If the winning numbers and user numbers match\\n            if (_usersNumbers[i] == _winningNumbers[i]) {\\n                // The number of matching numbers incrases\\n                noOfMatching += 1;\\n            }\\n        }\\n    }\\n\\n    function _split(uint256 _randomNumber) internal view returns (uint16[] memory) {\\n        // Temparary storage for winning numbers\\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_);\\n        // Loops the size of the number of tickets in the lottery\\n        for (uint256 i = 0; i < sizeOfLottery_; i++) {\\n            // uint256 duplicated;\\n            // Encodes the random number with its position in loop\\n            bytes32 hashOfRandom = keccak256(abi.encodePacked(_randomNumber, i));\\n            // Casts random number hash into uint256\\n            uint256 numberRepresentation = uint256(hashOfRandom);\\n            // Sets the winning number position to a uint16 of random hash number\\n            // for (uint256 j = 0; j < winningNumbers.length; j++) {\\n            //     if (winningNumbers[j] > 0) {\\n            //         if (winningNumbers[j] == uint16(numberRepresentation.mod(maxValidRange_))) {\\n            //             duplicated += 1;\\n            //         }\\n            //     }\\n            // }\\n            // if (duplicated > 0) {\\n            //     continue;\\n            // }\\n            winningNumbers[i] = uint16(numberRepresentation.mod(maxValidRange_));\\n        }\\n        return winningNumbers;\\n    }\\n\\n    function getOpenLotteries() public view returns (uint256[] memory openLotteries) {\\n        for (uint256 i = 1; i <= lotteryIdCounter_; i++) {\\n            if (allLotteries_[i].closingTimestamp > block.timestamp) {\\n                openLotteries[i - 1] = allLotteries_[i].lotteryID;\\n            }\\n        }\\n        return openLotteries;\\n    }\\n}\\n\",\"keccak256\":\"0xf1f818cd4564ea877002f52717068d3e208991982654b9e8d055288b259e8876\",\"license\":\"MIT\"},\"contracts/SweetpadNFTFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\nimport \\\"./interfaces/ISweetpadNFTFreezing.sol\\\";\\nimport \\\"./interfaces/ISweetpadNFT.sol\\\";\\nimport \\\"./interfaces/ISweetpadTicket.sol\\\";\\n\\nimport \\\"./SweetpadLottery.sol\\\";\\n\\n\\ncontract SweetpadNFTFreezing is ISweetpadNFTFreezing, Ownable, ERC721Holder {\\n    /// @notice Blocks per day for BSC\\n    uint256 private constant BLOCKS_PER_DAY = 10; // TODO for mainnet change to 28674\\n    uint256 private constant MIN_PERIOD = 182 * BLOCKS_PER_DAY;\\n    uint256 private constant MAX_PERIOD = 1095 * BLOCKS_PER_DAY;\\n\\n    ISweetpadNFT public override nft;\\n    ISweetpadTicket public override ticket;\\n    SweetpadLottery public override lottery;\\n\\n    /// @notice NFT id -> frozen NFT data\\n    mapping(uint256 => NFTData) public override nftData;\\n    /// @notice user address -> NFT id's freezed by user\\n    mapping(address => uint256[]) public userNFTs;\\n    mapping(uint256 => uint256) public ticketsPerNFT;\\n    mapping(address => mapping(address => uint256[])) public ticketsForIdo;\\n\\n    constructor(address _nft, address _ticket) {\\n        setSweetpadNFT(_nft);\\n        setSweetpadTicket(_ticket);\\n    }\\n\\n    /**\\n     * @notice Freeze Sweetpad NFT\\n     * @param nftId: the id of the NFT\\n     * @param freezePeriod: freezing period in blocks\\n     */\\n    function freeze(uint256 nftId, uint256 freezePeriod) external override {\\n        uint256 ticketsToMint = freezePeriod == MAX_PERIOD\\n            ? nft.getTicketsQuantityById(nftId) * 2\\n            : nft.getTicketsQuantityById(nftId);\\n\\n        uint256 freezeEndBlock = _freeze(nftId, freezePeriod, ticketsToMint);\\n\\n        emit Froze(msg.sender, nftId, freezeEndBlock, ticketsToMint);\\n\\n        nft.safeTransferFrom(msg.sender, address(this), nftId);\\n    }\\n\\n    /**\\n     * @notice Freeze Sweetpad NFTs\\n     * @param nftIds: the ids of the NFT\\n     * @param freezePeriods: freezing periods in blocks\\n     */\\n    function freezeBatch(uint256[] calldata nftIds, uint256[] calldata freezePeriods) external override {\\n        require(nftIds.length == freezePeriods.length, \\\"SweetpadNFTFreezing: Array lengths is not equal\\\");\\n\\n        uint256 len = nftIds.length;\\n        uint256[] memory ticketsToMintBatch = new uint256[](len);\\n        uint256[] memory freezeEndBlocks = new uint256[](len);\\n        ticketsToMintBatch = nft.getTicketsQuantityByIds(nftIds);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            if (freezePeriods[i] == MAX_PERIOD) {\\n                ticketsToMintBatch[i] = ticketsToMintBatch[i] * 2;\\n            }\\n            freezeEndBlocks[i] = _freeze(nftIds[i], freezePeriods[i], ticketsToMintBatch[i]);\\n        }\\n        emit FrozeBatch(msg.sender, nftIds, freezeEndBlocks, ticketsToMintBatch);\\n\\n        nft.safeBatchTransferFrom(msg.sender, address(this), nftIds, \\\"0x00\\\");\\n    }\\n\\n    function unfreeze(uint256 nftId) external override {\\n        _unfreeze(nftId);\\n\\n        emit Unfroze(msg.sender, nftId);\\n\\n        nft.safeTransferFrom(address(this), msg.sender, nftId);\\n    }\\n\\n    function unfreezeBatch(uint256[] calldata nftIds) external override {\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            _unfreeze(nftIds[i]);\\n        }\\n\\n        emit UnfrozeBatch(msg.sender, nftIds);\\n\\n        nft.safeBatchTransferFrom(address(this), msg.sender, nftIds, \\\"\\\");\\n    }\\n\\n    function participate(address sweetpadIdo_) external {\\n        require(userNFTs[msg.sender].length > 0, \\\"SweetpadIDO: User doesn't have NFTs staked\\\");\\n        for (uint256 i; i < userNFTs[msg.sender].length; i++) {\\n            ticket.mint(msg.sender, ticketsPerNFT[userNFTs[msg.sender][i]], sweetpadIdo_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns NFTs frozen by the user\\n     */\\n    function getNftsFrozeByUser(address user) external view override returns (uint256[] memory) {\\n        return userNFTs[user];\\n    }\\n\\n    function getTicketsForIdo(address user_, address ido_) external view override returns(uint256[] memory) {\\n        return ticketsForIdo[user_][ido_];\\n    }\\n\\n    function blocksPerDay() external pure override returns (uint256) {\\n        return BLOCKS_PER_DAY;\\n    }\\n\\n    function minFreezePeriod() external pure override returns (uint256) {\\n        return MIN_PERIOD;\\n    }\\n\\n    function maxFreezePeriod() external pure override returns (uint256) {\\n        return MAX_PERIOD;\\n    }\\n\\n    function setSweetpadNFT(address newNft) public override onlyOwner {\\n        require(newNft != address(0), \\\"SweetpadNFTFreezing: NFT contract address can't be 0\\\");\\n        nft = ISweetpadNFT(newNft);\\n    }\\n\\n    function setSweetpadTicket(address newTicket) public override onlyOwner {\\n        require(newTicket != address(0), \\\"SweetpadNFTFreezing: Ticket contract address can't be 0\\\");\\n        ticket = ISweetpadTicket(newTicket);\\n    }\\n\\n    function setSweetpadLottery(address lottery_) public override onlyOwner {\\n        require(lottery_ != address(0), \\\"SweetpadNFTFreezing: Ticket contract address can't be 0\\\");\\n        lottery = SweetpadLottery(lottery_);\\n    }\\n\\n    // TODO add only lottery\\n    // TODO add requiers\\n    function addTickets(\\n        address to_,\\n        address ido_,\\n        uint256 ticketId_\\n    ) external override {\\n        ticketsForIdo[to_][ido_].push(ticketId_);\\n    }\\n\\n    function _freeze(\\n        uint256 nftId,\\n        uint256 freezePeriod,\\n        uint256 ticketsToMint_\\n    ) private returns (uint256 freezeEndBlock) {\\n        require(freezePeriod >= MIN_PERIOD && freezePeriod <= MAX_PERIOD, \\\"SweetpadNFTFreezing: Wrong freeze period\\\");\\n\\n        freezeEndBlock = freezePeriod + block.number;\\n\\n        nftData[nftId] = NFTData({freezer: msg.sender, freezeEndBlock: freezeEndBlock});\\n\\n        userNFTs[msg.sender].push(nftId);\\n\\n        ticketsPerNFT[nftId] = ticketsToMint_;\\n    }\\n\\n    function _unfreeze(uint256 nftId) private {\\n        NFTData memory _nftData = nftData[nftId];\\n        // slither-disable-next-line incorrect-equality\\n        require(\\n            checkAbilityToUnfreeze(msg.sender),\\n            \\\"SweetpadNFTFreezing: You are participating in IDO that doesn't closed yet\\\"\\n        );\\n        require(_nftData.freezer == msg.sender, \\\"SweetpadNFTFreezing: Wrong unfreezer\\\");\\n        require(_nftData.freezeEndBlock <= block.number, \\\"SweetpadNFTFreezing: Freeze period don't passed\\\");\\n        // slither-disable-next-line costly-loop\\n        delete nftData[nftId];\\n\\n        uint256[] memory _userNFTs = userNFTs[msg.sender];\\n        uint256 len = _userNFTs.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (_userNFTs[i] == nftId) {\\n                if (i != len - 1) {\\n                    userNFTs[msg.sender][i] = userNFTs[msg.sender][len - 1];\\n                }\\n                userNFTs[msg.sender].pop();\\n\\n                break;\\n            }\\n        }\\n        delete ticketsPerNFT[nftId];\\n    }\\n\\n    function checkAbilityToUnfreeze(address user_) internal view returns (bool) {\\n        if ((lottery.getOpenLotteries()).length > 0) {\\n            for (uint256 i; i < (lottery.getOpenLotteries()).length; i++) {\\n                if (ticketsForIdo[user_][(lottery.getBasicLottoInfo((lottery.getOpenLotteries())[i])).ido].length > 0) {\\n                    return false;\\n                } else {\\n                    return true;\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4d8ee6d7ba7ee72a85cca7f4de5a79b3b87e03f693ade0c413cc55169d974a5\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomNumberGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IRandomNumberGenerator {\\n    /**\\n     * Requests randomness from a user-provided seed\\n     */\\n    function getRandomNumber(uint256 lotteryId) external returns (bytes32 requestId);\\n}\\n\",\"keccak256\":\"0x665dbbca64ac7762758f50953a32255efa24a6b8b4f63e68962b53959b40d8b1\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ISweetpadNFT is IERC721, IERC721Metadata {\\n    enum Tier {\\n        One,\\n        Two,\\n        Three\\n    }\\n\\n    function idToTier(uint256) external view returns (Tier);\\n\\n    function tierToBoost(Tier) external view returns (uint256);\\n\\n    function getTicketsQuantityById(uint256) external view returns (uint256);\\n\\n    function getTicketsQuantityByIds(uint256[] calldata) external view returns (uint256[] calldata);\\n\\n    function getUserNfts(address) external view returns (uint256[] memory);\\n\\n    function setBaseURI(string memory) external;\\n\\n    function currentID() external view returns (uint256);\\n\\n    function safeMint(address, Tier) external;\\n\\n    function safeMintBatch(address, Tier[] memory) external;\\n\\n    function safeBatchTransferFrom(\\n        address,\\n        address,\\n        uint256[] memory,\\n        bytes memory\\n    ) external;\\n\\n    /// @notice Emitted when new NFT is minted\\n    event Create(uint256 indexed, Tier indexed, address indexed);\\n}\\n\",\"keccak256\":\"0x245f785792ef6c25ad957f9fb2b737fe85ca0de47f907eaa2bd3d93f5a43ae39\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadNFTFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ISweetpadNFT.sol\\\";\\nimport \\\"./ISweetpadTicket.sol\\\";\\nimport \\\"../SweetpadLottery.sol\\\";\\n\\ninterface ISweetpadNFTFreezing {\\n    struct NFTData {\\n        // Account that froze NFT\\n        address freezer;\\n        // block after which freezer can unfreeze NFT\\n        uint256 freezeEndBlock;\\n    }\\n\\n    function freeze(uint256, uint256) external;\\n\\n    function freezeBatch(uint256[] calldata, uint256[] calldata) external;\\n\\n    function unfreeze(uint256) external;\\n\\n    function unfreezeBatch(uint256[] calldata) external;\\n\\n    function blocksPerDay() external pure returns (uint256);\\n\\n    function minFreezePeriod() external pure returns (uint256);\\n\\n    function maxFreezePeriod() external pure returns (uint256);\\n\\n    function nft() external view returns (ISweetpadNFT);\\n\\n    function ticket() external view returns (ISweetpadTicket);\\n\\n    function lottery() external view returns (SweetpadLottery);\\n\\n    function nftData(uint256) external view returns (address, uint256);\\n\\n    function getNftsFrozeByUser(address) external view returns (uint256[] memory);\\n    function getTicketsForIdo(address, address) external view returns(uint256[] memory);\\n\\n    function setSweetpadNFT(address) external;\\n\\n    function setSweetpadTicket(address) external;\\n\\n    function setSweetpadLottery(address) external;\\n\\n    // function tiketsForIdo(address, address) external returns(uint256[] memory);\\n\\n    function addTickets(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    event Froze(address indexed user, uint256 nftId, uint256 freezeEndBlock, uint256 ticketsMinted);\\n\\n    event FrozeBatch(address indexed user, uint256[] nftIds, uint256[] freezeEndBlocks, uint256[] ticketsMinted);\\n\\n    event Unfroze(address indexed user, uint256 nftId);\\n\\n    event UnfrozeBatch(address indexed user, uint256[] nftId);\\n}\\n\",\"keccak256\":\"0xa550b401f026937e4084f929a7ec4faeb9538afa71766d0886352462ded37063\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ISweetpadTicket is IERC721, IERC721Metadata {\\n    function totalTickets() external returns (uint256);\\n\\n    function mint(\\n        address,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd2830b2f844904617e384b122affaecdb2089bf52ddac4c180aee7826c4c9ce2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200225f3803806200225f8339810160408190526200003491620002a4565b6200003f336200005d565b6200004a82620000ad565b62000055816200019c565b5050620002dc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620000fc5760405162461bcd60e51b815260206004820181905260248201526000805160206200223f83398151915260448201526064015b60405180910390fd5b6001600160a01b0381166200017a5760405162461bcd60e51b815260206004820152603460248201527f53776565747061644e4654467265657a696e673a204e465420636f6e7472616360448201527f7420616464726573732063616e277420626520300000000000000000000000006064820152608401620000f3565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620001e75760405162461bcd60e51b815260206004820181905260248201526000805160206200223f8339815191526044820152606401620000f3565b6001600160a01b038116620002655760405162461bcd60e51b815260206004820152603760248201527f53776565747061644e4654467265657a696e673a205469636b657420636f6e7460448201527f7261637420616464726573732063616e277420626520300000000000000000006064820152608401620000f3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160a01b03811681146200029f57600080fd5b919050565b60008060408385031215620002b857600080fd5b620002c38362000287565b9150620002d36020840162000287565b90509250929050565b611f5380620002ec6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636cc25db7116100de5780639bd59a8211610097578063b91038c711610071578063b91038c7146103b8578063ba13a572146103cb578063c4df6d0e146103de578063f2fde38b146103f157600080fd5b80639bd59a82146103495780639cb677d11461035c578063b5264e391461036f57600080fd5b80636cc25db7146102a5578063715018a6146102b85780638725aa44146102c05780638c210975146102d35780638c755304146103255780638da5cb5b1461033857600080fd5b80633e4332e8116101305780633e4332e81461023257806347ccca02146102455780634cfea68a146102705780634f9549dc14610277578063661d489d1461028a5780636623fc461461029257600080fd5b8063150b7a0214610178578063291c73c3146101b45780633483f19d146101d557806335d7a052146101f55780633a6883f01461020a5780633c3d982914610212575b600080fd5b610196610186366004611876565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6101c76101c236600461193a565b610404565b6040519081526020016101ab565b6101e86101e33660046117d8565b610435565b6040516101ab9190611d24565b610208610203366004611b91565b6104a1565b005b6101c7610683565b6101c7610220366004611b5f565b60066020526000908152604090205481565b6102086102403660046117d8565b610696565b600154610258906001600160a01b031681565b6040516001600160a01b0390911681526020016101ab565b600a6101c7565b6102086102853660046117d8565b61075e565b6101c76107d0565b6102086102a0366004611b5f565b6107df565b600254610258906001600160a01b031681565b61020861088a565b6102086102ce366004611966565b6108c0565b6103066102e1366004611b5f565b600460205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b0390931683526020830191909152016101ab565b6101e86103333660046117fc565b6109ae565b6000546001600160a01b0316610258565b6102086103573660046117d8565b610a27565b6101c761036a366004611835565b610a99565b61020861037d366004611835565b6001600160a01b0392831660009081526007602090815260408083209490951682529283529283208054600181018255908452919092200155565b6102086103c63660046117d8565b610ad7565b600354610258906001600160a01b031681565b6102086103ec3660046119a8565b610c3c565b6102086103ff3660046117d8565b610f71565b6005602052816000526040600020818154811061042057600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081526005602090815260409182902080548351818402810184019094528084526060939283018282801561049557602002820191906000526020600020905b815481526020019060010190808311610481575b50505050509050919050565b60006104b0600a610447611e5f565b82146105375760015460405163e1aadc7f60e01b8152600481018590526001600160a01b039091169063e1aadc7f9060240160206040518083038186803b1580156104fa57600080fd5b505afa15801561050e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105329190611b78565b6105be565b60015460405163e1aadc7f60e01b8152600481018590526001600160a01b039091169063e1aadc7f9060240160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611b78565b6105be906002611e5f565b905060006105cd84848461100c565b604080518681526020810183905290810184905290915033907f63a12ed3726ca03aef5efbf3b0b3f3275846ccaa693e8ebbaed404180b8f6dd59060600160405180910390a2600154604051632142170760e11b8152336004820152306024820152604481018690526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561066557600080fd5b505af1158015610679573d6000803e3d6000fd5b5050505050505050565b6000610691600a60b6611e5f565b905090565b6000546001600160a01b031633146106c95760405162461bcd60e51b81526004016106c090611d94565b60405180910390fd5b6001600160a01b03811661073c5760405162461bcd60e51b815260206004820152603460248201527f53776565747061644e4654467265657a696e673a204e465420636f6e7472616360448201527307420616464726573732063616e277420626520360641b60648201526084016106c0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107885760405162461bcd60e51b81526004016106c090611d94565b6001600160a01b0381166107ae5760405162461bcd60e51b81526004016106c090611d37565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610691600a610447611e5f565b6107e881611112565b60405181815233907f3c05fbf9d410481e99636173d6932b01bb4e9a22d38f1a5257475ac9bacf35189060200160405180910390a2600154604051632142170760e11b8152306004820152336024820152604481018390526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146108b45760405162461bcd60e51b81526004016106c090611d94565b6108be600061141f565b565b60005b818110156108fe576108ec8383838181106108e0576108e0611edc565b90506020020135611112565b806108f681611e95565b9150506108c3565b50336001600160a01b03167f4ad5f5782eb0f021b983e659fbdc7e64db4a85ec4e93e3537e974740f1b88e53838360405161093a929190611cc3565b60405180910390a2600154604051631467dea360e11b81526001600160a01b03909116906328cfbd4690610978903090339087908790600401611c7a565b600060405180830381600087803b15801561099257600080fd5b505af11580156109a6573d6000803e3d6000fd5b505050505050565b6001600160a01b038083166000908152600760209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610a1a57602002820191906000526020600020905b815481526020019060010190808311610a06575b5050505050905092915050565b6000546001600160a01b03163314610a515760405162461bcd60e51b81526004016106c090611d94565b6001600160a01b038116610a775760405162461bcd60e51b81526004016106c090611d37565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60076020528260005260406000206020528160005260406000208181548110610ac157600080fd5b9060005260206000200160009250925050505481565b33600090815260056020526040902054610b465760405162461bcd60e51b815260206004820152602a60248201527f537765657470616449444f3a205573657220646f65736e27742068617665204e60448201526911951cc81cdd185ad95960b21b60648201526084016106c0565b60005b33600090815260056020526040902054811015610c385760025433600081815260056020526040812080546001600160a01b0390941693630d4d15139392600692909187908110610b9c57610b9c611edc565b9060005260206000200154815260200190815260200160002054856040518463ffffffff1660e01b8152600401610bf3939291906001600160a01b0393841681526020810192909252909116604082015260600190565b600060405180830381600087803b158015610c0d57600080fd5b505af1158015610c21573d6000803e3d6000fd5b505050508080610c3090611e95565b915050610b49565b5050565b828114610ca35760405162461bcd60e51b815260206004820152602f60248201527f53776565747061644e4654467265657a696e673a204172726179206c656e677460448201526e1a1cc81a5cc81b9bdd08195c5d585b608a1b60648201526084016106c0565b8260008167ffffffffffffffff811115610cbf57610cbf611ef2565b604051908082528060200260200182016040528015610ce8578160200160208202803683370190505b50905060008267ffffffffffffffff811115610d0657610d06611ef2565b604051908082528060200260200182016040528015610d2f578160200160208202803683370190505b506001546040516305e2936560e11b81529192506001600160a01b031690630bc526ca90610d63908a908a90600401611cc3565b60006040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610db79190810190611a14565b915060005b83811015610eb857610dd1600a610447611e5f565b868683818110610de357610de3611edc565b905060200201351415610e3557828181518110610e0257610e02611edc565b60200260200101516002610e169190611e5f565b838281518110610e2857610e28611edc565b6020026020010181815250505b610e89888883818110610e4a57610e4a611edc565b90506020020135878784818110610e6357610e63611edc565b90506020020135858481518110610e7c57610e7c611edc565b602002602001015161100c565b828281518110610e9b57610e9b611edc565b602090810291909101015280610eb081611e95565b915050610dbc565b50336001600160a01b03167f9ebbff316f63a98ea1330837f98f32d3c63e80d2939b3ac7958f800db76fd83688888486604051610ef89493929190611cdf565b60405180910390a2600154604051631467dea360e11b81526001600160a01b03909116906328cfbd4690610f3690339030908c908c90600401611c24565b600060405180830381600087803b158015610f5057600080fd5b505af1158015610f64573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b03163314610f9b5760405162461bcd60e51b81526004016106c090611d94565b6001600160a01b0381166110005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c0565b6110098161141f565b50565b600061101a600a60b6611e5f565b83101580156110355750611031600a610447611e5f565b8311155b6110925760405162461bcd60e51b815260206004820152602860248201527f53776565747061644e4654467265657a696e673a2057726f6e6720667265657a60448201526719481c195c9a5bd960c21b60648201526084016106c0565b61109c4384611e47565b60408051808201825233808252602080830185815260008a815260048352858120945185546001600160a01b0319166001600160a01b0390911617855590516001948501559182526005815283822080549384018155825280822090920188905596875260069052909420919091555090919050565b600081815260046020908152604091829020825180840190935280546001600160a01b03168352600101549082015261114a3361146f565b6111ce5760405162461bcd60e51b815260206004820152604960248201527f53776565747061644e4654467265657a696e673a20596f75206172652070617260448201527f74696369706174696e6720696e2049444f207468617420646f65736e277420636064820152681b1bdcd959081e595d60ba1b608482015260a4016106c0565b80516001600160a01b031633146112335760405162461bcd60e51b8152602060048201526024808201527f53776565747061644e4654467265657a696e673a2057726f6e6720756e66726560448201526332bd32b960e11b60648201526084016106c0565b438160200151111561129f5760405162461bcd60e51b815260206004820152602f60248201527f53776565747061644e4654467265657a696e673a20467265657a65207065726960448201526e1bd908191bdb89dd081c185cdcd959608a1b60648201526084016106c0565b600082815260046020908152604080832080546001600160a01b0319168155600101839055338352600582528083208054825181850281018501909352808352919290919083018282801561131357602002820191906000526020600020905b8154815260200190600101908083116112ff575b505083519394506000925050505b8181101561140a578483828151811061133c5761133c611edc565b602002602001015114156113f857611355600183611e7e565b81146113bf57336000908152600560205260409020611375600184611e7e565b8154811061138557611385611edc565b6000918252602080832090910154338352600590915260409091208054839081106113b2576113b2611edc565b6000918252602090912001555b3360009081526005602052604090208054806113dd576113dd611ec6565b6001900381819060005260206000200160009055905561140a565b8061140281611e95565b915050611321565b50505060009182525060066020526040812055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663646046ad6040518163ffffffff1660e01b815260040160006040518083038186803b1580156114c057600080fd5b505afa1580156114d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114fc9190810190611a14565b5111156116f1576003546040805163646046ad60e01b815290516000926001600160a01b03169163646046ad9160048083019286929190829003018186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115839190810190611a14565b518110156116eb576001600160a01b03808416600090815260076020526040808220600354825163646046ad60e01b81529251939491938593919092169163da47675591839163646046ad916004808201928892909190829003018186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261162a9190810190611a14565b868151811061163b5761163b611edc565b60200260200101516040518263ffffffff1660e01b815260040161166191815260200190565b60006040518083038186803b15801561167957600080fd5b505afa15801561168d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116b59190810190611aac565b6040908101516001600160a01b031682526020820192909252016000205411156116e25750600092915050565b50600192915050565b50919050565b506001919050565b919050565b80516116f981611f08565b600082601f83011261171a57600080fd5b8151602061172f61172a83611e23565b611df2565b80838252828201915082860187848660051b890101111561174f57600080fd5b6000805b8681101561177e57825161ffff8116811461176c578283fd5b85529385019391850191600101611753565b509198975050505050505050565b60008083601f84011261179e57600080fd5b50813567ffffffffffffffff8111156117b657600080fd5b6020830191508360208260051b85010111156117d157600080fd5b9250929050565b6000602082840312156117ea57600080fd5b81356117f581611f08565b9392505050565b6000806040838503121561180f57600080fd5b823561181a81611f08565b9150602083013561182a81611f08565b809150509250929050565b60008060006060848603121561184a57600080fd5b833561185581611f08565b9250602084013561186581611f08565b929592945050506040919091013590565b6000806000806080858703121561188c57600080fd5b843561189781611f08565b93506020858101356118a881611f08565b935060408601359250606086013567ffffffffffffffff808211156118cc57600080fd5b818801915088601f8301126118e057600080fd5b8135818111156118f2576118f2611ef2565b611904601f8201601f19168501611df2565b9150808252898482850101111561191a57600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806040838503121561194d57600080fd5b823561195881611f08565b946020939093013593505050565b6000806020838503121561197957600080fd5b823567ffffffffffffffff81111561199057600080fd5b61199c8582860161178c565b90969095509350505050565b600080600080604085870312156119be57600080fd5b843567ffffffffffffffff808211156119d657600080fd5b6119e28883890161178c565b909650945060208701359150808211156119fb57600080fd5b50611a088782880161178c565b95989497509550505050565b60006020808385031215611a2757600080fd5b825167ffffffffffffffff811115611a3e57600080fd5b8301601f81018513611a4f57600080fd5b8051611a5d61172a82611e23565b80828252848201915084840188868560051b8701011115611a7d57600080fd5b600094505b83851015611aa0578051835260019490940193918501918501611a82565b50979650505050505050565b600060208284031215611abe57600080fd5b815167ffffffffffffffff80821115611ad657600080fd5b9083019060c08286031215611aea57600080fd5b611af2611dc9565b82518152602083015160048110611b0857600080fd5b6020820152611b19604084016116fe565b6040820152606083015160608201526080830151608082015260a083015182811115611b4457600080fd5b611b5087828601611709565b60a08301525095945050505050565b600060208284031215611b7157600080fd5b5035919050565b600060208284031215611b8a57600080fd5b5051919050565b60008060408385031215611ba457600080fd5b50508035926020909101359150565b81835260006001600160fb1b03831115611bcc57600080fd5b8260051b8083602087013760009401602001938452509192915050565b600081518084526020808501945080840160005b83811015611c1957815187529582019590820190600101611bfd565b509495945050505050565b6001600160a01b03858116825284166020820152608060408201819052600090611c519083018486611bb3565b828103606084015260048152630307830360e41b60208201526040810191505095945050505050565b6001600160a01b03858116825284166020820152608060408201819052600090611ca79083018486611bb3565b8281036060840152600081526020810191505095945050505050565b602081526000611cd7602083018486611bb3565b949350505050565b606081526000611cf3606083018688611bb3565b8281036020840152611d058186611be9565b90508281036040840152611d198185611be9565b979650505050505050565b6020815260006117f56020830184611be9565b60208082526037908201527f53776565747061644e4654467265657a696e673a205469636b657420636f6e7460408201527f7261637420616464726573732063616e27742062652030000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60405160c0810167ffffffffffffffff81118282101715611dec57611dec611ef2565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1b57611e1b611ef2565b604052919050565b600067ffffffffffffffff821115611e3d57611e3d611ef2565b5060051b60200190565b60008219821115611e5a57611e5a611eb0565b500190565b6000816000190483118215151615611e7957611e79611eb0565b500290565b600082821015611e9057611e90611eb0565b500390565b6000600019821415611ea957611ea9611eb0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461100957600080fdfea2646970667358221220639901955a5b4de69d2018a6edf3bf25ee945e9a877841e6bcf7c0d26517ff2264736f6c634300080700334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80636cc25db7116100de5780639bd59a8211610097578063b91038c711610071578063b91038c7146103b8578063ba13a572146103cb578063c4df6d0e146103de578063f2fde38b146103f157600080fd5b80639bd59a82146103495780639cb677d11461035c578063b5264e391461036f57600080fd5b80636cc25db7146102a5578063715018a6146102b85780638725aa44146102c05780638c210975146102d35780638c755304146103255780638da5cb5b1461033857600080fd5b80633e4332e8116101305780633e4332e81461023257806347ccca02146102455780634cfea68a146102705780634f9549dc14610277578063661d489d1461028a5780636623fc461461029257600080fd5b8063150b7a0214610178578063291c73c3146101b45780633483f19d146101d557806335d7a052146101f55780633a6883f01461020a5780633c3d982914610212575b600080fd5b610196610186366004611876565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6101c76101c236600461193a565b610404565b6040519081526020016101ab565b6101e86101e33660046117d8565b610435565b6040516101ab9190611d24565b610208610203366004611b91565b6104a1565b005b6101c7610683565b6101c7610220366004611b5f565b60066020526000908152604090205481565b6102086102403660046117d8565b610696565b600154610258906001600160a01b031681565b6040516001600160a01b0390911681526020016101ab565b600a6101c7565b6102086102853660046117d8565b61075e565b6101c76107d0565b6102086102a0366004611b5f565b6107df565b600254610258906001600160a01b031681565b61020861088a565b6102086102ce366004611966565b6108c0565b6103066102e1366004611b5f565b600460205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b0390931683526020830191909152016101ab565b6101e86103333660046117fc565b6109ae565b6000546001600160a01b0316610258565b6102086103573660046117d8565b610a27565b6101c761036a366004611835565b610a99565b61020861037d366004611835565b6001600160a01b0392831660009081526007602090815260408083209490951682529283529283208054600181018255908452919092200155565b6102086103c63660046117d8565b610ad7565b600354610258906001600160a01b031681565b6102086103ec3660046119a8565b610c3c565b6102086103ff3660046117d8565b610f71565b6005602052816000526040600020818154811061042057600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081526005602090815260409182902080548351818402810184019094528084526060939283018282801561049557602002820191906000526020600020905b815481526020019060010190808311610481575b50505050509050919050565b60006104b0600a610447611e5f565b82146105375760015460405163e1aadc7f60e01b8152600481018590526001600160a01b039091169063e1aadc7f9060240160206040518083038186803b1580156104fa57600080fd5b505afa15801561050e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105329190611b78565b6105be565b60015460405163e1aadc7f60e01b8152600481018590526001600160a01b039091169063e1aadc7f9060240160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611b78565b6105be906002611e5f565b905060006105cd84848461100c565b604080518681526020810183905290810184905290915033907f63a12ed3726ca03aef5efbf3b0b3f3275846ccaa693e8ebbaed404180b8f6dd59060600160405180910390a2600154604051632142170760e11b8152336004820152306024820152604481018690526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561066557600080fd5b505af1158015610679573d6000803e3d6000fd5b5050505050505050565b6000610691600a60b6611e5f565b905090565b6000546001600160a01b031633146106c95760405162461bcd60e51b81526004016106c090611d94565b60405180910390fd5b6001600160a01b03811661073c5760405162461bcd60e51b815260206004820152603460248201527f53776565747061644e4654467265657a696e673a204e465420636f6e7472616360448201527307420616464726573732063616e277420626520360641b60648201526084016106c0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107885760405162461bcd60e51b81526004016106c090611d94565b6001600160a01b0381166107ae5760405162461bcd60e51b81526004016106c090611d37565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610691600a610447611e5f565b6107e881611112565b60405181815233907f3c05fbf9d410481e99636173d6932b01bb4e9a22d38f1a5257475ac9bacf35189060200160405180910390a2600154604051632142170760e11b8152306004820152336024820152604481018390526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146108b45760405162461bcd60e51b81526004016106c090611d94565b6108be600061141f565b565b60005b818110156108fe576108ec8383838181106108e0576108e0611edc565b90506020020135611112565b806108f681611e95565b9150506108c3565b50336001600160a01b03167f4ad5f5782eb0f021b983e659fbdc7e64db4a85ec4e93e3537e974740f1b88e53838360405161093a929190611cc3565b60405180910390a2600154604051631467dea360e11b81526001600160a01b03909116906328cfbd4690610978903090339087908790600401611c7a565b600060405180830381600087803b15801561099257600080fd5b505af11580156109a6573d6000803e3d6000fd5b505050505050565b6001600160a01b038083166000908152600760209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610a1a57602002820191906000526020600020905b815481526020019060010190808311610a06575b5050505050905092915050565b6000546001600160a01b03163314610a515760405162461bcd60e51b81526004016106c090611d94565b6001600160a01b038116610a775760405162461bcd60e51b81526004016106c090611d37565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60076020528260005260406000206020528160005260406000208181548110610ac157600080fd5b9060005260206000200160009250925050505481565b33600090815260056020526040902054610b465760405162461bcd60e51b815260206004820152602a60248201527f537765657470616449444f3a205573657220646f65736e27742068617665204e60448201526911951cc81cdd185ad95960b21b60648201526084016106c0565b60005b33600090815260056020526040902054811015610c385760025433600081815260056020526040812080546001600160a01b0390941693630d4d15139392600692909187908110610b9c57610b9c611edc565b9060005260206000200154815260200190815260200160002054856040518463ffffffff1660e01b8152600401610bf3939291906001600160a01b0393841681526020810192909252909116604082015260600190565b600060405180830381600087803b158015610c0d57600080fd5b505af1158015610c21573d6000803e3d6000fd5b505050508080610c3090611e95565b915050610b49565b5050565b828114610ca35760405162461bcd60e51b815260206004820152602f60248201527f53776565747061644e4654467265657a696e673a204172726179206c656e677460448201526e1a1cc81a5cc81b9bdd08195c5d585b608a1b60648201526084016106c0565b8260008167ffffffffffffffff811115610cbf57610cbf611ef2565b604051908082528060200260200182016040528015610ce8578160200160208202803683370190505b50905060008267ffffffffffffffff811115610d0657610d06611ef2565b604051908082528060200260200182016040528015610d2f578160200160208202803683370190505b506001546040516305e2936560e11b81529192506001600160a01b031690630bc526ca90610d63908a908a90600401611cc3565b60006040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610db79190810190611a14565b915060005b83811015610eb857610dd1600a610447611e5f565b868683818110610de357610de3611edc565b905060200201351415610e3557828181518110610e0257610e02611edc565b60200260200101516002610e169190611e5f565b838281518110610e2857610e28611edc565b6020026020010181815250505b610e89888883818110610e4a57610e4a611edc565b90506020020135878784818110610e6357610e63611edc565b90506020020135858481518110610e7c57610e7c611edc565b602002602001015161100c565b828281518110610e9b57610e9b611edc565b602090810291909101015280610eb081611e95565b915050610dbc565b50336001600160a01b03167f9ebbff316f63a98ea1330837f98f32d3c63e80d2939b3ac7958f800db76fd83688888486604051610ef89493929190611cdf565b60405180910390a2600154604051631467dea360e11b81526001600160a01b03909116906328cfbd4690610f3690339030908c908c90600401611c24565b600060405180830381600087803b158015610f5057600080fd5b505af1158015610f64573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b03163314610f9b5760405162461bcd60e51b81526004016106c090611d94565b6001600160a01b0381166110005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c0565b6110098161141f565b50565b600061101a600a60b6611e5f565b83101580156110355750611031600a610447611e5f565b8311155b6110925760405162461bcd60e51b815260206004820152602860248201527f53776565747061644e4654467265657a696e673a2057726f6e6720667265657a60448201526719481c195c9a5bd960c21b60648201526084016106c0565b61109c4384611e47565b60408051808201825233808252602080830185815260008a815260048352858120945185546001600160a01b0319166001600160a01b0390911617855590516001948501559182526005815283822080549384018155825280822090920188905596875260069052909420919091555090919050565b600081815260046020908152604091829020825180840190935280546001600160a01b03168352600101549082015261114a3361146f565b6111ce5760405162461bcd60e51b815260206004820152604960248201527f53776565747061644e4654467265657a696e673a20596f75206172652070617260448201527f74696369706174696e6720696e2049444f207468617420646f65736e277420636064820152681b1bdcd959081e595d60ba1b608482015260a4016106c0565b80516001600160a01b031633146112335760405162461bcd60e51b8152602060048201526024808201527f53776565747061644e4654467265657a696e673a2057726f6e6720756e66726560448201526332bd32b960e11b60648201526084016106c0565b438160200151111561129f5760405162461bcd60e51b815260206004820152602f60248201527f53776565747061644e4654467265657a696e673a20467265657a65207065726960448201526e1bd908191bdb89dd081c185cdcd959608a1b60648201526084016106c0565b600082815260046020908152604080832080546001600160a01b0319168155600101839055338352600582528083208054825181850281018501909352808352919290919083018282801561131357602002820191906000526020600020905b8154815260200190600101908083116112ff575b505083519394506000925050505b8181101561140a578483828151811061133c5761133c611edc565b602002602001015114156113f857611355600183611e7e565b81146113bf57336000908152600560205260409020611375600184611e7e565b8154811061138557611385611edc565b6000918252602080832090910154338352600590915260409091208054839081106113b2576113b2611edc565b6000918252602090912001555b3360009081526005602052604090208054806113dd576113dd611ec6565b6001900381819060005260206000200160009055905561140a565b8061140281611e95565b915050611321565b50505060009182525060066020526040812055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663646046ad6040518163ffffffff1660e01b815260040160006040518083038186803b1580156114c057600080fd5b505afa1580156114d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114fc9190810190611a14565b5111156116f1576003546040805163646046ad60e01b815290516000926001600160a01b03169163646046ad9160048083019286929190829003018186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115839190810190611a14565b518110156116eb576001600160a01b03808416600090815260076020526040808220600354825163646046ad60e01b81529251939491938593919092169163da47675591839163646046ad916004808201928892909190829003018186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261162a9190810190611a14565b868151811061163b5761163b611edc565b60200260200101516040518263ffffffff1660e01b815260040161166191815260200190565b60006040518083038186803b15801561167957600080fd5b505afa15801561168d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116b59190810190611aac565b6040908101516001600160a01b031682526020820192909252016000205411156116e25750600092915050565b50600192915050565b50919050565b506001919050565b919050565b80516116f981611f08565b600082601f83011261171a57600080fd5b8151602061172f61172a83611e23565b611df2565b80838252828201915082860187848660051b890101111561174f57600080fd5b6000805b8681101561177e57825161ffff8116811461176c578283fd5b85529385019391850191600101611753565b509198975050505050505050565b60008083601f84011261179e57600080fd5b50813567ffffffffffffffff8111156117b657600080fd5b6020830191508360208260051b85010111156117d157600080fd5b9250929050565b6000602082840312156117ea57600080fd5b81356117f581611f08565b9392505050565b6000806040838503121561180f57600080fd5b823561181a81611f08565b9150602083013561182a81611f08565b809150509250929050565b60008060006060848603121561184a57600080fd5b833561185581611f08565b9250602084013561186581611f08565b929592945050506040919091013590565b6000806000806080858703121561188c57600080fd5b843561189781611f08565b93506020858101356118a881611f08565b935060408601359250606086013567ffffffffffffffff808211156118cc57600080fd5b818801915088601f8301126118e057600080fd5b8135818111156118f2576118f2611ef2565b611904601f8201601f19168501611df2565b9150808252898482850101111561191a57600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806040838503121561194d57600080fd5b823561195881611f08565b946020939093013593505050565b6000806020838503121561197957600080fd5b823567ffffffffffffffff81111561199057600080fd5b61199c8582860161178c565b90969095509350505050565b600080600080604085870312156119be57600080fd5b843567ffffffffffffffff808211156119d657600080fd5b6119e28883890161178c565b909650945060208701359150808211156119fb57600080fd5b50611a088782880161178c565b95989497509550505050565b60006020808385031215611a2757600080fd5b825167ffffffffffffffff811115611a3e57600080fd5b8301601f81018513611a4f57600080fd5b8051611a5d61172a82611e23565b80828252848201915084840188868560051b8701011115611a7d57600080fd5b600094505b83851015611aa0578051835260019490940193918501918501611a82565b50979650505050505050565b600060208284031215611abe57600080fd5b815167ffffffffffffffff80821115611ad657600080fd5b9083019060c08286031215611aea57600080fd5b611af2611dc9565b82518152602083015160048110611b0857600080fd5b6020820152611b19604084016116fe565b6040820152606083015160608201526080830151608082015260a083015182811115611b4457600080fd5b611b5087828601611709565b60a08301525095945050505050565b600060208284031215611b7157600080fd5b5035919050565b600060208284031215611b8a57600080fd5b5051919050565b60008060408385031215611ba457600080fd5b50508035926020909101359150565b81835260006001600160fb1b03831115611bcc57600080fd5b8260051b8083602087013760009401602001938452509192915050565b600081518084526020808501945080840160005b83811015611c1957815187529582019590820190600101611bfd565b509495945050505050565b6001600160a01b03858116825284166020820152608060408201819052600090611c519083018486611bb3565b828103606084015260048152630307830360e41b60208201526040810191505095945050505050565b6001600160a01b03858116825284166020820152608060408201819052600090611ca79083018486611bb3565b8281036060840152600081526020810191505095945050505050565b602081526000611cd7602083018486611bb3565b949350505050565b606081526000611cf3606083018688611bb3565b8281036020840152611d058186611be9565b90508281036040840152611d198185611be9565b979650505050505050565b6020815260006117f56020830184611be9565b60208082526037908201527f53776565747061644e4654467265657a696e673a205469636b657420636f6e7460408201527f7261637420616464726573732063616e27742062652030000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60405160c0810167ffffffffffffffff81118282101715611dec57611dec611ef2565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1b57611e1b611ef2565b604052919050565b600067ffffffffffffffff821115611e3d57611e3d611ef2565b5060051b60200190565b60008219821115611e5a57611e5a611eb0565b500190565b6000816000190483118215151615611e7957611e79611eb0565b500290565b600082821015611e9057611e90611eb0565b500390565b6000600019821415611ea957611ea9611eb0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461100957600080fdfea2646970667358221220639901955a5b4de69d2018a6edf3bf25ee945e9a877841e6bcf7c0d26517ff2264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "freeze(uint256,uint256)": {
        "params": {
          "freezePeriod": ": freezing period in blocks",
          "nftId": ": the id of the NFT"
        }
      },
      "freezeBatch(uint256[],uint256[])": {
        "params": {
          "freezePeriods": ": freezing periods in blocks",
          "nftIds": ": the ids of the NFT"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "freeze(uint256,uint256)": {
        "notice": "Freeze Sweetpad NFT"
      },
      "freezeBatch(uint256[],uint256[])": {
        "notice": "Freeze Sweetpad NFTs"
      },
      "getNftsFrozeByUser(address)": {
        "notice": "Returns NFTs frozen by the user"
      },
      "nftData(uint256)": {
        "notice": "NFT id -> frozen NFT data"
      },
      "userNFTs(address,uint256)": {
        "notice": "user address -> NFT id's freezed by user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7318,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "nft",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISweetpadNFT)8517"
      },
      {
        "astId": 7322,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "ticket",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISweetpadTicket)8698"
      },
      {
        "astId": 7326,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "lottery",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(SweetpadLottery)6737"
      },
      {
        "astId": 7333,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "nftData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(NFTData)8527_storage)"
      },
      {
        "astId": 7339,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "userNFTs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7343,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "ticketsPerNFT",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7350,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "ticketsForIdo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ISweetpadNFT)8517": {
        "encoding": "inplace",
        "label": "contract ISweetpadNFT",
        "numberOfBytes": "20"
      },
      "t_contract(ISweetpadTicket)8698": {
        "encoding": "inplace",
        "label": "contract ISweetpadTicket",
        "numberOfBytes": "20"
      },
      "t_contract(SweetpadLottery)6737": {
        "encoding": "inplace",
        "label": "contract SweetpadLottery",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_struct(NFTData)8527_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISweetpadNFTFreezing.NFTData)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTData)8527_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(NFTData)8527_storage": {
        "encoding": "inplace",
        "label": "struct ISweetpadNFTFreezing.NFTData",
        "members": [
          {
            "astId": 8524,
            "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
            "label": "freezer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8526,
            "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
            "label": "freezeEndBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}