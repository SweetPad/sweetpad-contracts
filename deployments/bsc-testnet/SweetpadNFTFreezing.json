{
  "address": "0xf25E4f492c139cD0e17A3fdEa138c639B2023c47",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticket",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freezeEndBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketsMinted",
          "type": "uint256"
        }
      ],
      "name": "Froze",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "freezeEndBlocks",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketsMinted",
          "type": "uint256[]"
        }
      ],
      "name": "FrozeBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "Unfroze",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftId",
          "type": "uint256[]"
        }
      ],
      "name": "UnfrozeBatch",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blocksPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freezePeriod",
          "type": "uint256"
        }
      ],
      "name": "freeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "freezePeriods",
          "type": "uint256[]"
        }
      ],
      "name": "freezeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNftsFrozeByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract ISweetpadNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftData",
      "outputs": [
        {
          "internalType": "address",
          "name": "freezer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "freezeEndBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newNft",
          "type": "address"
        }
      ],
      "name": "setSweetpadNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTicket",
          "type": "address"
        }
      ],
      "name": "setSweetpadTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticket",
      "outputs": [
        {
          "internalType": "contract ISweetpadTicket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "unfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "unfreezeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x37b533b15ab3488f88d836ccef160f13084c0d4a585d4f9ab2c1282f3489f7ea",
  "receipt": {
    "to": null,
    "from": "0x4bd5b80ADb4eEC52e58b46c8748C6e9B4524CcA8",
    "contractAddress": "0xf25E4f492c139cD0e17A3fdEa138c639B2023c47",
    "transactionIndex": 3,
    "gasUsed": "1473510",
    "logsBloom": "0x
    "blockHash": "0x30f79350b838b1feeae233b1541ad3d8f43736be8e28da07bc3f810b50bcd037",
    "transactionHash": "0x37b533b15ab3488f88d836ccef160f13084c0d4a585d4f9ab2c1282f3489f7ea",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 19771365,
        "transactionHash": "0x37b533b15ab3488f88d836ccef160f13084c0d4a585d4f9ab2c1282f3489f7ea",
        "address": "0xf25E4f492c139cD0e17A3fdEa138c639B2023c47",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bd5b80adb4eec52e58b46c8748c6e9b4524cca8"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x30f79350b838b1feeae233b1541ad3d8f43736be8e28da07bc3f810b50bcd037"
      }
    ],
    "blockNumber": 19771365,
    "cumulativeGasUsed": "2765825",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7e89D3970F837179e84570D632C90F133EFB0c11",
    "0xC7dF30f8caE631F8dE3ca6699703C3EA22063eb5"
  ],
  "numDeployments": 1,
  "solcInputHash": "3c6f06bdfe977e603b23d854fbb62806",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketsMinted\",\"type\":\"uint256\"}],\"name\":\"Froze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"freezeEndBlocks\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketsMinted\",\"type\":\"uint256[]\"}],\"name\":\"FrozeBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Unfroze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftId\",\"type\":\"uint256[]\"}],\"name\":\"UnfrozeBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blocksPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezePeriod\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"freezePeriods\",\"type\":\"uint256[]\"}],\"name\":\"freezeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNftsFrozeByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ISweetpadNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"freezer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freezeEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNft\",\"type\":\"address\"}],\"name\":\"setSweetpadNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTicket\",\"type\":\"address\"}],\"name\":\"setSweetpadTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticket\",\"outputs\":[{\"internalType\":\"contract ISweetpadTicket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"unfreezeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"freeze(uint256,uint256)\":{\"params\":{\"freezePeriod\":\": freezing period in blocks\",\"nftId\":\": the id of the NFT\"}},\"freezeBatch(uint256[],uint256[])\":{\"params\":{\"freezePeriods\":\": freezing periods in blocks\",\"nftIds\":\": the ids of the NFT\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"freeze(uint256,uint256)\":{\"notice\":\"Freeze Sweetpad NFT\"},\"freezeBatch(uint256[],uint256[])\":{\"notice\":\"Freeze Sweetpad NFTs\"},\"getNftsFrozeByUser(address)\":{\"notice\":\"Return\\u0441 NFTs froze by the user\"},\"nftData(uint256)\":{\"notice\":\"NFT id -> frozen NFT data\"},\"userNFTs(address,uint256)\":{\"notice\":\"user address -> NFT id's freezed by user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SweetpadNFTFreezing.sol\":\"SweetpadNFTFreezing\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SweetpadNFTFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"./interfaces/ISweetpadNFTFreezing.sol\\\";\\nimport \\\"./interfaces/ISweetpadNFT.sol\\\";\\nimport \\\"./interfaces/ISweetpadTicket.sol\\\";\\n\\ncontract SweetpadNFTFreezing is ISweetpadNFTFreezing, Ownable, ERC721Holder {\\n    /// @notice Blocks per day for BSC\\n    uint256 private constant BLOCKS_PER_DAY = 10; // TODO for mainnet change to 28674\\n    uint256 private constant MIN_PERIOD = 182 * BLOCKS_PER_DAY;\\n    uint256 private constant MAX_PERIOD = 1095 * BLOCKS_PER_DAY;\\n\\n    ISweetpadNFT public override nft;\\n    ISweetpadTicket public override ticket;\\n\\n    /// @notice NFT id -> frozen NFT data\\n    mapping(uint256 => NFTData) public override nftData;\\n    /// @notice user address -> NFT id's freezed by user\\n    mapping(address => uint256[]) public userNFTs;\\n\\n    constructor(address _nft, address _ticket) {\\n        setSweetpadNFT(_nft);\\n        setSweetpadTicket(_ticket);\\n    }\\n\\n    /**\\n     * @notice Freeze Sweetpad NFT\\n     * @param nftId: the id of the NFT\\n     * @param freezePeriod: freezing period in blocks\\n     */\\n    function freeze(uint256 nftId, uint256 freezePeriod) external override {\\n        uint256 freezeEndBlock = _freeze(nftId, freezePeriod);\\n        uint256 ticketsToMint = freezePeriod == MAX_PERIOD\\n            ? nft.getTicketsQuantityById(nftId) * 2\\n            : nft.getTicketsQuantityById(nftId);\\n\\n        emit Froze(msg.sender, nftId, freezeEndBlock, ticketsToMint);\\n\\n        ticket.mint(msg.sender, nftId, ticketsToMint);\\n        nft.safeTransferFrom(msg.sender, address(this), nftId);\\n    }\\n\\n    /**\\n     * @notice Freeze Sweetpad NFTs\\n     * @param nftIds: the ids of the NFT\\n     * @param freezePeriods: freezing periods in blocks\\n     */\\n    function freezeBatch(uint256[] calldata nftIds, uint256[] calldata freezePeriods) external override {\\n        require(nftIds.length == freezePeriods.length, \\\"SweetpadNFTFreezing: Array lengths is not equal\\\");\\n\\n        uint256 len = nftIds.length;\\n        uint256[] memory ticketsToMintBatch = new uint256[](len);\\n        uint256[] memory freezeEndBlocks = new uint256[](len);\\n        ticketsToMintBatch = nft.getTicketsQuantityByIds(nftIds);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            freezeEndBlocks[i] = _freeze(nftIds[i], freezePeriods[i]);\\n\\n            if (freezePeriods[i] == MAX_PERIOD) {\\n                ticketsToMintBatch[i] = ticketsToMintBatch[i] * 2;\\n            }\\n        }\\n        emit FrozeBatch(msg.sender, nftIds, freezeEndBlocks, ticketsToMintBatch);\\n\\n        ticket.mintBatch(msg.sender, nftIds, ticketsToMintBatch);\\n        nft.safeBatchTransferFrom(msg.sender, address(this), nftIds, \\\"0x00\\\");\\n    }\\n\\n    function unfreeze(uint256 nftId) external override {\\n        _unfreeze(nftId);\\n\\n        emit Unfroze(msg.sender, nftId);\\n\\n        ticket.burn(msg.sender, nftId);\\n        nft.safeTransferFrom(address(this), msg.sender, nftId);\\n    }\\n\\n    function unfreezeBatch(uint256[] calldata nftIds) external override {\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            _unfreeze(nftIds[i]);\\n        }\\n\\n        emit UnfrozeBatch(msg.sender, nftIds);\\n\\n        ticket.burnBatch(msg.sender, nftIds);\\n        nft.safeBatchTransferFrom(address(this), msg.sender, nftIds, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Return\\u0441 NFTs froze by the user\\n     */\\n    function getNftsFrozeByUser(address user) external view override returns (uint256[] memory) {\\n        return userNFTs[user];\\n    }\\n\\n    function blocksPerDay() external pure override returns (uint256) {\\n        return BLOCKS_PER_DAY;\\n    }\\n\\n    function minFreezePeriod() external pure override returns (uint256) {\\n        return MIN_PERIOD;\\n    }\\n\\n    function maxFreezePeriod() external pure override returns (uint256) {\\n        return MAX_PERIOD;\\n    }\\n\\n    function setSweetpadNFT(address newNft) public override onlyOwner {\\n        require(newNft != address(0), \\\"SweetpadNFTFreezing: NFT contract address can't be 0\\\");\\n        nft = ISweetpadNFT(newNft);\\n    }\\n\\n    function setSweetpadTicket(address newTicket) public override onlyOwner {\\n        require(newTicket != address(0), \\\"SweetpadNFTFreezing: Ticket contract address can't be 0\\\");\\n        ticket = ISweetpadTicket(newTicket);\\n    }\\n\\n    function _freeze(uint256 nftId, uint256 freezePeriod) private returns (uint256 freezeEndBlock) {\\n        require(freezePeriod >= MIN_PERIOD && freezePeriod <= MAX_PERIOD, \\\"SweetpadNFTFreezing: Wrong freeze period\\\");\\n\\n        freezeEndBlock = freezePeriod + block.number;\\n\\n        nftData[nftId] = NFTData({freezer: msg.sender, freezeEndBlock: freezeEndBlock});\\n\\n        userNFTs[msg.sender].push(nftId);\\n    }\\n\\n    function _unfreeze(uint256 nftId) private {\\n        NFTData memory _nftData = nftData[nftId];\\n        // slither-disable-next-line incorrect-equality\\n        require(_nftData.freezer == msg.sender, \\\"SweetpadNFTFreezing: Wrong unfreezer\\\");\\n        require(_nftData.freezeEndBlock <= block.number, \\\"SweetpadNFTFreezing: Freeze period don't passed\\\");\\n        // slither-disable-next-line costly-loop\\n        delete nftData[nftId];\\n\\n        uint256[] memory _userNFTs = userNFTs[msg.sender];\\n        uint256 len = _userNFTs.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (_userNFTs[i] == nftId) {\\n                if (i != len - 1) {\\n                    userNFTs[msg.sender][i] = userNFTs[msg.sender][len - 1];\\n                }\\n                userNFTs[msg.sender].pop();\\n\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f9857618f2d863f77dc0bdf890e551a6f23b0294e891bc978696718ba8e7f0f\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ISweetpadNFT is IERC721, IERC721Metadata {\\n    enum Tier {\\n        One,\\n        Two,\\n        Three\\n    }\\n\\n    function idToTier(uint256) external view returns (Tier);\\n\\n    function tierToBoost(Tier) external view returns (uint256);\\n\\n    function getTicketsQuantityById(uint256) external view returns (uint256);\\n\\n    function getTicketsQuantityByIds(uint256[] calldata) external view returns (uint256[] calldata);\\n\\n    function setBaseURI(string memory) external;\\n\\n    function currentID() external view returns (uint256);\\n\\n    function safeMint(address, Tier) external;\\n\\n    function safeMintBatch(address, Tier[] memory) external;\\n\\n    function safeBatchTransferFrom(\\n        address,\\n        address,\\n        uint256[] memory,\\n        bytes memory\\n    ) external;\\n\\n    /// @notice Emitted when new NFT is minted\\n    event Create(uint256 indexed, Tier indexed, address indexed);\\n}\\n\",\"keccak256\":\"0x2d5306d83408fb23c126f2619fa9f614a90996db4c613e4f733d2f8bdac6a839\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadNFTFreezing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ISweetpadNFT.sol\\\";\\nimport \\\"./ISweetpadTicket.sol\\\";\\n\\ninterface ISweetpadNFTFreezing {\\n    struct NFTData {\\n        // Account that froze NFT\\n        address freezer;\\n        // block after which freezer can unfreeze NFT\\n        uint256 freezeEndBlock;\\n    }\\n\\n    function freeze(uint256, uint256) external;\\n\\n    function freezeBatch(uint256[] calldata, uint256[] calldata) external;\\n\\n    function unfreeze(uint256) external;\\n\\n    function unfreezeBatch(uint256[] calldata) external;\\n\\n    function blocksPerDay() external pure returns (uint256);\\n\\n    function minFreezePeriod() external pure returns (uint256);\\n\\n    function maxFreezePeriod() external pure returns (uint256);\\n\\n    function nft() external view returns (ISweetpadNFT);\\n\\n    function ticket() external view returns (ISweetpadTicket);\\n\\n    function nftData(uint256) external view returns (address, uint256);\\n\\n    function getNftsFrozeByUser(address) external view returns (uint256[] memory);\\n\\n    function setSweetpadNFT(address) external;\\n\\n    function setSweetpadTicket(address) external;\\n\\n    event Froze(address indexed user, uint256 nftId, uint256 freezeEndBlock, uint256 ticketsMinted);\\n\\n    event FrozeBatch(address indexed user, uint256[] nftIds, uint256[] freezeEndBlocks, uint256[] ticketsMinted);\\n\\n    event Unfroze(address indexed user, uint256 nftId);\\n\\n    event UnfrozeBatch(address indexed user, uint256[] nftId);\\n}\\n\",\"keccak256\":\"0xe3cbf17be12c04aeca03e9af484f78904adb65c4c6a02ee54b350f32dd4ab584\",\"license\":\"MIT\"},\"contracts/interfaces/ISweetpadTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface ISweetpadTicket is IERC1155 {\\n    function totalTickets() external returns (uint256);\\n\\n    function accountTickets(address) external returns (uint256);\\n\\n    function mint(\\n        address to_,\\n        uint256 id_,\\n        uint256 amount_\\n    ) external;\\n\\n    function burn(address account, uint256 id) external;\\n\\n    function mintBatch(\\n        address to_,\\n        uint256[] memory ids_,\\n        uint256[] memory amounts_\\n    ) external;\\n\\n    function burnBatch(address account, uint256[] memory ids) external;\\n}\\n\",\"keccak256\":\"0x4915535f6c5b9db7c128c4c8c0a83299cfea4ff84359282b1e85fc1568f95a0a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b5438038062001b548339810160408190526200003491620002a4565b6200003f336200005d565b6200004a82620000ad565b62000055816200019c565b5050620002dc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620000fc5760405162461bcd60e51b8152602060048201819052602482015260008051602062001b3483398151915260448201526064015b60405180910390fd5b6001600160a01b0381166200017a5760405162461bcd60e51b815260206004820152603460248201527f53776565747061644e4654467265657a696e673a204e465420636f6e7472616360448201527f7420616464726573732063616e277420626520300000000000000000000000006064820152608401620000f3565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620001e75760405162461bcd60e51b8152602060048201819052602482015260008051602062001b348339815191526044820152606401620000f3565b6001600160a01b038116620002655760405162461bcd60e51b815260206004820152603760248201527f53776565747061644e4654467265657a696e673a205469636b657420636f6e7460448201527f7261637420616464726573732063616e277420626520300000000000000000006064820152608401620000f3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160a01b03811681146200029f57600080fd5b919050565b60008060408385031215620002b857600080fd5b620002c38362000287565b9150620002d36020840162000287565b90509250929050565b61184880620002ec6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80636623fc46116100a25780638c210975116100715780638c210975146102435780638da5cb5b146102955780639bd59a82146102a6578063c4df6d0e146102b9578063f2fde38b146102cc57600080fd5b80636623fc46146102025780636cc25db714610215578063715018a6146102285780638725aa441461023057600080fd5b80633a6883f0116100e95780633a6883f0146101ad5780633e4332e8146101b557806347ccca02146101c85780634cfea68a146101f3578063661d489d146101fa57600080fd5b8063150b7a021461011b578063291c73c3146101575780633483f19d1461017857806335d7a05214610198575b600080fd5b610139610129366004611269565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61016a610165366004611329565b6102df565b60405190815260200161014e565b61018b610186366004611247565b610310565b60405161014e91906116d8565b6101ab6101a63660046114e0565b61037c565b005b61016a6105c8565b6101ab6101c3366004611247565b6105db565b6001546101db906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b600a61016a565b61016a6106a3565b6101ab6102103660046114ae565b6106b2565b6002546101db906001600160a01b031681565b6101ab6107c1565b6101ab61023e366004611353565b6107f7565b6102766102513660046114ae565b600360205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161014e565b6000546001600160a01b03166101db565b6101ab6102b4366004611247565b61094b565b6101ab6102c7366004611395565b610a13565b6101ab6102da366004611247565b610d96565b600460205281600052604060002081815481106102fb57600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561037057602002820191906000526020600020905b81548152602001906001019080831161035c575b50505050509050919050565b60006103888383610e31565b90506000610399600a610447611769565b83146104205760015460405163e1aadc7f60e01b8152600481018690526001600160a01b039091169063e1aadc7f9060240160206040518083038186803b1580156103e357600080fd5b505afa1580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041b91906114c7565b6104a7565b60015460405163e1aadc7f60e01b8152600481018690526001600160a01b039091169063e1aadc7f9060240160206040518083038186803b15801561046457600080fd5b505afa158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c91906114c7565b6104a7906002611769565b604080518681526020810185905290810182905290915033907f63a12ed3726ca03aef5efbf3b0b3f3275846ccaa693e8ebbaed404180b8f6dd59060600160405180910390a2600254604051630ab714fb60e11b815233600482015260248101869052604481018390526001600160a01b039091169063156e29f690606401600060405180830381600087803b15801561054057600080fd5b505af1158015610554573d6000803e3d6000fd5b5050600154604051632142170760e11b8152336004820152306024820152604481018890526001600160a01b0390911692506342842e0e9150606401600060405180830381600087803b1580156105aa57600080fd5b505af11580156105be573d6000803e3d6000fd5b5050505050505050565b60006105d6600a60b6611769565b905090565b6000546001600160a01b0316331461060e5760405162461bcd60e51b8152600401610605906116eb565b60405180910390fd5b6001600160a01b0381166106815760405162461bcd60e51b815260206004820152603460248201527f53776565747061644e4654467265657a696e673a204e465420636f6e7472616360448201527307420616464726573732063616e277420626520360641b6064820152608401610605565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006105d6600a610447611769565b6106bb81610f29565b60405181815233907f3c05fbf9d410481e99636173d6932b01bb4e9a22d38f1a5257475ac9bacf35189060200160405180910390a2600254604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561073c57600080fd5b505af1158015610750573d6000803e3d6000fd5b5050600154604051632142170760e11b8152306004820152336024820152604481018590526001600160a01b0390911692506342842e0e9150606401600060405180830381600087803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146107eb5760405162461bcd60e51b8152600401610605906116eb565b6107f5600061118f565b565b60005b8181101561083557610823838383818110610817576108176117e6565b90506020020135610f29565b8061082d8161179f565b9150506107fa565b50336001600160a01b03167f4ad5f5782eb0f021b983e659fbdc7e64db4a85ec4e93e3537e974740f1b88e538383604051610871929190611682565b60405180910390a260025460405163b2dc5dc360e01b81526001600160a01b039091169063b2dc5dc3906108ad90339086908690600401611612565b600060405180830381600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b5050600154604051631467dea360e11b81526001600160a01b0390911692506328cfbd4691506109159030903390879087906004016115c9565b600060405180830381600087803b15801561092f57600080fd5b505af1158015610943573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146109755760405162461bcd60e51b8152600401610605906116eb565b6001600160a01b0381166109f15760405162461bcd60e51b815260206004820152603760248201527f53776565747061644e4654467265657a696e673a205469636b657420636f6e7460448201527f7261637420616464726573732063616e277420626520300000000000000000006064820152608401610605565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b828114610a7a5760405162461bcd60e51b815260206004820152602f60248201527f53776565747061644e4654467265657a696e673a204172726179206c656e677460448201526e1a1cc81a5cc81b9bdd08195c5d585b608a1b6064820152608401610605565b8260008167ffffffffffffffff811115610a9657610a966117fc565b604051908082528060200260200182016040528015610abf578160200160208202803683370190505b50905060008267ffffffffffffffff811115610add57610add6117fc565b604051908082528060200260200182016040528015610b06578160200160208202803683370190505b506001546040516305e2936560e11b81529192506001600160a01b031690630bc526ca90610b3a908a908a90600401611682565b60006040518083038186803b158015610b5257600080fd5b505afa158015610b66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b8e9190810190611401565b915060005b83811015610c7557610bd5888883818110610bb057610bb06117e6565b90506020020135878784818110610bc957610bc96117e6565b90506020020135610e31565b828281518110610be757610be76117e6565b6020908102919091010152610bff600a610447611769565b868683818110610c1157610c116117e6565b905060200201351415610c6357828181518110610c3057610c306117e6565b60200260200101516002610c449190611769565b838281518110610c5657610c566117e6565b6020026020010181815250505b80610c6d8161179f565b915050610b93565b50336001600160a01b03167f9ebbff316f63a98ea1330837f98f32d3c63e80d2939b3ac7958f800db76fd83688888486604051610cb5949392919061169e565b60405180910390a260025460405163d81d0a1560e01b81526001600160a01b039091169063d81d0a1590610cf39033908b908b908890600401611640565b600060405180830381600087803b158015610d0d57600080fd5b505af1158015610d21573d6000803e3d6000fd5b5050600154604051631467dea360e11b81526001600160a01b0390911692506328cfbd469150610d5b90339030908c908c90600401611573565b600060405180830381600087803b158015610d7557600080fd5b505af1158015610d89573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b03163314610dc05760405162461bcd60e51b8152600401610605906116eb565b6001600160a01b038116610e255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610605565b610e2e8161118f565b50565b6000610e3f600a60b6611769565b8210158015610e5a5750610e56600a610447611769565b8211155b610eb75760405162461bcd60e51b815260206004820152602860248201527f53776565747061644e4654467265657a696e673a2057726f6e6720667265657a60448201526719481c195c9a5bd960c21b6064820152608401610605565b610ec14383611751565b604080518082018252338082526020808301858152600089815260038352858120945185546001600160a01b0319166001600160a01b039091161785559051600194850155918252600481529281208054928301815581529190912001939093555090919050565b600081815260036020908152604091829020825180840190935280546001600160a01b0316808452600190910154918301919091523314610fb85760405162461bcd60e51b8152602060048201526024808201527f53776565747061644e4654467265657a696e673a2057726f6e6720756e66726560448201526332bd32b960e11b6064820152608401610605565b43816020015111156110245760405162461bcd60e51b815260206004820152602f60248201527f53776565747061644e4654467265657a696e673a20467265657a65207065726960448201526e1bd908191bdb89dd081c185cdcd959608a1b6064820152608401610605565b600082815260036020908152604080832080546001600160a01b0319168155600101839055338352600482528083208054825181850281018501909352808352919290919083018282801561109857602002820191906000526020600020905b815481526020019060010190808311611084575b505083519394506000925050505b818110156107ba57848382815181106110c1576110c16117e6565b6020026020010151141561117d576110da600183611788565b8114611144573360009081526004602052604090206110fa600184611788565b8154811061110a5761110a6117e6565b600091825260208083209091015433835260049091526040909120805483908110611137576111376117e6565b6000918252602090912001555b336000908152600460205260409020805480611162576111626117d0565b600190038181906000526020600020016000905590556107ba565b806111878161179f565b9150506110a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146111f657600080fd5b919050565b60008083601f84011261120d57600080fd5b50813567ffffffffffffffff81111561122557600080fd5b6020830191508360208260051b850101111561124057600080fd5b9250929050565b60006020828403121561125957600080fd5b611262826111df565b9392505050565b6000806000806080858703121561127f57600080fd5b611288856111df565b935060206112978187016111df565b935060408601359250606086013567ffffffffffffffff808211156112bb57600080fd5b818801915088601f8301126112cf57600080fd5b8135818111156112e1576112e16117fc565b6112f3601f8201601f19168501611720565b9150808252898482850101111561130957600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806040838503121561133c57600080fd5b611345836111df565b946020939093013593505050565b6000806020838503121561136657600080fd5b823567ffffffffffffffff81111561137d57600080fd5b611389858286016111fb565b90969095509350505050565b600080600080604085870312156113ab57600080fd5b843567ffffffffffffffff808211156113c357600080fd5b6113cf888389016111fb565b909650945060208701359150808211156113e857600080fd5b506113f5878288016111fb565b95989497509550505050565b6000602080838503121561141457600080fd5b825167ffffffffffffffff8082111561142c57600080fd5b818501915085601f83011261144057600080fd5b815181811115611452576114526117fc565b8060051b9150611463848301611720565b8181528481019084860184860187018a101561147e57600080fd5b600095505b838610156114a1578051835260019590950194918601918601611483565b5098975050505050505050565b6000602082840312156114c057600080fd5b5035919050565b6000602082840312156114d957600080fd5b5051919050565b600080604083850312156114f357600080fd5b50508035926020909101359150565b81835260006001600160fb1b0383111561151b57600080fd5b8260051b8083602087013760009401602001938452509192915050565b600081518084526020808501945080840160005b838110156115685781518752958201959082019060010161154c565b509495945050505050565b6001600160a01b038581168252841660208201526080604082018190526000906115a09083018486611502565b828103606084015260048152630307830360e41b60208201526040810191505095945050505050565b6001600160a01b038581168252841660208201526080604082018190526000906115f69083018486611502565b8281036060840152600081526020810191505095945050505050565b6001600160a01b03841681526040602082018190526000906116379083018486611502565b95945050505050565b6001600160a01b03851681526060602082018190526000906116659083018587611502565b82810360408401526116778185611538565b979650505050505050565b602081526000611696602083018486611502565b949350505050565b6060815260006116b2606083018688611502565b82810360208401526116c48186611538565b905082810360408401526116778185611538565b6020815260006112626020830184611538565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611749576117496117fc565b604052919050565b60008219821115611764576117646117ba565b500190565b6000816000190483118215151615611783576117836117ba565b500290565b60008282101561179a5761179a6117ba565b500390565b60006000198214156117b3576117b36117ba565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fd41eae130b737a3d1d62d46ea0cbc6abacabc15f5df4aceedafac42d4a5d52764736f6c634300080700334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80636623fc46116100a25780638c210975116100715780638c210975146102435780638da5cb5b146102955780639bd59a82146102a6578063c4df6d0e146102b9578063f2fde38b146102cc57600080fd5b80636623fc46146102025780636cc25db714610215578063715018a6146102285780638725aa441461023057600080fd5b80633a6883f0116100e95780633a6883f0146101ad5780633e4332e8146101b557806347ccca02146101c85780634cfea68a146101f3578063661d489d146101fa57600080fd5b8063150b7a021461011b578063291c73c3146101575780633483f19d1461017857806335d7a05214610198575b600080fd5b610139610129366004611269565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61016a610165366004611329565b6102df565b60405190815260200161014e565b61018b610186366004611247565b610310565b60405161014e91906116d8565b6101ab6101a63660046114e0565b61037c565b005b61016a6105c8565b6101ab6101c3366004611247565b6105db565b6001546101db906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b600a61016a565b61016a6106a3565b6101ab6102103660046114ae565b6106b2565b6002546101db906001600160a01b031681565b6101ab6107c1565b6101ab61023e366004611353565b6107f7565b6102766102513660046114ae565b600360205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161014e565b6000546001600160a01b03166101db565b6101ab6102b4366004611247565b61094b565b6101ab6102c7366004611395565b610a13565b6101ab6102da366004611247565b610d96565b600460205281600052604060002081815481106102fb57600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561037057602002820191906000526020600020905b81548152602001906001019080831161035c575b50505050509050919050565b60006103888383610e31565b90506000610399600a610447611769565b83146104205760015460405163e1aadc7f60e01b8152600481018690526001600160a01b039091169063e1aadc7f9060240160206040518083038186803b1580156103e357600080fd5b505afa1580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041b91906114c7565b6104a7565b60015460405163e1aadc7f60e01b8152600481018690526001600160a01b039091169063e1aadc7f9060240160206040518083038186803b15801561046457600080fd5b505afa158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c91906114c7565b6104a7906002611769565b604080518681526020810185905290810182905290915033907f63a12ed3726ca03aef5efbf3b0b3f3275846ccaa693e8ebbaed404180b8f6dd59060600160405180910390a2600254604051630ab714fb60e11b815233600482015260248101869052604481018390526001600160a01b039091169063156e29f690606401600060405180830381600087803b15801561054057600080fd5b505af1158015610554573d6000803e3d6000fd5b5050600154604051632142170760e11b8152336004820152306024820152604481018890526001600160a01b0390911692506342842e0e9150606401600060405180830381600087803b1580156105aa57600080fd5b505af11580156105be573d6000803e3d6000fd5b5050505050505050565b60006105d6600a60b6611769565b905090565b6000546001600160a01b0316331461060e5760405162461bcd60e51b8152600401610605906116eb565b60405180910390fd5b6001600160a01b0381166106815760405162461bcd60e51b815260206004820152603460248201527f53776565747061644e4654467265657a696e673a204e465420636f6e7472616360448201527307420616464726573732063616e277420626520360641b6064820152608401610605565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006105d6600a610447611769565b6106bb81610f29565b60405181815233907f3c05fbf9d410481e99636173d6932b01bb4e9a22d38f1a5257475ac9bacf35189060200160405180910390a2600254604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561073c57600080fd5b505af1158015610750573d6000803e3d6000fd5b5050600154604051632142170760e11b8152306004820152336024820152604481018590526001600160a01b0390911692506342842e0e9150606401600060405180830381600087803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146107eb5760405162461bcd60e51b8152600401610605906116eb565b6107f5600061118f565b565b60005b8181101561083557610823838383818110610817576108176117e6565b90506020020135610f29565b8061082d8161179f565b9150506107fa565b50336001600160a01b03167f4ad5f5782eb0f021b983e659fbdc7e64db4a85ec4e93e3537e974740f1b88e538383604051610871929190611682565b60405180910390a260025460405163b2dc5dc360e01b81526001600160a01b039091169063b2dc5dc3906108ad90339086908690600401611612565b600060405180830381600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b5050600154604051631467dea360e11b81526001600160a01b0390911692506328cfbd4691506109159030903390879087906004016115c9565b600060405180830381600087803b15801561092f57600080fd5b505af1158015610943573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146109755760405162461bcd60e51b8152600401610605906116eb565b6001600160a01b0381166109f15760405162461bcd60e51b815260206004820152603760248201527f53776565747061644e4654467265657a696e673a205469636b657420636f6e7460448201527f7261637420616464726573732063616e277420626520300000000000000000006064820152608401610605565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b828114610a7a5760405162461bcd60e51b815260206004820152602f60248201527f53776565747061644e4654467265657a696e673a204172726179206c656e677460448201526e1a1cc81a5cc81b9bdd08195c5d585b608a1b6064820152608401610605565b8260008167ffffffffffffffff811115610a9657610a966117fc565b604051908082528060200260200182016040528015610abf578160200160208202803683370190505b50905060008267ffffffffffffffff811115610add57610add6117fc565b604051908082528060200260200182016040528015610b06578160200160208202803683370190505b506001546040516305e2936560e11b81529192506001600160a01b031690630bc526ca90610b3a908a908a90600401611682565b60006040518083038186803b158015610b5257600080fd5b505afa158015610b66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b8e9190810190611401565b915060005b83811015610c7557610bd5888883818110610bb057610bb06117e6565b90506020020135878784818110610bc957610bc96117e6565b90506020020135610e31565b828281518110610be757610be76117e6565b6020908102919091010152610bff600a610447611769565b868683818110610c1157610c116117e6565b905060200201351415610c6357828181518110610c3057610c306117e6565b60200260200101516002610c449190611769565b838281518110610c5657610c566117e6565b6020026020010181815250505b80610c6d8161179f565b915050610b93565b50336001600160a01b03167f9ebbff316f63a98ea1330837f98f32d3c63e80d2939b3ac7958f800db76fd83688888486604051610cb5949392919061169e565b60405180910390a260025460405163d81d0a1560e01b81526001600160a01b039091169063d81d0a1590610cf39033908b908b908890600401611640565b600060405180830381600087803b158015610d0d57600080fd5b505af1158015610d21573d6000803e3d6000fd5b5050600154604051631467dea360e11b81526001600160a01b0390911692506328cfbd469150610d5b90339030908c908c90600401611573565b600060405180830381600087803b158015610d7557600080fd5b505af1158015610d89573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b03163314610dc05760405162461bcd60e51b8152600401610605906116eb565b6001600160a01b038116610e255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610605565b610e2e8161118f565b50565b6000610e3f600a60b6611769565b8210158015610e5a5750610e56600a610447611769565b8211155b610eb75760405162461bcd60e51b815260206004820152602860248201527f53776565747061644e4654467265657a696e673a2057726f6e6720667265657a60448201526719481c195c9a5bd960c21b6064820152608401610605565b610ec14383611751565b604080518082018252338082526020808301858152600089815260038352858120945185546001600160a01b0319166001600160a01b039091161785559051600194850155918252600481529281208054928301815581529190912001939093555090919050565b600081815260036020908152604091829020825180840190935280546001600160a01b0316808452600190910154918301919091523314610fb85760405162461bcd60e51b8152602060048201526024808201527f53776565747061644e4654467265657a696e673a2057726f6e6720756e66726560448201526332bd32b960e11b6064820152608401610605565b43816020015111156110245760405162461bcd60e51b815260206004820152602f60248201527f53776565747061644e4654467265657a696e673a20467265657a65207065726960448201526e1bd908191bdb89dd081c185cdcd959608a1b6064820152608401610605565b600082815260036020908152604080832080546001600160a01b0319168155600101839055338352600482528083208054825181850281018501909352808352919290919083018282801561109857602002820191906000526020600020905b815481526020019060010190808311611084575b505083519394506000925050505b818110156107ba57848382815181106110c1576110c16117e6565b6020026020010151141561117d576110da600183611788565b8114611144573360009081526004602052604090206110fa600184611788565b8154811061110a5761110a6117e6565b600091825260208083209091015433835260049091526040909120805483908110611137576111376117e6565b6000918252602090912001555b336000908152600460205260409020805480611162576111626117d0565b600190038181906000526020600020016000905590556107ba565b806111878161179f565b9150506110a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146111f657600080fd5b919050565b60008083601f84011261120d57600080fd5b50813567ffffffffffffffff81111561122557600080fd5b6020830191508360208260051b850101111561124057600080fd5b9250929050565b60006020828403121561125957600080fd5b611262826111df565b9392505050565b6000806000806080858703121561127f57600080fd5b611288856111df565b935060206112978187016111df565b935060408601359250606086013567ffffffffffffffff808211156112bb57600080fd5b818801915088601f8301126112cf57600080fd5b8135818111156112e1576112e16117fc565b6112f3601f8201601f19168501611720565b9150808252898482850101111561130957600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806040838503121561133c57600080fd5b611345836111df565b946020939093013593505050565b6000806020838503121561136657600080fd5b823567ffffffffffffffff81111561137d57600080fd5b611389858286016111fb565b90969095509350505050565b600080600080604085870312156113ab57600080fd5b843567ffffffffffffffff808211156113c357600080fd5b6113cf888389016111fb565b909650945060208701359150808211156113e857600080fd5b506113f5878288016111fb565b95989497509550505050565b6000602080838503121561141457600080fd5b825167ffffffffffffffff8082111561142c57600080fd5b818501915085601f83011261144057600080fd5b815181811115611452576114526117fc565b8060051b9150611463848301611720565b8181528481019084860184860187018a101561147e57600080fd5b600095505b838610156114a1578051835260019590950194918601918601611483565b5098975050505050505050565b6000602082840312156114c057600080fd5b5035919050565b6000602082840312156114d957600080fd5b5051919050565b600080604083850312156114f357600080fd5b50508035926020909101359150565b81835260006001600160fb1b0383111561151b57600080fd5b8260051b8083602087013760009401602001938452509192915050565b600081518084526020808501945080840160005b838110156115685781518752958201959082019060010161154c565b509495945050505050565b6001600160a01b038581168252841660208201526080604082018190526000906115a09083018486611502565b828103606084015260048152630307830360e41b60208201526040810191505095945050505050565b6001600160a01b038581168252841660208201526080604082018190526000906115f69083018486611502565b8281036060840152600081526020810191505095945050505050565b6001600160a01b03841681526040602082018190526000906116379083018486611502565b95945050505050565b6001600160a01b03851681526060602082018190526000906116659083018587611502565b82810360408401526116778185611538565b979650505050505050565b602081526000611696602083018486611502565b949350505050565b6060815260006116b2606083018688611502565b82810360208401526116c48186611538565b905082810360408401526116778185611538565b6020815260006112626020830184611538565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611749576117496117fc565b604052919050565b60008219821115611764576117646117ba565b500190565b6000816000190483118215151615611783576117836117ba565b500290565b60008282101561179a5761179a6117ba565b500390565b60006000198214156117b3576117b36117ba565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fd41eae130b737a3d1d62d46ea0cbc6abacabc15f5df4aceedafac42d4a5d52764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "freeze(uint256,uint256)": {
        "params": {
          "freezePeriod": ": freezing period in blocks",
          "nftId": ": the id of the NFT"
        }
      },
      "freezeBatch(uint256[],uint256[])": {
        "params": {
          "freezePeriods": ": freezing periods in blocks",
          "nftIds": ": the ids of the NFT"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "freeze(uint256,uint256)": {
        "notice": "Freeze Sweetpad NFT"
      },
      "freezeBatch(uint256[],uint256[])": {
        "notice": "Freeze Sweetpad NFTs"
      },
      "getNftsFrozeByUser(address)": {
        "notice": "Returnс NFTs froze by the user"
      },
      "nftData(uint256)": {
        "notice": "NFT id -> frozen NFT data"
      },
      "userNFTs(address,uint256)": {
        "notice": "user address -> NFT id's freezed by user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4936,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "nft",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISweetpadNFT)5984"
      },
      {
        "astId": 4940,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "ticket",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISweetpadTicket)6164"
      },
      {
        "astId": 4947,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "nftData",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(NFTData)5993_storage)"
      },
      {
        "astId": 4953,
        "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
        "label": "userNFTs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ISweetpadNFT)5984": {
        "encoding": "inplace",
        "label": "contract ISweetpadNFT",
        "numberOfBytes": "20"
      },
      "t_contract(ISweetpadTicket)6164": {
        "encoding": "inplace",
        "label": "contract ISweetpadTicket",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(NFTData)5993_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISweetpadNFTFreezing.NFTData)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTData)5993_storage"
      },
      "t_struct(NFTData)5993_storage": {
        "encoding": "inplace",
        "label": "struct ISweetpadNFTFreezing.NFTData",
        "members": [
          {
            "astId": 5990,
            "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
            "label": "freezer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5992,
            "contract": "contracts/SweetpadNFTFreezing.sol:SweetpadNFTFreezing",
            "label": "freezeEndBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}